
/Users/talalagedeon/Desktop/jordanFarm/weatherStation/target/2.1.0/photon/weatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003990  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a39b0  080a39b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a39b8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080a39bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000534  20000070  20000070  00030070  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a3a2c  080a3a2c  00023a2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a3a54  080a3a54  00023a54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f1043  00000000  00000000  00023a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000122d2  00000000  00000000  00114a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a610  00000000  00000000  00126d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001f40  00000000  00000000  0014137d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004dc8  00000000  00000000  001432bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00024610  00000000  00000000  00148085  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00028a40  00000000  00000000  0016c695  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b2bb7  00000000  00000000  001950d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00005184  00000000  00000000  00247c8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 f9ab 	bl	80a338c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 f9cd 	bl	80a33dc <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a39bc 	.word	0x080a39bc
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000070 	.word	0x20000070
 80a0058:	200005a4 	.word	0x200005a4
 80a005c:	200005a4 	.word	0x200005a4

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fba5 	bl	80a27b0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a3984 	.word	0x080a3984
 80a0084:	080a39a4 	.word	0x080a39a4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b86c 	b.w	80a0164 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f871 	bl	80a0174 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f002 bb4d 	b.w	80a2734 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f000 bc85 	b.w	80a09a8 <malloc>

080a009e <_Znaj>:
 80a009e:	f000 bc83 	b.w	80a09a8 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f000 bc89 	b.w	80a09b8 <free>
	...

080a00a8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a02      	ldr	r2, [pc, #8]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00b0:	f000 fbce 	bl	80a0850 <panic_>
  while (1);
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a05fd 	.word	0x080a05fd

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 80a00cc:	4770      	bx	lr

080a00ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00ce:	6a00      	ldr	r0, [r0, #32]
 80a00d0:	6803      	ldr	r3, [r0, #0]
 80a00d2:	68db      	ldr	r3, [r3, #12]
 80a00d4:	4718      	bx	r3
	...

080a00d8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a00d8:	b510      	push	{r4, lr}
 80a00da:	4604      	mov	r4, r0
 80a00dc:	4b09      	ldr	r3, [pc, #36]	; (80a0104 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a00de:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a00e0:	f001 f8ec 	bl	80a12bc <_ZN5spark10LogManager8instanceEv>
 80a00e4:	4621      	mov	r1, r4
 80a00e6:	f001 fafd 	bl	80a16e4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a00ea:	f002 fa27 	bl	80a253c <_Z16_fetch_usbserialv>
 80a00ee:	f002 fa0b 	bl	80a2508 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	4b04      	ldr	r3, [pc, #16]	; (80a0108 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a00f6:	f840 3b04 	str.w	r3, [r0], #4
 80a00fa:	f001 f9e1 	bl	80a14c0 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a00fe:	4620      	mov	r0, r4
 80a0100:	bd10      	pop	{r4, pc}
 80a0102:	bf00      	nop
 80a0104:	080a3644 	.word	0x080a3644
 80a0108:	080a362c 	.word	0x080a362c

080a010c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 80a010c:	b510      	push	{r4, lr}
 80a010e:	4604      	mov	r4, r0
    }
 80a0110:	f7ff ffe2 	bl	80a00d8 <_ZN5spark16SerialLogHandlerD1Ev>
 80a0114:	4620      	mov	r0, r4
 80a0116:	2124      	movs	r1, #36	; 0x24
 80a0118:	f002 fbd9 	bl	80a28ce <_ZdlPvj>
 80a011c:	4620      	mov	r0, r4
 80a011e:	bd10      	pop	{r4, pc}

080a0120 <_ZN11SystemClass6uptimeEv>:
    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
    }

    static unsigned uptime() {
 80a0120:	b508      	push	{r3, lr}
        return (hal_timer_millis(nullptr) / 1000);
 80a0122:	2000      	movs	r0, #0
 80a0124:	f000 fa7a 	bl	80a061c <hal_timer_millis>
 80a0128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a012c:	2300      	movs	r3, #0
 80a012e:	f002 ffa3 	bl	80a3078 <__aeabi_uldivmod>
    }
 80a0132:	bd08      	pop	{r3, pc}

080a0134 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a0134:	b40e      	push	{r1, r2, r3}
 80a0136:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0138:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80a013a:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80a013c:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80a013e:	b08d      	sub	sp, #52	; 0x34
 80a0140:	aa0f      	add	r2, sp, #60	; 0x3c
 80a0142:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80a0146:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a014a:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80a014e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0150:	201e      	movs	r0, #30
 80a0152:	aa04      	add	r2, sp, #16
 80a0154:	f000 fb84 	bl	80a0860 <log_message_v>
}
 80a0158:	b00d      	add	sp, #52	; 0x34
 80a015a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a015e:	b003      	add	sp, #12
 80a0160:	4770      	bx	lr
	...

080a0164 <setup>:

Sht3xi2c sensor(Wire);

void setup()
{
sensor.begin(CLOCK_SPEED_400KHZ);
 80a0164:	4901      	ldr	r1, [pc, #4]	; (80a016c <setup+0x8>)
 80a0166:	4802      	ldr	r0, [pc, #8]	; (80a0170 <setup+0xc>)
 80a0168:	f000 b928 	b.w	80a03bc <_ZN8Sht3xi2c5beginEm>
 80a016c:	00061a80 	.word	0x00061a80
 80a0170:	200000a0 	.word	0x200000a0

080a0174 <loop>:
}

void loop()
{
 80a0174:	b530      	push	{r4, r5, lr}
static uint32_t timer = System.uptime();
 80a0176:	4d17      	ldr	r5, [pc, #92]	; (80a01d4 <loop+0x60>)
 80a0178:	4c17      	ldr	r4, [pc, #92]	; (80a01d8 <loop+0x64>)
 80a017a:	782b      	ldrb	r3, [r5, #0]
{
 80a017c:	b087      	sub	sp, #28
static uint32_t timer = System.uptime();
 80a017e:	f013 0f01 	tst.w	r3, #1
 80a0182:	f3bf 8f5b 	dmb	ish
 80a0186:	d109      	bne.n	80a019c <loop+0x28>
 80a0188:	4628      	mov	r0, r5
 80a018a:	f7ff ff97 	bl	80a00bc <__cxa_guard_acquire>
 80a018e:	b128      	cbz	r0, 80a019c <loop+0x28>
 80a0190:	f7ff ffc6 	bl	80a0120 <_ZN11SystemClass6uptimeEv>
 80a0194:	6020      	str	r0, [r4, #0]
 80a0196:	4628      	mov	r0, r5
 80a0198:	f7ff ff95 	bl	80a00c6 <__cxa_guard_release>
double temp, humid;

if (System.uptime() - timer > 5)
 80a019c:	f7ff ffc0 	bl	80a0120 <_ZN11SystemClass6uptimeEv>
 80a01a0:	6823      	ldr	r3, [r4, #0]
 80a01a2:	1ac0      	subs	r0, r0, r3
 80a01a4:	2805      	cmp	r0, #5
 80a01a6:	d913      	bls.n	80a01d0 <loop+0x5c>
{
timer = System.uptime();
 80a01a8:	f7ff ffba 	bl	80a0120 <_ZN11SystemClass6uptimeEv>
if (sensor.single_shot(&temp, &humid) == 0)
 80a01ac:	2301      	movs	r3, #1
timer = System.uptime();
 80a01ae:	6020      	str	r0, [r4, #0]
if (sensor.single_shot(&temp, &humid) == 0)
 80a01b0:	aa04      	add	r2, sp, #16
 80a01b2:	480a      	ldr	r0, [pc, #40]	; (80a01dc <loop+0x68>)
 80a01b4:	a902      	add	r1, sp, #8
 80a01b6:	f000 f9b3 	bl	80a0520 <_ZN8Sht3xi2c11single_shotEPdS0_h>
 80a01ba:	b948      	cbnz	r0, 80a01d0 <loop+0x5c>
{
Log.info("Temperature: %.2f, Humidity: %.2f", temp, humid);
 80a01bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a01c0:	4907      	ldr	r1, [pc, #28]	; (80a01e0 <loop+0x6c>)
 80a01c2:	e9cd 2300 	strd	r2, r3, [sp]
 80a01c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a01ca:	4806      	ldr	r0, [pc, #24]	; (80a01e4 <loop+0x70>)
 80a01cc:	f7ff ffb2 	bl	80a0134 <_ZNK5spark6Logger4infoEPKcz>
}
}
 80a01d0:	b007      	add	sp, #28
 80a01d2:	bd30      	pop	{r4, r5, pc}
 80a01d4:	20000074 	.word	0x20000074
 80a01d8:	20000078 	.word	0x20000078
 80a01dc:	200000a0 	.word	0x200000a0
 80a01e0:	080a3600 	.word	0x080a3600
 80a01e4:	200000b4 	.word	0x200000b4

080a01e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a01e8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a01ea:	2614      	movs	r6, #20
 80a01ec:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a01f0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a01f2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a01f6:	42ae      	cmp	r6, r5
 80a01f8:	d004      	beq.n	80a0204 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 80a01fa:	4628      	mov	r0, r5
 80a01fc:	f001 ffe8 	bl	80a21d0 <_ZN6StringD1Ev>
 80a0200:	3514      	adds	r5, #20
 80a0202:	e7f8      	b.n	80a01f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a0204:	6820      	ldr	r0, [r4, #0]
 80a0206:	f000 fbd7 	bl	80a09b8 <free>
    AllocatorT::free(data_);
}
 80a020a:	4620      	mov	r0, r4
 80a020c:	bd70      	pop	{r4, r5, r6, pc}

080a020e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a020e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a0210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0212:	4604      	mov	r4, r0
 80a0214:	460d      	mov	r5, r1
 80a0216:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a0218:	d916      	bls.n	80a0248 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a021a:	4290      	cmp	r0, r2
 80a021c:	d215      	bcs.n	80a024a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 80a021e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 80a0222:	1a75      	subs	r5, r6, r1
 80a0224:	f1a1 0714 	sub.w	r7, r1, #20
 80a0228:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a022a:	42b7      	cmp	r7, r6
 80a022c:	d01c      	beq.n	80a0268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a022e:	b12c      	cbz	r4, 80a023c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a0230:	4631      	mov	r1, r6
 80a0232:	4620      	mov	r0, r4
 80a0234:	f002 f833 	bl	80a229e <_ZN6StringC1EOS_>
 80a0238:	7c33      	ldrb	r3, [r6, #16]
 80a023a:	7423      	strb	r3, [r4, #16]
 80a023c:	4630      	mov	r0, r6
 80a023e:	f001 ffc7 	bl	80a21d0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a0242:	3e14      	subs	r6, #20
 80a0244:	3c14      	subs	r4, #20
 80a0246:	e7f0      	b.n	80a022a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a0248:	d00e      	beq.n	80a0268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a024a:	42b5      	cmp	r5, r6
 80a024c:	d00c      	beq.n	80a0268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a024e:	b12c      	cbz	r4, 80a025c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a0250:	4629      	mov	r1, r5
 80a0252:	4620      	mov	r0, r4
 80a0254:	f002 f823 	bl	80a229e <_ZN6StringC1EOS_>
 80a0258:	7c2b      	ldrb	r3, [r5, #16]
 80a025a:	7423      	strb	r3, [r4, #16]
 80a025c:	4628      	mov	r0, r5
 80a025e:	f001 ffb7 	bl	80a21d0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a0262:	3514      	adds	r5, #20
 80a0264:	3414      	adds	r4, #20
 80a0266:	e7f0      	b.n	80a024a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 80a0268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a026a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 80a026a:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a026c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 80a0270:	e9c0 3300 	strd	r3, r3, [r0]
 80a0274:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0276:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0278:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a027a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a027c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a027e:	dd24      	ble.n	80a02ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 80a0280:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 80a0284:	fb08 f007 	mul.w	r0, r8, r7
 80a0288:	f000 fb8e 	bl	80a09a8 <malloc>
            if (!d) {
 80a028c:	4605      	mov	r5, r0
 80a028e:	b1e0      	cbz	r0, 80a02ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 80a0290:	e9d4 1200 	ldrd	r1, r2, [r4]
 80a0294:	fb08 1202 	mla	r2, r8, r2, r1
 80a0298:	f7ff ffb9 	bl	80a020e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a029c:	6820      	ldr	r0, [r4, #0]
 80a029e:	f000 fb8b 	bl	80a09b8 <free>
        data_ = d;
 80a02a2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a02a4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a02a6:	e9d6 7300 	ldrd	r7, r3, [r6]
 80a02aa:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 80a02ae:	45b8      	cmp	r8, r7
 80a02b0:	d009      	beq.n	80a02c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 80a02b2:	4639      	mov	r1, r7
 80a02b4:	4628      	mov	r0, r5
 80a02b6:	f002 f80c 	bl	80a22d2 <_ZN6StringC1ERKS_>
 80a02ba:	7c3b      	ldrb	r3, [r7, #16]
 80a02bc:	3514      	adds	r5, #20
 80a02be:	f805 3c04 	strb.w	r3, [r5, #-4]
 80a02c2:	3714      	adds	r7, #20
 80a02c4:	e7f3      	b.n	80a02ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 80a02c6:	6873      	ldr	r3, [r6, #4]
 80a02c8:	6063      	str	r3, [r4, #4]
}
 80a02ca:	4620      	mov	r0, r4
 80a02cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a02d0 <_GLOBAL__sub_I_logHandler>:
        capacity_(0) {
 80a02d0:	2300      	movs	r3, #0
 80a02d2:	b570      	push	{r4, r5, r6, lr}
 80a02d4:	b08c      	sub	sp, #48	; 0x30
 80a02d6:	e9cd 3300 	strd	r3, r3, [sp]
 80a02da:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 80a02dc:	f002 f92e 	bl	80a253c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 80a02e0:	4c20      	ldr	r4, [pc, #128]	; (80a0364 <_GLOBAL__sub_I_logHandler+0x94>)
 80a02e2:	4605      	mov	r5, r0
 80a02e4:	4626      	mov	r6, r4
 80a02e6:	4669      	mov	r1, sp
 80a02e8:	a803      	add	r0, sp, #12
 80a02ea:	f7ff ffbe 	bl	80a026a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 80a02ee:	a903      	add	r1, sp, #12
 80a02f0:	a806      	add	r0, sp, #24
 80a02f2:	f7ff ffba 	bl	80a026a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 80a02f6:	4b1c      	ldr	r3, [pc, #112]	; (80a0368 <_GLOBAL__sub_I_logHandler+0x98>)
 80a02f8:	a906      	add	r1, sp, #24
 80a02fa:	f846 3b04 	str.w	r3, [r6], #4
 80a02fe:	a809      	add	r0, sp, #36	; 0x24
 80a0300:	f7ff ffb3 	bl	80a026a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a0304:	aa09      	add	r2, sp, #36	; 0x24
 80a0306:	211e      	movs	r1, #30
 80a0308:	4630      	mov	r0, r6
 80a030a:	f001 fb3d 	bl	80a1988 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a030e:	a809      	add	r0, sp, #36	; 0x24
 80a0310:	f7ff ff6a 	bl	80a01e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 80a0314:	a806      	add	r0, sp, #24
 80a0316:	f7ff ff67 	bl	80a01e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a031a:	4b14      	ldr	r3, [pc, #80]	; (80a036c <_GLOBAL__sub_I_logHandler+0x9c>)
 80a031c:	a803      	add	r0, sp, #12
 80a031e:	6023      	str	r3, [r4, #0]
 80a0320:	6225      	str	r5, [r4, #32]
 80a0322:	f7ff ff61 	bl	80a01e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0326:	4b12      	ldr	r3, [pc, #72]	; (80a0370 <_GLOBAL__sub_I_logHandler+0xa0>)
 80a0328:	6023      	str	r3, [r4, #0]
        Serial.begin();
 80a032a:	f002 f907 	bl	80a253c <_Z16_fetch_usbserialv>
 80a032e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0332:	f002 f8e5 	bl	80a2500 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a0336:	f000 ffc1 	bl	80a12bc <_ZN5spark10LogManager8instanceEv>
 80a033a:	4621      	mov	r1, r4
 80a033c:	f001 fab7 	bl	80a18ae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 80a0340:	4668      	mov	r0, sp
 80a0342:	f7ff ff51 	bl	80a01e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0346:	4a0b      	ldr	r2, [pc, #44]	; (80a0374 <_GLOBAL__sub_I_logHandler+0xa4>)
 80a0348:	490b      	ldr	r1, [pc, #44]	; (80a0378 <_GLOBAL__sub_I_logHandler+0xa8>)
 80a034a:	4620      	mov	r0, r4
 80a034c:	f002 faba 	bl	80a28c4 <__aeabi_atexit>
Sht3xi2c sensor(Wire);
 80a0350:	f002 fa78 	bl	80a2844 <_Z19__fetch_global_Wirev>
 80a0354:	2244      	movs	r2, #68	; 0x44
 80a0356:	4601      	mov	r1, r0
 80a0358:	4808      	ldr	r0, [pc, #32]	; (80a037c <_GLOBAL__sub_I_logHandler+0xac>)
 80a035a:	f000 f82a 	bl	80a03b2 <_ZN8Sht3xi2cC1ER7TwoWireh>
 80a035e:	b00c      	add	sp, #48	; 0x30
 80a0360:	bd70      	pop	{r4, r5, r6, pc}
 80a0362:	bf00      	nop
 80a0364:	2000007c 	.word	0x2000007c
 80a0368:	080a362c 	.word	0x080a362c
 80a036c:	080a3734 	.word	0x080a3734
 80a0370:	080a3644 	.word	0x080a3644
 80a0374:	20000070 	.word	0x20000070
 80a0378:	080a00d9 	.word	0x080a00d9
 80a037c:	200000a0 	.word	0x200000a0

080a0380 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0380:	6803      	ldr	r3, [r0, #0]
 80a0382:	b2c9      	uxtb	r1, r1
 80a0384:	689b      	ldr	r3, [r3, #8]
 80a0386:	4718      	bx	r3

080a0388 <_Z4crc8Phj>:
uint8_t crc8(uint8_t *buf, size_t len)
{
    uint8_t crc = 0xFF;

    size_t i, j;
    for (i = 0; i < len; i++)
 80a0388:	4603      	mov	r3, r0
 80a038a:	4401      	add	r1, r0
    uint8_t crc = 0xFF;
 80a038c:	20ff      	movs	r0, #255	; 0xff
    for (i = 0; i < len; i++)
 80a038e:	4299      	cmp	r1, r3
 80a0390:	d00e      	beq.n	80a03b0 <_Z4crc8Phj+0x28>
    {
        crc ^= buf[i];
 80a0392:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0396:	4050      	eors	r0, r2
 80a0398:	2208      	movs	r2, #8

        for (j = 0; j < 8; j++)
        {
            crc = (crc & 0x80)
 80a039a:	f010 0f80 	tst.w	r0, #128	; 0x80
 80a039e:	ea4f 0040 	mov.w	r0, r0, lsl #1
                      ? (crc << 1) ^ 0x31
 80a03a2:	bf18      	it	ne
 80a03a4:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
        for (j = 0; j < 8; j++)
 80a03a8:	3a01      	subs	r2, #1
            crc = (crc & 0x80)
 80a03aa:	b2c0      	uxtb	r0, r0
        for (j = 0; j < 8; j++)
 80a03ac:	d1f5      	bne.n	80a039a <_Z4crc8Phj+0x12>
 80a03ae:	e7ee      	b.n	80a038e <_Z4crc8Phj+0x6>
                      : (crc << 1);
        }
    }
    return crc;
}
 80a03b0:	4770      	bx	lr

080a03b2 <_ZN8Sht3xi2cC1ER7TwoWireh>:

Sht3xi2c::Sht3xi2c(TwoWire& interface, uint8_t i2c_addr)
{
  _wire = &interface;
 80a03b2:	6001      	str	r1, [r0, #0]
  _state = SHT31_STATE_IDLE;
 80a03b4:	2100      	movs	r1, #0
  _i2c_addr = i2c_addr;
 80a03b6:	7142      	strb	r2, [r0, #5]
  _state = SHT31_STATE_IDLE;
 80a03b8:	7101      	strb	r1, [r0, #4]
}
 80a03ba:	4770      	bx	lr

080a03bc <_ZN8Sht3xi2c5beginEm>:

void Sht3xi2c::begin(uint32_t speed)
{
 80a03bc:	b538      	push	{r3, r4, r5, lr}
 80a03be:	4604      	mov	r4, r0
    if (!_wire->isEnabled())
 80a03c0:	6800      	ldr	r0, [r0, #0]
{
 80a03c2:	460d      	mov	r5, r1
    if (!_wire->isEnabled())
 80a03c4:	f000 fbc1 	bl	80a0b4a <_ZN7TwoWire9isEnabledEv>
 80a03c8:	b958      	cbnz	r0, 80a03e2 <_ZN8Sht3xi2c5beginEm+0x26>
    {
        _wire->reset();
 80a03ca:	6820      	ldr	r0, [r4, #0]
 80a03cc:	f000 fbc1 	bl	80a0b52 <_ZN7TwoWire5resetEv>
        _wire->setSpeed(speed);
 80a03d0:	6820      	ldr	r0, [r4, #0]
 80a03d2:	4629      	mov	r1, r5
 80a03d4:	f000 fb78 	bl	80a0ac8 <_ZN7TwoWire8setSpeedEm>
        _wire->begin();
 80a03d8:	6820      	ldr	r0, [r4, #0]
    }
}
 80a03da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        _wire->begin();
 80a03de:	f000 bb77 	b.w	80a0ad0 <_ZN7TwoWire5beginEv>
}
 80a03e2:	bd38      	pop	{r3, r4, r5, pc}

080a03e4 <_ZN8Sht3xi2c13stop_periodicEv>:
    _wire->unlock();
    return ret_value;
}

bool Sht3xi2c::stop_periodic()
{
 80a03e4:	b510      	push	{r4, lr}
 80a03e6:	4604      	mov	r4, r0
    if (!_wire->lock()) return false;
 80a03e8:	6800      	ldr	r0, [r0, #0]
 80a03ea:	f000 fbb7 	bl	80a0b5c <_ZN7TwoWire4lockEv>
 80a03ee:	b1b8      	cbz	r0, 80a0420 <_ZN8Sht3xi2c13stop_periodicEv+0x3c>
    _wire->beginTransmission(_i2c_addr);
 80a03f0:	7961      	ldrb	r1, [r4, #5]
 80a03f2:	6820      	ldr	r0, [r4, #0]
 80a03f4:	f000 fb9e 	bl	80a0b34 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write(0x30);
 80a03f8:	2130      	movs	r1, #48	; 0x30
 80a03fa:	6820      	ldr	r0, [r4, #0]
 80a03fc:	f7ff ffc0 	bl	80a0380 <_ZN7TwoWire5writeEi>
    _wire->write(0x93);
 80a0400:	2193      	movs	r1, #147	; 0x93
 80a0402:	6820      	ldr	r0, [r4, #0]
 80a0404:	f7ff ffbc 	bl	80a0380 <_ZN7TwoWire5writeEi>
    if (_wire->endTransmission() == 0) _state = SHT31_STATE_IDLE;
 80a0408:	6820      	ldr	r0, [r4, #0]
 80a040a:	f000 fb9b 	bl	80a0b44 <_ZN7TwoWire15endTransmissionEv>
 80a040e:	b900      	cbnz	r0, 80a0412 <_ZN8Sht3xi2c13stop_periodicEv+0x2e>
 80a0410:	7120      	strb	r0, [r4, #4]
    _wire->unlock();
 80a0412:	6820      	ldr	r0, [r4, #0]
 80a0414:	f000 fbab 	bl	80a0b6e <_ZN7TwoWire6unlockEv>
    return (_state == SHT31_STATE_IDLE);
 80a0418:	7920      	ldrb	r0, [r4, #4]
 80a041a:	fab0 f080 	clz	r0, r0
 80a041e:	0940      	lsrs	r0, r0, #5
}
 80a0420:	bd10      	pop	{r4, pc}
 80a0422:	0000      	movs	r0, r0
 80a0424:	0000      	movs	r0, r0
	...

080a0428 <_ZN8Sht3xi2c14pr_get_readingEPdS0_>:

int Sht3xi2c::pr_get_reading(double *temp, double *humid)
{
 80a0428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a042a:	4604      	mov	r4, r0
 80a042c:	460f      	mov	r7, r1
 80a042e:	4615      	mov	r5, r2
    _wire->requestFrom(_i2c_addr, 6);
 80a0430:	7941      	ldrb	r1, [r0, #5]
 80a0432:	2206      	movs	r2, #6
 80a0434:	6800      	ldr	r0, [r0, #0]
 80a0436:	f000 fb7a 	bl	80a0b2e <_ZN7TwoWire11requestFromEhj>
    if (_wire->available() != 6)
 80a043a:	6820      	ldr	r0, [r4, #0]
 80a043c:	6803      	ldr	r3, [r0, #0]
 80a043e:	691b      	ldr	r3, [r3, #16]
 80a0440:	4798      	blx	r3
 80a0442:	2806      	cmp	r0, #6
 80a0444:	d15a      	bne.n	80a04fc <_ZN8Sht3xi2c14pr_get_readingEPdS0_+0xd4>
    {
        return SHT31_I2C_ERROR;
    }
    uint8_t ts[2], rh[2];
    ts[0] = _wire->read();
 80a0446:	6820      	ldr	r0, [r4, #0]
 80a0448:	6803      	ldr	r3, [r0, #0]
 80a044a:	695b      	ldr	r3, [r3, #20]
 80a044c:	4798      	blx	r3
 80a044e:	4606      	mov	r6, r0
 80a0450:	f88d 0000 	strb.w	r0, [sp]
    ts[1] = _wire->read();
 80a0454:	6820      	ldr	r0, [r4, #0]
 80a0456:	6803      	ldr	r3, [r0, #0]
 80a0458:	695b      	ldr	r3, [r3, #20]
 80a045a:	4798      	blx	r3
 80a045c:	b2c3      	uxtb	r3, r0
    *temp = -45.0+(double)(175.0*((uint16_t)((ts[0]<<8)|ts[1]))/0xFFFF);
 80a045e:	ea43 2006 	orr.w	r0, r3, r6, lsl #8
 80a0462:	b280      	uxth	r0, r0
    ts[1] = _wire->read();
 80a0464:	f88d 3001 	strb.w	r3, [sp, #1]
    *temp = -45.0+(double)(175.0*((uint16_t)((ts[0]<<8)|ts[1]))/0xFFFF);
 80a0468:	f002 fb8a 	bl	80a2b80 <__aeabi_i2d>
 80a046c:	a326      	add	r3, pc, #152	; (adr r3, 80a0508 <_ZN8Sht3xi2c14pr_get_readingEPdS0_+0xe0>)
 80a046e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0472:	f002 fbef 	bl	80a2c54 <__aeabi_dmul>
 80a0476:	a326      	add	r3, pc, #152	; (adr r3, 80a0510 <_ZN8Sht3xi2c14pr_get_readingEPdS0_+0xe8>)
 80a0478:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a047c:	f002 fd14 	bl	80a2ea8 <__aeabi_ddiv>
 80a0480:	2200      	movs	r2, #0
 80a0482:	4b25      	ldr	r3, [pc, #148]	; (80a0518 <_ZN8Sht3xi2c14pr_get_readingEPdS0_+0xf0>)
 80a0484:	f002 fa2e 	bl	80a28e4 <__aeabi_dsub>
 80a0488:	e9c7 0100 	strd	r0, r1, [r7]
    if (_wire->read() != crc8(ts, 2))
 80a048c:	6820      	ldr	r0, [r4, #0]
 80a048e:	6803      	ldr	r3, [r0, #0]
 80a0490:	695b      	ldr	r3, [r3, #20]
 80a0492:	4798      	blx	r3
 80a0494:	2102      	movs	r1, #2
 80a0496:	4606      	mov	r6, r0
 80a0498:	4668      	mov	r0, sp
 80a049a:	f7ff ff75 	bl	80a0388 <_Z4crc8Phj>
 80a049e:	4286      	cmp	r6, r0
 80a04a0:	d128      	bne.n	80a04f4 <_ZN8Sht3xi2c14pr_get_readingEPdS0_+0xcc>
    {
        return SHT31_CRC_ERROR;
    }
    rh[0] = _wire->read();
 80a04a2:	6820      	ldr	r0, [r4, #0]
 80a04a4:	6803      	ldr	r3, [r0, #0]
 80a04a6:	695b      	ldr	r3, [r3, #20]
 80a04a8:	4798      	blx	r3
 80a04aa:	4606      	mov	r6, r0
 80a04ac:	f88d 0004 	strb.w	r0, [sp, #4]
    rh[1] = _wire->read();
 80a04b0:	6820      	ldr	r0, [r4, #0]
 80a04b2:	6803      	ldr	r3, [r0, #0]
 80a04b4:	695b      	ldr	r3, [r3, #20]
 80a04b6:	4798      	blx	r3
 80a04b8:	b2c3      	uxtb	r3, r0
    *humid = 100.0*(double)(uint16_t)((rh[0]<<8)|rh[1])/(double)0xFFFF;
 80a04ba:	ea43 2006 	orr.w	r0, r3, r6, lsl #8
 80a04be:	b280      	uxth	r0, r0
    rh[1] = _wire->read();
 80a04c0:	f88d 3005 	strb.w	r3, [sp, #5]
    *humid = 100.0*(double)(uint16_t)((rh[0]<<8)|rh[1])/(double)0xFFFF;
 80a04c4:	f002 fb4c 	bl	80a2b60 <__aeabi_ui2d>
 80a04c8:	2200      	movs	r2, #0
 80a04ca:	4b14      	ldr	r3, [pc, #80]	; (80a051c <_ZN8Sht3xi2c14pr_get_readingEPdS0_+0xf4>)
 80a04cc:	f002 fbc2 	bl	80a2c54 <__aeabi_dmul>
 80a04d0:	a30f      	add	r3, pc, #60	; (adr r3, 80a0510 <_ZN8Sht3xi2c14pr_get_readingEPdS0_+0xe8>)
 80a04d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04d6:	f002 fce7 	bl	80a2ea8 <__aeabi_ddiv>
 80a04da:	e9c5 0100 	strd	r0, r1, [r5]
    if (_wire->read() != crc8(rh, 2))
 80a04de:	6820      	ldr	r0, [r4, #0]
 80a04e0:	6803      	ldr	r3, [r0, #0]
 80a04e2:	695b      	ldr	r3, [r3, #20]
 80a04e4:	4798      	blx	r3
 80a04e6:	2102      	movs	r1, #2
 80a04e8:	4604      	mov	r4, r0
 80a04ea:	a801      	add	r0, sp, #4
 80a04ec:	f7ff ff4c 	bl	80a0388 <_Z4crc8Phj>
 80a04f0:	4284      	cmp	r4, r0
 80a04f2:	d006      	beq.n	80a0502 <_ZN8Sht3xi2c14pr_get_readingEPdS0_+0xda>
    {
        return SHT31_CRC_ERROR;
 80a04f4:	f06f 0002 	mvn.w	r0, #2
    }
    return 0;
 80a04f8:	b003      	add	sp, #12
 80a04fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return SHT31_I2C_ERROR;
 80a04fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0500:	e7fa      	b.n	80a04f8 <_ZN8Sht3xi2c14pr_get_readingEPdS0_+0xd0>
    return 0;
 80a0502:	2000      	movs	r0, #0
 80a0504:	e7f8      	b.n	80a04f8 <_ZN8Sht3xi2c14pr_get_readingEPdS0_+0xd0>
 80a0506:	bf00      	nop
 80a0508:	00000000 	.word	0x00000000
 80a050c:	4065e000 	.word	0x4065e000
 80a0510:	00000000 	.word	0x00000000
 80a0514:	40efffe0 	.word	0x40efffe0
 80a0518:	40468000 	.word	0x40468000
 80a051c:	40590000 	.word	0x40590000

080a0520 <_ZN8Sht3xi2c11single_shotEPdS0_h>:
{
 80a0520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0522:	461d      	mov	r5, r3
    if (_state != SHT31_STATE_IDLE)
 80a0524:	7903      	ldrb	r3, [r0, #4]
{
 80a0526:	4604      	mov	r4, r0
 80a0528:	460e      	mov	r6, r1
 80a052a:	4617      	mov	r7, r2
    if (_state != SHT31_STATE_IDLE)
 80a052c:	b93b      	cbnz	r3, 80a053e <_ZN8Sht3xi2c11single_shotEPdS0_h+0x1e>
    if (!_wire->lock()) return SHT31_I2C_LOCK_ERROR;
 80a052e:	6820      	ldr	r0, [r4, #0]
 80a0530:	f000 fb14 	bl	80a0b5c <_ZN7TwoWire4lockEv>
 80a0534:	b950      	cbnz	r0, 80a054c <_ZN8Sht3xi2c11single_shotEPdS0_h+0x2c>
 80a0536:	f06f 0501 	mvn.w	r5, #1
}
 80a053a:	4628      	mov	r0, r5
 80a053c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stop_periodic()) return SHT31_I2C_ERROR;
 80a053e:	f7ff ff51 	bl	80a03e4 <_ZN8Sht3xi2c13stop_periodicEv>
 80a0542:	2800      	cmp	r0, #0
 80a0544:	d1f3      	bne.n	80a052e <_ZN8Sht3xi2c11single_shotEPdS0_h+0xe>
 80a0546:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a054a:	e7f6      	b.n	80a053a <_ZN8Sht3xi2c11single_shotEPdS0_h+0x1a>
    _wire->beginTransmission(_i2c_addr);
 80a054c:	7961      	ldrb	r1, [r4, #5]
 80a054e:	6820      	ldr	r0, [r4, #0]
 80a0550:	f000 faf0 	bl	80a0b34 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write(0x24);
 80a0554:	2124      	movs	r1, #36	; 0x24
 80a0556:	6820      	ldr	r0, [r4, #0]
 80a0558:	f7ff ff12 	bl	80a0380 <_ZN7TwoWire5writeEi>
    switch (accuracy)
 80a055c:	b13d      	cbz	r5, 80a056e <_ZN8Sht3xi2c11single_shotEPdS0_h+0x4e>
 80a055e:	2d02      	cmp	r5, #2
 80a0560:	d01b      	beq.n	80a059a <_ZN8Sht3xi2c11single_shotEPdS0_h+0x7a>
        _wire->write(0x0B);
 80a0562:	210b      	movs	r1, #11
 80a0564:	6820      	ldr	r0, [r4, #0]
 80a0566:	f7ff ff0b 	bl	80a0380 <_ZN7TwoWire5writeEi>
        time_delay = 15;
 80a056a:	250f      	movs	r5, #15
        break;
 80a056c:	e004      	b.n	80a0578 <_ZN8Sht3xi2c11single_shotEPdS0_h+0x58>
        _wire->write(0x00);
 80a056e:	4629      	mov	r1, r5
 80a0570:	6820      	ldr	r0, [r4, #0]
 80a0572:	f7ff ff05 	bl	80a0380 <_ZN7TwoWire5writeEi>
        time_delay = 25;
 80a0576:	2519      	movs	r5, #25
    if (_wire->endTransmission() != 0)
 80a0578:	6820      	ldr	r0, [r4, #0]
 80a057a:	f000 fae3 	bl	80a0b44 <_ZN7TwoWire15endTransmissionEv>
 80a057e:	b990      	cbnz	r0, 80a05a6 <_ZN8Sht3xi2c11single_shotEPdS0_h+0x86>
    delay(time_delay); // Add a delay because when there's a NACK, I2C bus is reset
 80a0580:	4628      	mov	r0, r5
 80a0582:	f000 fa39 	bl	80a09f8 <delay>
    ret_value = pr_get_reading(temp, humid);
 80a0586:	463a      	mov	r2, r7
 80a0588:	4631      	mov	r1, r6
 80a058a:	4620      	mov	r0, r4
 80a058c:	f7ff ff4c 	bl	80a0428 <_ZN8Sht3xi2c14pr_get_readingEPdS0_>
 80a0590:	4605      	mov	r5, r0
    _wire->unlock();
 80a0592:	6820      	ldr	r0, [r4, #0]
 80a0594:	f000 faeb 	bl	80a0b6e <_ZN7TwoWire6unlockEv>
    return ret_value;
 80a0598:	e7cf      	b.n	80a053a <_ZN8Sht3xi2c11single_shotEPdS0_h+0x1a>
        _wire->write(0x16);
 80a059a:	2116      	movs	r1, #22
 80a059c:	6820      	ldr	r0, [r4, #0]
 80a059e:	f7ff feef 	bl	80a0380 <_ZN7TwoWire5writeEi>
        time_delay = 10;
 80a05a2:	250a      	movs	r5, #10
        break;
 80a05a4:	e7e8      	b.n	80a0578 <_ZN8Sht3xi2c11single_shotEPdS0_h+0x58>
        ret_value = SHT31_I2C_ERROR;
 80a05a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a05aa:	e7f2      	b.n	80a0592 <_ZN8Sht3xi2c11single_shotEPdS0_h+0x72>

080a05ac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <os_mutex_recursive_create+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	080601d0 	.word	0x080601d0

080a05bc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <os_mutex_recursive_destroy+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	080601d0 	.word	0x080601d0

080a05cc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a05cc:	b508      	push	{r3, lr}
 80a05ce:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <os_mutex_recursive_lock+0xc>)
 80a05d0:	681b      	ldr	r3, [r3, #0]
 80a05d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a05d4:	9301      	str	r3, [sp, #4]
 80a05d6:	bd08      	pop	{r3, pc}
 80a05d8:	080601d0 	.word	0x080601d0

080a05dc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	4b02      	ldr	r3, [pc, #8]	; (80a05e8 <os_mutex_recursive_unlock+0xc>)
 80a05e0:	681b      	ldr	r3, [r3, #0]
 80a05e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a05e4:	9301      	str	r3, [sp, #4]
 80a05e6:	bd08      	pop	{r3, pc}
 80a05e8:	080601d0 	.word	0x080601d0

080a05ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a05ec:	b508      	push	{r3, lr}
 80a05ee:	4b02      	ldr	r3, [pc, #8]	; (80a05f8 <HAL_RNG_GetRandomNumber+0xc>)
 80a05f0:	681b      	ldr	r3, [r3, #0]
 80a05f2:	685b      	ldr	r3, [r3, #4]
 80a05f4:	9301      	str	r3, [sp, #4]
 80a05f6:	bd08      	pop	{r3, pc}
 80a05f8:	0806019c 	.word	0x0806019c

080a05fc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a05fc:	b508      	push	{r3, lr}
 80a05fe:	4b02      	ldr	r3, [pc, #8]	; (80a0608 <HAL_Delay_Microseconds+0xc>)
 80a0600:	681b      	ldr	r3, [r3, #0]
 80a0602:	68db      	ldr	r3, [r3, #12]
 80a0604:	9301      	str	r3, [sp, #4]
 80a0606:	bd08      	pop	{r3, pc}
 80a0608:	0806019c 	.word	0x0806019c

080a060c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	695b      	ldr	r3, [r3, #20]
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	0806019c 	.word	0x0806019c

080a061c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <hal_timer_millis+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	0806019c 	.word	0x0806019c

080a062c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b02      	ldr	r3, [pc, #8]	; (80a0638 <hal_i2c_set_speed+0xc>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0634:	9301      	str	r3, [sp, #4]
 80a0636:	bd08      	pop	{r3, pc}
 80a0638:	080601ac 	.word	0x080601ac

080a063c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a063c:	b508      	push	{r3, lr}
 80a063e:	4b02      	ldr	r3, [pc, #8]	; (80a0648 <hal_i2c_begin+0xc>)
 80a0640:	681b      	ldr	r3, [r3, #0]
 80a0642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0644:	9301      	str	r3, [sp, #4]
 80a0646:	bd08      	pop	{r3, pc}
 80a0648:	080601ac 	.word	0x080601ac

080a064c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a064c:	b508      	push	{r3, lr}
 80a064e:	4b02      	ldr	r3, [pc, #8]	; (80a0658 <hal_i2c_begin_transmission+0xc>)
 80a0650:	681b      	ldr	r3, [r3, #0]
 80a0652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0654:	9301      	str	r3, [sp, #4]
 80a0656:	bd08      	pop	{r3, pc}
 80a0658:	080601ac 	.word	0x080601ac

080a065c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a065c:	b508      	push	{r3, lr}
 80a065e:	4b02      	ldr	r3, [pc, #8]	; (80a0668 <hal_i2c_end_transmission+0xc>)
 80a0660:	681b      	ldr	r3, [r3, #0]
 80a0662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0664:	9301      	str	r3, [sp, #4]
 80a0666:	bd08      	pop	{r3, pc}
 80a0668:	080601ac 	.word	0x080601ac

080a066c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <hal_i2c_write+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	080601ac 	.word	0x080601ac

080a067c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <hal_i2c_available+0xc>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0684:	9301      	str	r3, [sp, #4]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	080601ac 	.word	0x080601ac

080a068c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b02      	ldr	r3, [pc, #8]	; (80a0698 <hal_i2c_read+0xc>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0694:	9301      	str	r3, [sp, #4]
 80a0696:	bd08      	pop	{r3, pc}
 80a0698:	080601ac 	.word	0x080601ac

080a069c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <hal_i2c_peek+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601ac 	.word	0x080601ac

080a06ac <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a06ac:	b508      	push	{r3, lr}
 80a06ae:	4b02      	ldr	r3, [pc, #8]	; (80a06b8 <hal_i2c_flush+0xc>)
 80a06b0:	681b      	ldr	r3, [r3, #0]
 80a06b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a06b4:	9301      	str	r3, [sp, #4]
 80a06b6:	bd08      	pop	{r3, pc}
 80a06b8:	080601ac 	.word	0x080601ac

080a06bc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a06bc:	b508      	push	{r3, lr}
 80a06be:	4b02      	ldr	r3, [pc, #8]	; (80a06c8 <hal_i2c_is_enabled+0xc>)
 80a06c0:	681b      	ldr	r3, [r3, #0]
 80a06c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a06c4:	9301      	str	r3, [sp, #4]
 80a06c6:	bd08      	pop	{r3, pc}
 80a06c8:	080601ac 	.word	0x080601ac

080a06cc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a06cc:	b508      	push	{r3, lr}
 80a06ce:	4b03      	ldr	r3, [pc, #12]	; (80a06dc <hal_i2c_init+0x10>)
 80a06d0:	681b      	ldr	r3, [r3, #0]
 80a06d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a06d6:	9301      	str	r3, [sp, #4]
 80a06d8:	bd08      	pop	{r3, pc}
 80a06da:	0000      	.short	0x0000
 80a06dc:	080601ac 	.word	0x080601ac

080a06e0 <hal_i2c_reset>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b03      	ldr	r3, [pc, #12]	; (80a06f0 <hal_i2c_reset+0x10>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80a06ea:	9301      	str	r3, [sp, #4]
 80a06ec:	bd08      	pop	{r3, pc}
 80a06ee:	0000      	.short	0x0000
 80a06f0:	080601ac 	.word	0x080601ac

080a06f4 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b03      	ldr	r3, [pc, #12]	; (80a0704 <hal_i2c_lock+0x10>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80a06fe:	9301      	str	r3, [sp, #4]
 80a0700:	bd08      	pop	{r3, pc}
 80a0702:	0000      	.short	0x0000
 80a0704:	080601ac 	.word	0x080601ac

080a0708 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 80a0708:	b508      	push	{r3, lr}
 80a070a:	4b03      	ldr	r3, [pc, #12]	; (80a0718 <hal_i2c_unlock+0x10>)
 80a070c:	681b      	ldr	r3, [r3, #0]
 80a070e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80a0712:	9301      	str	r3, [sp, #4]
 80a0714:	bd08      	pop	{r3, pc}
 80a0716:	0000      	.short	0x0000
 80a0718:	080601ac 	.word	0x080601ac

080a071c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a071c:	b508      	push	{r3, lr}
 80a071e:	4b03      	ldr	r3, [pc, #12]	; (80a072c <hal_i2c_request_ex+0x10>)
 80a0720:	681b      	ldr	r3, [r3, #0]
 80a0722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0726:	9301      	str	r3, [sp, #4]
 80a0728:	bd08      	pop	{r3, pc}
 80a072a:	0000      	.short	0x0000
 80a072c:	080601ac 	.word	0x080601ac

080a0730 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <hal_usart_init+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	699b      	ldr	r3, [r3, #24]
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601c4 	.word	0x080601c4

080a0740 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <hal_usart_end+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	6a1b      	ldr	r3, [r3, #32]
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601c4 	.word	0x080601c4

080a0750 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <hal_usart_write+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601c4 	.word	0x080601c4

080a0760 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <hal_usart_available+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601c4 	.word	0x080601c4

080a0770 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b02      	ldr	r3, [pc, #8]	; (80a077c <hal_usart_read+0xc>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0778:	9301      	str	r3, [sp, #4]
 80a077a:	bd08      	pop	{r3, pc}
 80a077c:	080601c4 	.word	0x080601c4

080a0780 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <hal_usart_peek+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601c4 	.word	0x080601c4

080a0790 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <hal_usart_flush+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601c4 	.word	0x080601c4

080a07a0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b02      	ldr	r3, [pc, #8]	; (80a07ac <hal_usart_available_data_for_write+0xc>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a07a8:	9301      	str	r3, [sp, #4]
 80a07aa:	bd08      	pop	{r3, pc}
 80a07ac:	080601c4 	.word	0x080601c4

080a07b0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <hal_usart_begin_config+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601c4 	.word	0x080601c4

080a07c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <HAL_USB_USART_Init+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	681b      	ldr	r3, [r3, #0]
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601d8 	.word	0x080601d8

080a07d0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	4b02      	ldr	r3, [pc, #8]	; (80a07dc <HAL_USB_USART_Begin+0xc>)
 80a07d4:	681b      	ldr	r3, [r3, #0]
 80a07d6:	685b      	ldr	r3, [r3, #4]
 80a07d8:	9301      	str	r3, [sp, #4]
 80a07da:	bd08      	pop	{r3, pc}
 80a07dc:	080601d8 	.word	0x080601d8

080a07e0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a07e0:	b508      	push	{r3, lr}
 80a07e2:	4b02      	ldr	r3, [pc, #8]	; (80a07ec <HAL_USB_USART_End+0xc>)
 80a07e4:	681b      	ldr	r3, [r3, #0]
 80a07e6:	689b      	ldr	r3, [r3, #8]
 80a07e8:	9301      	str	r3, [sp, #4]
 80a07ea:	bd08      	pop	{r3, pc}
 80a07ec:	080601d8 	.word	0x080601d8

080a07f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a07f0:	b508      	push	{r3, lr}
 80a07f2:	4b02      	ldr	r3, [pc, #8]	; (80a07fc <HAL_USB_USART_Available_Data+0xc>)
 80a07f4:	681b      	ldr	r3, [r3, #0]
 80a07f6:	691b      	ldr	r3, [r3, #16]
 80a07f8:	9301      	str	r3, [sp, #4]
 80a07fa:	bd08      	pop	{r3, pc}
 80a07fc:	080601d8 	.word	0x080601d8

080a0800 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0800:	b508      	push	{r3, lr}
 80a0802:	4b02      	ldr	r3, [pc, #8]	; (80a080c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0804:	681b      	ldr	r3, [r3, #0]
 80a0806:	695b      	ldr	r3, [r3, #20]
 80a0808:	9301      	str	r3, [sp, #4]
 80a080a:	bd08      	pop	{r3, pc}
 80a080c:	080601d8 	.word	0x080601d8

080a0810 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0810:	b508      	push	{r3, lr}
 80a0812:	4b02      	ldr	r3, [pc, #8]	; (80a081c <HAL_USB_USART_Receive_Data+0xc>)
 80a0814:	681b      	ldr	r3, [r3, #0]
 80a0816:	699b      	ldr	r3, [r3, #24]
 80a0818:	9301      	str	r3, [sp, #4]
 80a081a:	bd08      	pop	{r3, pc}
 80a081c:	080601d8 	.word	0x080601d8

080a0820 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0820:	b508      	push	{r3, lr}
 80a0822:	4b02      	ldr	r3, [pc, #8]	; (80a082c <HAL_USB_USART_Send_Data+0xc>)
 80a0824:	681b      	ldr	r3, [r3, #0]
 80a0826:	69db      	ldr	r3, [r3, #28]
 80a0828:	9301      	str	r3, [sp, #4]
 80a082a:	bd08      	pop	{r3, pc}
 80a082c:	080601d8 	.word	0x080601d8

080a0830 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0830:	b508      	push	{r3, lr}
 80a0832:	4b02      	ldr	r3, [pc, #8]	; (80a083c <HAL_USB_USART_Flush_Data+0xc>)
 80a0834:	681b      	ldr	r3, [r3, #0]
 80a0836:	6a1b      	ldr	r3, [r3, #32]
 80a0838:	9301      	str	r3, [sp, #4]
 80a083a:	bd08      	pop	{r3, pc}
 80a083c:	080601d8 	.word	0x080601d8

080a0840 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0840:	b508      	push	{r3, lr}
 80a0842:	4b02      	ldr	r3, [pc, #8]	; (80a084c <inet_gethostbyname+0xc>)
 80a0844:	681b      	ldr	r3, [r3, #0]
 80a0846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0848:	9301      	str	r3, [sp, #4]
 80a084a:	bd08      	pop	{r3, pc}
 80a084c:	080601c0 	.word	0x080601c0

080a0850 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0850:	b508      	push	{r3, lr}
 80a0852:	4b02      	ldr	r3, [pc, #8]	; (80a085c <panic_+0xc>)
 80a0854:	681b      	ldr	r3, [r3, #0]
 80a0856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0858:	9301      	str	r3, [sp, #4]
 80a085a:	bd08      	pop	{r3, pc}
 80a085c:	080201a8 	.word	0x080201a8

080a0860 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a0860:	b508      	push	{r3, lr}
 80a0862:	4b02      	ldr	r3, [pc, #8]	; (80a086c <log_message_v+0xc>)
 80a0864:	681b      	ldr	r3, [r3, #0]
 80a0866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0868:	9301      	str	r3, [sp, #4]
 80a086a:	bd08      	pop	{r3, pc}
 80a086c:	080201a8 	.word	0x080201a8

080a0870 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a0870:	b508      	push	{r3, lr}
 80a0872:	4b02      	ldr	r3, [pc, #8]	; (80a087c <log_level_name+0xc>)
 80a0874:	681b      	ldr	r3, [r3, #0]
 80a0876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0878:	9301      	str	r3, [sp, #4]
 80a087a:	bd08      	pop	{r3, pc}
 80a087c:	080201a8 	.word	0x080201a8

080a0880 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a0880:	b508      	push	{r3, lr}
 80a0882:	4b02      	ldr	r3, [pc, #8]	; (80a088c <log_set_callbacks+0xc>)
 80a0884:	681b      	ldr	r3, [r3, #0]
 80a0886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0888:	9301      	str	r3, [sp, #4]
 80a088a:	bd08      	pop	{r3, pc}
 80a088c:	080201a8 	.word	0x080201a8

080a0890 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0890:	b508      	push	{r3, lr}
 80a0892:	4b02      	ldr	r3, [pc, #8]	; (80a089c <set_system_mode+0xc>)
 80a0894:	681b      	ldr	r3, [r3, #0]
 80a0896:	685b      	ldr	r3, [r3, #4]
 80a0898:	9301      	str	r3, [sp, #4]
 80a089a:	bd08      	pop	{r3, pc}
 80a089c:	080601a4 	.word	0x080601a4

080a08a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a08a0:	b508      	push	{r3, lr}
 80a08a2:	4b02      	ldr	r3, [pc, #8]	; (80a08ac <system_delay_ms+0xc>)
 80a08a4:	681b      	ldr	r3, [r3, #0]
 80a08a6:	695b      	ldr	r3, [r3, #20]
 80a08a8:	9301      	str	r3, [sp, #4]
 80a08aa:	bd08      	pop	{r3, pc}
 80a08ac:	080601a4 	.word	0x080601a4

080a08b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a08b0:	b508      	push	{r3, lr}
 80a08b2:	4b03      	ldr	r3, [pc, #12]	; (80a08c0 <system_ctrl_set_app_request_handler+0x10>)
 80a08b4:	681b      	ldr	r3, [r3, #0]
 80a08b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a08ba:	9301      	str	r3, [sp, #4]
 80a08bc:	bd08      	pop	{r3, pc}
 80a08be:	0000      	.short	0x0000
 80a08c0:	080601a4 	.word	0x080601a4

080a08c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a08c4:	b508      	push	{r3, lr}
 80a08c6:	4b03      	ldr	r3, [pc, #12]	; (80a08d4 <system_ctrl_set_result+0x10>)
 80a08c8:	681b      	ldr	r3, [r3, #0]
 80a08ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a08ce:	9301      	str	r3, [sp, #4]
 80a08d0:	bd08      	pop	{r3, pc}
 80a08d2:	0000      	.short	0x0000
 80a08d4:	080601a4 	.word	0x080601a4

080a08d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601cc 	.word	0x080601cc

080a08e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <network_connect+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	685b      	ldr	r3, [r3, #4]
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601c8 	.word	0x080601c8

080a08f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <network_connecting+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	689b      	ldr	r3, [r3, #8]
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601c8 	.word	0x080601c8

080a0908 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <network_disconnect+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	68db      	ldr	r3, [r3, #12]
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601c8 	.word	0x080601c8

080a0918 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <network_ready+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	691b      	ldr	r3, [r3, #16]
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601c8 	.word	0x080601c8

080a0928 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0928:	b508      	push	{r3, lr}
 80a092a:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <network_on+0xc>)
 80a092c:	681b      	ldr	r3, [r3, #0]
 80a092e:	695b      	ldr	r3, [r3, #20]
 80a0930:	9301      	str	r3, [sp, #4]
 80a0932:	bd08      	pop	{r3, pc}
 80a0934:	080601c8 	.word	0x080601c8

080a0938 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0938:	b508      	push	{r3, lr}
 80a093a:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <network_off+0xc>)
 80a093c:	681b      	ldr	r3, [r3, #0]
 80a093e:	699b      	ldr	r3, [r3, #24]
 80a0940:	9301      	str	r3, [sp, #4]
 80a0942:	bd08      	pop	{r3, pc}
 80a0944:	080601c8 	.word	0x080601c8

080a0948 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0948:	b508      	push	{r3, lr}
 80a094a:	4b02      	ldr	r3, [pc, #8]	; (80a0954 <network_listen+0xc>)
 80a094c:	681b      	ldr	r3, [r3, #0]
 80a094e:	69db      	ldr	r3, [r3, #28]
 80a0950:	9301      	str	r3, [sp, #4]
 80a0952:	bd08      	pop	{r3, pc}
 80a0954:	080601c8 	.word	0x080601c8

080a0958 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b02      	ldr	r3, [pc, #8]	; (80a0964 <network_listening+0xc>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	6a1b      	ldr	r3, [r3, #32]
 80a0960:	9301      	str	r3, [sp, #4]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	080601c8 	.word	0x080601c8

080a0968 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0968:	b508      	push	{r3, lr}
 80a096a:	4b02      	ldr	r3, [pc, #8]	; (80a0974 <network_set_listen_timeout+0xc>)
 80a096c:	681b      	ldr	r3, [r3, #0]
 80a096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0970:	9301      	str	r3, [sp, #4]
 80a0972:	bd08      	pop	{r3, pc}
 80a0974:	080601c8 	.word	0x080601c8

080a0978 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0978:	b508      	push	{r3, lr}
 80a097a:	4b02      	ldr	r3, [pc, #8]	; (80a0984 <network_get_listen_timeout+0xc>)
 80a097c:	681b      	ldr	r3, [r3, #0]
 80a097e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0980:	9301      	str	r3, [sp, #4]
 80a0982:	bd08      	pop	{r3, pc}
 80a0984:	080601c8 	.word	0x080601c8

080a0988 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0988:	b508      	push	{r3, lr}
 80a098a:	4b02      	ldr	r3, [pc, #8]	; (80a0994 <network_is_on+0xc>)
 80a098c:	681b      	ldr	r3, [r3, #0]
 80a098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0990:	9301      	str	r3, [sp, #4]
 80a0992:	bd08      	pop	{r3, pc}
 80a0994:	080601c8 	.word	0x080601c8

080a0998 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0998:	b508      	push	{r3, lr}
 80a099a:	4b02      	ldr	r3, [pc, #8]	; (80a09a4 <network_is_off+0xc>)
 80a099c:	681b      	ldr	r3, [r3, #0]
 80a099e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a09a0:	9301      	str	r3, [sp, #4]
 80a09a2:	bd08      	pop	{r3, pc}
 80a09a4:	080601c8 	.word	0x080601c8

080a09a8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a09a8:	b508      	push	{r3, lr}
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <malloc+0xc>)
 80a09ac:	681b      	ldr	r3, [r3, #0]
 80a09ae:	681b      	ldr	r3, [r3, #0]
 80a09b0:	9301      	str	r3, [sp, #4]
 80a09b2:	bd08      	pop	{r3, pc}
 80a09b4:	080601a0 	.word	0x080601a0

080a09b8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <free+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	685b      	ldr	r3, [r3, #4]
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	080601a0 	.word	0x080601a0

080a09c8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <realloc+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	689b      	ldr	r3, [r3, #8]
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	080601a0 	.word	0x080601a0

080a09d8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <vsnprintf+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	080601a0 	.word	0x080601a0

080a09e8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b02      	ldr	r3, [pc, #8]	; (80a09f4 <newlib_impure_ptr_callback+0xc>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a09f0:	9301      	str	r3, [sp, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	080601a0 	.word	0x080601a0

080a09f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a09f8:	2100      	movs	r1, #0
 80a09fa:	f7ff bf51 	b.w	80a08a0 <system_delay_ms>

080a09fe <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a09fe:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0a00:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0a02:	4604      	mov	r4, r0
      if (_M_manager)
 80a0a04:	b113      	cbz	r3, 80a0a0c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0a06:	2203      	movs	r2, #3
 80a0a08:	4601      	mov	r1, r0
 80a0a0a:	4798      	blx	r3
    }
 80a0a0c:	4620      	mov	r0, r4
 80a0a0e:	bd10      	pop	{r4, pc}

080a0a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0a10:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0a12:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0a14:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0a16:	b17c      	cbz	r4, 80a0a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0a18:	6863      	ldr	r3, [r4, #4]
 80a0a1a:	3b01      	subs	r3, #1
 80a0a1c:	6063      	str	r3, [r4, #4]
 80a0a1e:	b95b      	cbnz	r3, 80a0a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0a20:	6823      	ldr	r3, [r4, #0]
 80a0a22:	4620      	mov	r0, r4
 80a0a24:	689b      	ldr	r3, [r3, #8]
 80a0a26:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0a28:	68a3      	ldr	r3, [r4, #8]
 80a0a2a:	3b01      	subs	r3, #1
 80a0a2c:	60a3      	str	r3, [r4, #8]
 80a0a2e:	b91b      	cbnz	r3, 80a0a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0a30:	6823      	ldr	r3, [r4, #0]
 80a0a32:	4620      	mov	r0, r4
 80a0a34:	68db      	ldr	r3, [r3, #12]
 80a0a36:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0a38:	4628      	mov	r0, r5
 80a0a3a:	bd38      	pop	{r3, r4, r5, pc}

080a0a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0a3c:	680b      	ldr	r3, [r1, #0]
 80a0a3e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0a40:	b113      	cbz	r3, 80a0a48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a0a42:	685a      	ldr	r2, [r3, #4]
 80a0a44:	3201      	adds	r2, #1
 80a0a46:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a0a48:	4770      	bx	lr

080a0a4a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0a4a:	4770      	bx	lr

080a0a4c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a4e:	4606      	mov	r6, r0
 80a0a50:	4615      	mov	r5, r2
 80a0a52:	460c      	mov	r4, r1
 80a0a54:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0a56:	42bc      	cmp	r4, r7
 80a0a58:	d006      	beq.n	80a0a68 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0a5a:	6833      	ldr	r3, [r6, #0]
 80a0a5c:	4630      	mov	r0, r6
 80a0a5e:	689b      	ldr	r3, [r3, #8]
 80a0a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0a64:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0a66:	e7f6      	b.n	80a0a56 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0a68:	4628      	mov	r0, r5
 80a0a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a6c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0a6c:	2200      	movs	r2, #0
 80a0a6e:	7c00      	ldrb	r0, [r0, #16]
 80a0a70:	f7ff bdfc 	b.w	80a066c <hal_i2c_write>

080a0a74 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0a74:	2100      	movs	r1, #0
 80a0a76:	7c00      	ldrb	r0, [r0, #16]
 80a0a78:	f7ff be00 	b.w	80a067c <hal_i2c_available>

080a0a7c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0a7c:	2100      	movs	r1, #0
 80a0a7e:	7c00      	ldrb	r0, [r0, #16]
 80a0a80:	f7ff be04 	b.w	80a068c <hal_i2c_read>

080a0a84 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0a84:	2100      	movs	r1, #0
 80a0a86:	7c00      	ldrb	r0, [r0, #16]
 80a0a88:	f7ff be08 	b.w	80a069c <hal_i2c_peek>

080a0a8c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0a8c:	2100      	movs	r1, #0
 80a0a8e:	7c00      	ldrb	r0, [r0, #16]
 80a0a90:	f7ff be0c 	b.w	80a06ac <hal_i2c_flush>

080a0a94 <_ZN7TwoWireD0Ev>:
 80a0a94:	b510      	push	{r4, lr}
 80a0a96:	4604      	mov	r4, r0
 80a0a98:	2114      	movs	r1, #20
 80a0a9a:	f001 ff18 	bl	80a28ce <_ZdlPvj>
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	bd10      	pop	{r4, pc}
	...

080a0aa4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0aa4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0aaa:	4604      	mov	r4, r0
 80a0aac:	4608      	mov	r0, r1
 80a0aae:	2100      	movs	r1, #0
 80a0ab0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0ab4:	4b03      	ldr	r3, [pc, #12]	; (80a0ac4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0ab6:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0ab8:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0aba:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0abc:	f7ff fe06 	bl	80a06cc <hal_i2c_init>
}
 80a0ac0:	4620      	mov	r0, r4
 80a0ac2:	bd10      	pop	{r4, pc}
 80a0ac4:	080a365c 	.word	0x080a365c

080a0ac8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a0ac8:	2200      	movs	r2, #0
 80a0aca:	7c00      	ldrb	r0, [r0, #16]
 80a0acc:	f7ff bdae 	b.w	80a062c <hal_i2c_set_speed>

080a0ad0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a0ad0:	2300      	movs	r3, #0
 80a0ad2:	7c00      	ldrb	r0, [r0, #16]
 80a0ad4:	461a      	mov	r2, r3
 80a0ad6:	4619      	mov	r1, r3
 80a0ad8:	f7ff bdb0 	b.w	80a063c <hal_i2c_begin>

080a0adc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a0adc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a0ade:	2200      	movs	r2, #0
 80a0ae0:	2314      	movs	r3, #20
 80a0ae2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a0ae6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a0aea:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a0aec:	7c00      	ldrb	r0, [r0, #16]
 80a0aee:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0af2:	684b      	ldr	r3, [r1, #4]
 80a0af4:	9303      	str	r3, [sp, #12]
 80a0af6:	68cb      	ldr	r3, [r1, #12]
 80a0af8:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a0afa:	7a0b      	ldrb	r3, [r1, #8]
 80a0afc:	a901      	add	r1, sp, #4
 80a0afe:	9305      	str	r3, [sp, #20]
 80a0b00:	f7ff fe0c 	bl	80a071c <hal_i2c_request_ex>
}
 80a0b04:	b007      	add	sp, #28
 80a0b06:	f85d fb04 	ldr.w	pc, [sp], #4

080a0b0a <_ZN7TwoWire11requestFromEhjh>:
{
 80a0b0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a0b0c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a0b0e:	f88d 1000 	strb.w	r1, [sp]
 80a0b12:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a0b16:	bf18      	it	ne
 80a0b18:	2301      	movne	r3, #1
 80a0b1a:	9103      	str	r1, [sp, #12]
 80a0b1c:	4669      	mov	r1, sp
    size_ = size;
 80a0b1e:	9201      	str	r2, [sp, #4]
 80a0b20:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0b24:	f7ff ffda 	bl	80a0adc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a0b28:	b005      	add	sp, #20
 80a0b2a:	f85d fb04 	ldr.w	pc, [sp], #4

080a0b2e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a0b2e:	2301      	movs	r3, #1
 80a0b30:	f7ff bfeb 	b.w	80a0b0a <_ZN7TwoWire11requestFromEhjh>

080a0b34 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a0b34:	2200      	movs	r2, #0
 80a0b36:	7c00      	ldrb	r0, [r0, #16]
 80a0b38:	f7ff bd88 	b.w	80a064c <hal_i2c_begin_transmission>

080a0b3c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a0b3c:	2200      	movs	r2, #0
 80a0b3e:	7c00      	ldrb	r0, [r0, #16]
 80a0b40:	f7ff bd8c 	b.w	80a065c <hal_i2c_end_transmission>

080a0b44 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a0b44:	2101      	movs	r1, #1
 80a0b46:	f7ff bff9 	b.w	80a0b3c <_ZN7TwoWire15endTransmissionEh>

080a0b4a <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 80a0b4a:	2100      	movs	r1, #0
 80a0b4c:	7c00      	ldrb	r0, [r0, #16]
 80a0b4e:	f7ff bdb5 	b.w	80a06bc <hal_i2c_is_enabled>

080a0b52 <_ZN7TwoWire5resetEv>:
}

void TwoWire::reset()
{
  hal_i2c_reset(_i2c, 0, NULL);
 80a0b52:	2200      	movs	r2, #0
 80a0b54:	7c00      	ldrb	r0, [r0, #16]
 80a0b56:	4611      	mov	r1, r2
 80a0b58:	f7ff bdc2 	b.w	80a06e0 <hal_i2c_reset>

080a0b5c <_ZN7TwoWire4lockEv>:
}

bool TwoWire::lock()
{
 80a0b5c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 80a0b5e:	2100      	movs	r1, #0
 80a0b60:	7c00      	ldrb	r0, [r0, #16]
 80a0b62:	f7ff fdc7 	bl	80a06f4 <hal_i2c_lock>
}
 80a0b66:	fab0 f080 	clz	r0, r0
 80a0b6a:	0940      	lsrs	r0, r0, #5
 80a0b6c:	bd08      	pop	{r3, pc}

080a0b6e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80a0b6e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 80a0b70:	2100      	movs	r1, #0
 80a0b72:	7c00      	ldrb	r0, [r0, #16]
 80a0b74:	f7ff fdc8 	bl	80a0708 <hal_i2c_unlock>
}
 80a0b78:	fab0 f080 	clz	r0, r0
 80a0b7c:	0940      	lsrs	r0, r0, #5
 80a0b7e:	bd08      	pop	{r3, pc}

080a0b80 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0b80:	4770      	bx	lr

080a0b82 <_ZN9IPAddressD0Ev>:
 80a0b82:	b510      	push	{r4, lr}
 80a0b84:	4604      	mov	r4, r0
 80a0b86:	2118      	movs	r1, #24
 80a0b88:	f001 fea1 	bl	80a28ce <_ZdlPvj>
 80a0b8c:	4620      	mov	r0, r4
 80a0b8e:	bd10      	pop	{r4, pc}

080a0b90 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b92:	460e      	mov	r6, r1
 80a0b94:	2400      	movs	r4, #0
 80a0b96:	f100 0708 	add.w	r7, r0, #8
 80a0b9a:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0b9c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0ba0:	220a      	movs	r2, #10
 80a0ba2:	4630      	mov	r0, r6
 80a0ba4:	f001 fab1 	bl	80a210a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0ba8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0baa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0bac:	d101      	bne.n	80a0bb2 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0bae:	4620      	mov	r0, r4
 80a0bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0bb2:	2c00      	cmp	r4, #0
 80a0bb4:	d0f2      	beq.n	80a0b9c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0bb6:	212e      	movs	r1, #46	; 0x2e
 80a0bb8:	4630      	mov	r0, r6
 80a0bba:	f001 fa97 	bl	80a20ec <_ZN5Print5printEc>
 80a0bbe:	4404      	add	r4, r0
 80a0bc0:	e7ec      	b.n	80a0b9c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0bc4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0bc4:	b510      	push	{r4, lr}
 80a0bc6:	4604      	mov	r4, r0
 80a0bc8:	4b04      	ldr	r3, [pc, #16]	; (80a0bdc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0bca:	2211      	movs	r2, #17
 80a0bcc:	2100      	movs	r1, #0
 80a0bce:	f840 3b04 	str.w	r3, [r0], #4
 80a0bd2:	f002 fc03 	bl	80a33dc <memset>
}
 80a0bd6:	4620      	mov	r0, r4
 80a0bd8:	bd10      	pop	{r4, pc}
 80a0bda:	bf00      	nop
 80a0bdc:	080a3684 	.word	0x080a3684

080a0be0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0be0:	4603      	mov	r3, r0
 80a0be2:	4a07      	ldr	r2, [pc, #28]	; (80a0c00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0be4:	b510      	push	{r4, lr}
 80a0be6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0bea:	f101 0210 	add.w	r2, r1, #16
 80a0bee:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0bf2:	4291      	cmp	r1, r2
 80a0bf4:	f843 4b04 	str.w	r4, [r3], #4
 80a0bf8:	d1f9      	bne.n	80a0bee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0bfa:	780a      	ldrb	r2, [r1, #0]
 80a0bfc:	701a      	strb	r2, [r3, #0]
}
 80a0bfe:	bd10      	pop	{r4, pc}
 80a0c00:	080a3684 	.word	0x080a3684

080a0c04 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0c04:	4a02      	ldr	r2, [pc, #8]	; (80a0c10 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0c06:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0c0a:	2204      	movs	r2, #4
 80a0c0c:	7502      	strb	r2, [r0, #20]
}
 80a0c0e:	4770      	bx	lr
 80a0c10:	080a3684 	.word	0x080a3684

080a0c14 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0c14:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0c16:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0c1a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0c1e:	2304      	movs	r3, #4
 80a0c20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0c24:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0c28:	6044      	str	r4, [r0, #4]
 80a0c2a:	7503      	strb	r3, [r0, #20]
}
 80a0c2c:	bd10      	pop	{r4, pc}
	...

080a0c30 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0c32:	4d04      	ldr	r5, [pc, #16]	; (80a0c44 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0c34:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0c36:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0c3a:	9500      	str	r5, [sp, #0]
 80a0c3c:	f7ff ffea 	bl	80a0c14 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0c40:	b003      	add	sp, #12
 80a0c42:	bd30      	pop	{r4, r5, pc}
 80a0c44:	080a3684 	.word	0x080a3684

080a0c48 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 80a0c48:	2201      	movs	r2, #1
 80a0c4a:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 80a0c4e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a0c52:	4618      	mov	r0, r3
 80a0c54:	2901      	cmp	r1, #1
 80a0c56:	d108      	bne.n	80a0c6a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 80a0c58:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80a0c5c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 80a0c60:	3a01      	subs	r2, #1
 80a0c62:	f103 0310 	add.w	r3, r3, #16
 80a0c66:	d1f2      	bne.n	80a0c4e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 80a0c68:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 80a0c6a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a0c6c:	bf04      	itt	eq
 80a0c6e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 80a0c72:	1852      	addeq	r2, r2, r1
 80a0c74:	e7f4      	b.n	80a0c60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

080a0c76 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a0c76:	b40e      	push	{r1, r2, r3}
 80a0c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c7c:	b087      	sub	sp, #28
 80a0c7e:	af00      	add	r7, sp, #0
 80a0c80:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80a0c84:	f855 8b04 	ldr.w	r8, [r5], #4
 80a0c88:	4604      	mov	r4, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a0c8a:	462b      	mov	r3, r5
 80a0c8c:	4642      	mov	r2, r8
 80a0c8e:	2110      	movs	r1, #16
 80a0c90:	f107 0008 	add.w	r0, r7, #8
    va_start(args, fmt);
 80a0c94:	607d      	str	r5, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a0c96:	f7ff fe9f 	bl	80a09d8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a0c9a:	280f      	cmp	r0, #15
 80a0c9c:	d91b      	bls.n	80a0cd6 <_ZN5spark10JSONWriter6printfEPKcz+0x60>
        char buf[n + 1]; // Use larger buffer
 80a0c9e:	f100 0308 	add.w	r3, r0, #8
 80a0ca2:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a0ca6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 80a0ca8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a0cac:	4642      	mov	r2, r8
 80a0cae:	1c41      	adds	r1, r0, #1
 80a0cb0:	462b      	mov	r3, r5
 80a0cb2:	4668      	mov	r0, sp
        va_start(args, fmt);
 80a0cb4:	607d      	str	r5, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a0cb6:	f7ff fe8f 	bl	80a09d8 <vsnprintf>
        if (n > 0) {
 80a0cba:	1e02      	subs	r2, r0, #0
 80a0cbc:	dd04      	ble.n	80a0cc8 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a0cbe:	6823      	ldr	r3, [r4, #0]
 80a0cc0:	4669      	mov	r1, sp
 80a0cc2:	4620      	mov	r0, r4
 80a0cc4:	689b      	ldr	r3, [r3, #8]
 80a0cc6:	4798      	blx	r3
 80a0cc8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 80a0cca:	371c      	adds	r7, #28
 80a0ccc:	46bd      	mov	sp, r7
 80a0cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a0cd2:	b003      	add	sp, #12
 80a0cd4:	4770      	bx	lr
    } else if (n > 0) {
 80a0cd6:	2800      	cmp	r0, #0
 80a0cd8:	d0f7      	beq.n	80a0cca <_ZN5spark10JSONWriter6printfEPKcz+0x54>
        write(buf, n);
 80a0cda:	6823      	ldr	r3, [r4, #0]
 80a0cdc:	4602      	mov	r2, r0
 80a0cde:	689b      	ldr	r3, [r3, #8]
 80a0ce0:	4620      	mov	r0, r4
 80a0ce2:	f107 0108 	add.w	r1, r7, #8
 80a0ce6:	4798      	blx	r3
}
 80a0ce8:	e7ef      	b.n	80a0cca <_ZN5spark10JSONWriter6printfEPKcz+0x54>

080a0cea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a0cea:	b510      	push	{r4, lr}
 80a0cec:	4604      	mov	r4, r0
          _M_dispose();
 80a0cee:	6803      	ldr	r3, [r0, #0]
 80a0cf0:	689b      	ldr	r3, [r3, #8]
 80a0cf2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0cf4:	68a3      	ldr	r3, [r4, #8]
 80a0cf6:	3b01      	subs	r3, #1
 80a0cf8:	60a3      	str	r3, [r4, #8]
 80a0cfa:	b92b      	cbnz	r3, 80a0d08 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
 80a0cfc:	6823      	ldr	r3, [r4, #0]
 80a0cfe:	4620      	mov	r0, r4
    }
 80a0d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 80a0d04:	68db      	ldr	r3, [r3, #12]
 80a0d06:	4718      	bx	r3
    }
 80a0d08:	bd10      	pop	{r4, pc}

080a0d0a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a0d0a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a0d0c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 80a0d0e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a0d12:	2201      	movs	r2, #1
 80a0d14:	689b      	ldr	r3, [r3, #8]
 80a0d16:	f10d 0107 	add.w	r1, sp, #7
 80a0d1a:	4798      	blx	r3
}
 80a0d1c:	b003      	add	sp, #12
 80a0d1e:	f85d fb04 	ldr.w	pc, [sp], #4

080a0d22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a0d22:	b538      	push	{r3, r4, r5, lr}
 80a0d24:	680b      	ldr	r3, [r1, #0]
 80a0d26:	4604      	mov	r4, r0
 80a0d28:	6003      	str	r3, [r0, #0]
 80a0d2a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 80a0d2c:	6843      	ldr	r3, [r0, #4]
 80a0d2e:	429d      	cmp	r5, r3
 80a0d30:	d00c      	beq.n	80a0d4c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
 80a0d32:	b115      	cbz	r5, 80a0d3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
 80a0d34:	686b      	ldr	r3, [r5, #4]
 80a0d36:	3301      	adds	r3, #1
 80a0d38:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 80a0d3a:	6860      	ldr	r0, [r4, #4]
 80a0d3c:	b128      	cbz	r0, 80a0d4a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
 80a0d3e:	6843      	ldr	r3, [r0, #4]
 80a0d40:	3b01      	subs	r3, #1
 80a0d42:	6043      	str	r3, [r0, #4]
 80a0d44:	b90b      	cbnz	r3, 80a0d4a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
 80a0d46:	f7ff ffd0 	bl	80a0cea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
 80a0d4a:	6065      	str	r5, [r4, #4]
    class __shared_ptr
 80a0d4c:	4620      	mov	r0, r4
 80a0d4e:	bd38      	pop	{r3, r4, r5, pc}

080a0d50 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a0d50:	460b      	mov	r3, r1
 80a0d52:	4611      	mov	r1, r2
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a0d54:	2200      	movs	r2, #0
 80a0d56:	b510      	push	{r4, lr}
 80a0d58:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a0d5a:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 80a0d5e:	6083      	str	r3, [r0, #8]
    if (t) {
 80a0d60:	b90b      	cbnz	r3, 80a0d66 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 80a0d62:	4620      	mov	r0, r4
 80a0d64:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80a0d66:	f7ff ffdc 	bl	80a0d22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
 80a0d6a:	e7fa      	b.n	80a0d62 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

080a0d6c <_ZNK5spark9JSONValue4typeEv>:
spark::JSONType spark::JSONValue::type() const {
 80a0d6c:	4603      	mov	r3, r0
    if (!t_) {
 80a0d6e:	6880      	ldr	r0, [r0, #8]
 80a0d70:	b320      	cbz	r0, 80a0dbc <_ZNK5spark9JSONValue4typeEv+0x50>
    switch (t_->type) {
 80a0d72:	7802      	ldrb	r2, [r0, #0]
 80a0d74:	2a03      	cmp	r2, #3
 80a0d76:	d81a      	bhi.n	80a0dae <_ZNK5spark9JSONValue4typeEv+0x42>
 80a0d78:	e8df f002 	tbb	[pc, r2]
 80a0d7c:	1b021704 	.word	0x1b021704
 80a0d80:	2005      	movs	r0, #5
 80a0d82:	4770      	bx	lr
        const char c = d_->json[t_->start];
 80a0d84:	681b      	ldr	r3, [r3, #0]
 80a0d86:	685a      	ldr	r2, [r3, #4]
 80a0d88:	6843      	ldr	r3, [r0, #4]
 80a0d8a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a0d8c:	282d      	cmp	r0, #45	; 0x2d
 80a0d8e:	d012      	beq.n	80a0db6 <_ZNK5spark9JSONValue4typeEv+0x4a>
 80a0d90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a0d94:	2b09      	cmp	r3, #9
 80a0d96:	d90e      	bls.n	80a0db6 <_ZNK5spark9JSONValue4typeEv+0x4a>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a0d98:	2874      	cmp	r0, #116	; 0x74
 80a0d9a:	d00e      	beq.n	80a0dba <_ZNK5spark9JSONValue4typeEv+0x4e>
 80a0d9c:	2866      	cmp	r0, #102	; 0x66
 80a0d9e:	d00c      	beq.n	80a0dba <_ZNK5spark9JSONValue4typeEv+0x4e>
        return JSON_TYPE_INVALID;
 80a0da0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a0da4:	4258      	negs	r0, r3
 80a0da6:	4158      	adcs	r0, r3
 80a0da8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 80a0daa:	2006      	movs	r0, #6
 80a0dac:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 80a0dae:	2000      	movs	r0, #0
 80a0db0:	4770      	bx	lr
        return JSON_TYPE_STRING;
 80a0db2:	2004      	movs	r0, #4
 80a0db4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 80a0db6:	2003      	movs	r0, #3
 80a0db8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 80a0dba:	2002      	movs	r0, #2
}
 80a0dbc:	4770      	bx	lr

080a0dbe <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 80a0dbe:	b510      	push	{r4, lr}
 80a0dc0:	4604      	mov	r4, r0
    switch (type()) {
 80a0dc2:	f7ff ffd3 	bl	80a0d6c <_ZNK5spark9JSONValue4typeEv>
 80a0dc6:	2802      	cmp	r0, #2
 80a0dc8:	d00e      	beq.n	80a0de8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 80a0dca:	1ec3      	subs	r3, r0, #3
 80a0dcc:	b2db      	uxtb	r3, r3
 80a0dce:	2b01      	cmp	r3, #1
 80a0dd0:	d814      	bhi.n	80a0dfc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 80a0dd2:	6822      	ldr	r2, [r4, #0]
 80a0dd4:	68a3      	ldr	r3, [r4, #8]
 80a0dd6:	6850      	ldr	r0, [r2, #4]
 80a0dd8:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 80a0dda:	220a      	movs	r2, #10
}
 80a0ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 80a0de0:	2100      	movs	r1, #0
 80a0de2:	4418      	add	r0, r3
 80a0de4:	f002 bbf8 	b.w	80a35d8 <strtol>
        const char* const s = d_->json + t_->start;
 80a0de8:	6822      	ldr	r2, [r4, #0]
 80a0dea:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a0dec:	6852      	ldr	r2, [r2, #4]
 80a0dee:	685b      	ldr	r3, [r3, #4]
 80a0df0:	5cd0      	ldrb	r0, [r2, r3]
 80a0df2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a0df6:	4258      	negs	r0, r3
 80a0df8:	4158      	adcs	r0, r3
}
 80a0dfa:	bd10      	pop	{r4, pc}
    switch (type()) {
 80a0dfc:	2000      	movs	r0, #0
 80a0dfe:	e7fc      	b.n	80a0dfa <_ZNK5spark9JSONValue5toIntEv+0x3c>

080a0e00 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a0e00:	460b      	mov	r3, r1
 80a0e02:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 80a0e04:	2200      	movs	r2, #0
 80a0e06:	b510      	push	{r4, lr}
 80a0e08:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 80a0e0a:	e9c0 2200 	strd	r2, r2, [r0]
        n_(0) {
 80a0e0e:	480d      	ldr	r0, [pc, #52]	; (80a0e44 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 80a0e10:	e9c4 0202 	strd	r0, r2, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a0e14:	b1a3      	cbz	r3, 80a0e40 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
 80a0e16:	781a      	ldrb	r2, [r3, #0]
 80a0e18:	2a03      	cmp	r2, #3
 80a0e1a:	d006      	beq.n	80a0e2a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
 80a0e1c:	b982      	cbnz	r2, 80a0e40 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x40>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a0e1e:	680a      	ldr	r2, [r1, #0]
 80a0e20:	6850      	ldr	r0, [r2, #4]
 80a0e22:	685a      	ldr	r2, [r3, #4]
 80a0e24:	5c82      	ldrb	r2, [r0, r2]
 80a0e26:	2a6e      	cmp	r2, #110	; 0x6e
 80a0e28:	d007      	beq.n	80a0e3a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3a>
            s_ = d->json + t->start;
 80a0e2a:	680a      	ldr	r2, [r1, #0]
 80a0e2c:	6858      	ldr	r0, [r3, #4]
 80a0e2e:	6852      	ldr	r2, [r2, #4]
            n_ = t->end - t->start;
 80a0e30:	689b      	ldr	r3, [r3, #8]
            s_ = d->json + t->start;
 80a0e32:	4402      	add	r2, r0
            n_ = t->end - t->start;
 80a0e34:	1a1b      	subs	r3, r3, r0
            s_ = d->json + t->start;
 80a0e36:	60a2      	str	r2, [r4, #8]
            n_ = t->end - t->start;
 80a0e38:	60e3      	str	r3, [r4, #12]
 80a0e3a:	4620      	mov	r0, r4
 80a0e3c:	f7ff ff71 	bl	80a0d22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a0e40:	4620      	mov	r0, r4
 80a0e42:	bd10      	pop	{r4, pc}
 80a0e44:	080a36f9 	.word	0x080a36f9

080a0e48 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a0e48:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 80a0e4a:	2500      	movs	r5, #0
 80a0e4c:	460b      	mov	r3, r1
 80a0e4e:	4604      	mov	r4, r0
 80a0e50:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 80a0e52:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 80a0e56:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80a0e5a:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 80a0e5e:	b14b      	cbz	r3, 80a0e74 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 80a0e60:	781a      	ldrb	r2, [r3, #0]
 80a0e62:	2a01      	cmp	r2, #1
 80a0e64:	d106      	bne.n	80a0e74 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 80a0e66:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 80a0e6a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 80a0e6c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 80a0e6e:	6143      	str	r3, [r0, #20]
 80a0e70:	f7ff ff57 	bl	80a0d22 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
 80a0e74:	4620      	mov	r0, r4
 80a0e76:	bd38      	pop	{r3, r4, r5, pc}

080a0e78 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 80a0e78:	b510      	push	{r4, lr}
    if (!n_) {
 80a0e7a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 80a0e7c:	4604      	mov	r4, r0
    if (!n_) {
 80a0e7e:	b163      	cbz	r3, 80a0e9a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 80a0e80:	6880      	ldr	r0, [r0, #8]
    --n_;
 80a0e82:	3b01      	subs	r3, #1
    k_ = t_; // Name
 80a0e84:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a0e86:	3010      	adds	r0, #16
 80a0e88:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a0e8a:	6120      	str	r0, [r4, #16]
    --n_;
 80a0e8c:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a0e8e:	b113      	cbz	r3, 80a0e96 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 80a0e90:	f7ff feda 	bl	80a0c48 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a0e94:	60a0      	str	r0, [r4, #8]
    return true;
 80a0e96:	2001      	movs	r0, #1
 80a0e98:	e000      	b.n	80a0e9c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 80a0e9a:	4618      	mov	r0, r3
}
 80a0e9c:	bd10      	pop	{r4, pc}

080a0e9e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a0e9e:	b510      	push	{r4, lr}
    write('}');
 80a0ea0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 80a0ea2:	4604      	mov	r4, r0
    write('}');
 80a0ea4:	f7ff ff31 	bl	80a0d0a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a0ea8:	2301      	movs	r3, #1
}
 80a0eaa:	4620      	mov	r0, r4
    state_ = NEXT;
 80a0eac:	7123      	strb	r3, [r4, #4]
}
 80a0eae:	bd10      	pop	{r4, pc}

080a0eb0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 80a0eb0:	b508      	push	{r3, lr}
    switch (state_) {
 80a0eb2:	7903      	ldrb	r3, [r0, #4]
 80a0eb4:	2b01      	cmp	r3, #1
 80a0eb6:	d002      	beq.n	80a0ebe <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a0eb8:	2b02      	cmp	r3, #2
 80a0eba:	d004      	beq.n	80a0ec6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 80a0ebc:	bd08      	pop	{r3, pc}
        write(',');
 80a0ebe:	212c      	movs	r1, #44	; 0x2c
        write(':');
 80a0ec0:	f7ff ff23 	bl	80a0d0a <_ZN5spark10JSONWriter5writeEc>
}
 80a0ec4:	e7fa      	b.n	80a0ebc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 80a0ec6:	213a      	movs	r1, #58	; 0x3a
 80a0ec8:	e7fa      	b.n	80a0ec0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

080a0eca <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a0eca:	b510      	push	{r4, lr}
 80a0ecc:	4604      	mov	r4, r0
    writeSeparator();
 80a0ece:	f7ff ffef 	bl	80a0eb0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a0ed2:	4620      	mov	r0, r4
 80a0ed4:	217b      	movs	r1, #123	; 0x7b
 80a0ed6:	f7ff ff18 	bl	80a0d0a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a0eda:	2300      	movs	r3, #0
}
 80a0edc:	4620      	mov	r0, r4
    state_ = BEGIN;
 80a0ede:	7123      	strb	r3, [r4, #4]
}
 80a0ee0:	bd10      	pop	{r4, pc}
	...

080a0ee4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a0ee4:	b538      	push	{r3, r4, r5, lr}
 80a0ee6:	4604      	mov	r4, r0
 80a0ee8:	460d      	mov	r5, r1
    writeSeparator();
 80a0eea:	f7ff ffe1 	bl	80a0eb0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a0eee:	6823      	ldr	r3, [r4, #0]
 80a0ef0:	4620      	mov	r0, r4
 80a0ef2:	462a      	mov	r2, r5
 80a0ef4:	68db      	ldr	r3, [r3, #12]
 80a0ef6:	4903      	ldr	r1, [pc, #12]	; (80a0f04 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a0ef8:	4798      	blx	r3
    state_ = NEXT;
 80a0efa:	2301      	movs	r3, #1
}
 80a0efc:	4620      	mov	r0, r4
    state_ = NEXT;
 80a0efe:	7123      	strb	r3, [r4, #4]
}
 80a0f00:	bd38      	pop	{r3, r4, r5, pc}
 80a0f02:	bf00      	nop
 80a0f04:	080a3690 	.word	0x080a3690

080a0f08 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a0f08:	b538      	push	{r3, r4, r5, lr}
 80a0f0a:	4604      	mov	r4, r0
 80a0f0c:	460d      	mov	r5, r1
    writeSeparator();
 80a0f0e:	f7ff ffcf 	bl	80a0eb0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a0f12:	6823      	ldr	r3, [r4, #0]
 80a0f14:	4620      	mov	r0, r4
 80a0f16:	462a      	mov	r2, r5
 80a0f18:	68db      	ldr	r3, [r3, #12]
 80a0f1a:	4903      	ldr	r1, [pc, #12]	; (80a0f28 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a0f1c:	4798      	blx	r3
    state_ = NEXT;
 80a0f1e:	2301      	movs	r3, #1
}
 80a0f20:	4620      	mov	r0, r4
    state_ = NEXT;
 80a0f22:	7123      	strb	r3, [r4, #4]
}
 80a0f24:	bd38      	pop	{r3, r4, r5, pc}
 80a0f26:	bf00      	nop
 80a0f28:	080a3693 	.word	0x080a3693

080a0f2c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a0f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0f30:	460d      	mov	r5, r1
 80a0f32:	4617      	mov	r7, r2
    write('"');
 80a0f34:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a0f36:	4604      	mov	r4, r0
    write('"');
 80a0f38:	f7ff fee7 	bl	80a0d0a <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 80a0f3c:	4629      	mov	r1, r5
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a0f3e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a0fd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 80a0f42:	442f      	add	r7, r5
    while (s != end) {
 80a0f44:	42bd      	cmp	r5, r7
 80a0f46:	462a      	mov	r2, r5
 80a0f48:	d038      	beq.n	80a0fbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 80a0f4a:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a0f4e:	2e22      	cmp	r6, #34	; 0x22
 80a0f50:	d003      	beq.n	80a0f5a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a0f52:	2e5c      	cmp	r6, #92	; 0x5c
 80a0f54:	d001      	beq.n	80a0f5a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 80a0f56:	2e1f      	cmp	r6, #31
 80a0f58:	d8f4      	bhi.n	80a0f44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 80a0f5a:	6823      	ldr	r3, [r4, #0]
 80a0f5c:	1a52      	subs	r2, r2, r1
 80a0f5e:	4620      	mov	r0, r4
 80a0f60:	689b      	ldr	r3, [r3, #8]
 80a0f62:	4798      	blx	r3
            write('\\');
 80a0f64:	215c      	movs	r1, #92	; 0x5c
 80a0f66:	4620      	mov	r0, r4
 80a0f68:	f7ff fecf 	bl	80a0d0a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a0f6c:	2e0d      	cmp	r6, #13
 80a0f6e:	d80a      	bhi.n	80a0f86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 80a0f70:	2e07      	cmp	r6, #7
 80a0f72:	d91c      	bls.n	80a0fae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a0f74:	f1a6 0308 	sub.w	r3, r6, #8
 80a0f78:	2b05      	cmp	r3, #5
 80a0f7a:	d818      	bhi.n	80a0fae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 80a0f7c:	e8df f003 	tbb	[pc, r3]
 80a0f80:	17110f0d 	.word	0x17110f0d
 80a0f84:	1513      	.short	0x1513
 80a0f86:	2e22      	cmp	r6, #34	; 0x22
 80a0f88:	d001      	beq.n	80a0f8e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a0f8a:	2e5c      	cmp	r6, #92	; 0x5c
 80a0f8c:	d10f      	bne.n	80a0fae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 80a0f8e:	4631      	mov	r1, r6
                write('b');
 80a0f90:	4620      	mov	r0, r4
 80a0f92:	f7ff feba 	bl	80a0d0a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 80a0f96:	4629      	mov	r1, r5
    while (s != end) {
 80a0f98:	e7d4      	b.n	80a0f44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 80a0f9a:	2162      	movs	r1, #98	; 0x62
 80a0f9c:	e7f8      	b.n	80a0f90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 80a0f9e:	2174      	movs	r1, #116	; 0x74
 80a0fa0:	e7f6      	b.n	80a0f90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 80a0fa2:	216e      	movs	r1, #110	; 0x6e
 80a0fa4:	e7f4      	b.n	80a0f90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 80a0fa6:	2166      	movs	r1, #102	; 0x66
 80a0fa8:	e7f2      	b.n	80a0f90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 80a0faa:	2172      	movs	r1, #114	; 0x72
 80a0fac:	e7f0      	b.n	80a0f90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 80a0fae:	6823      	ldr	r3, [r4, #0]
 80a0fb0:	4632      	mov	r2, r6
 80a0fb2:	4641      	mov	r1, r8
 80a0fb4:	4620      	mov	r0, r4
 80a0fb6:	68db      	ldr	r3, [r3, #12]
 80a0fb8:	4798      	blx	r3
                break;
 80a0fba:	e7ec      	b.n	80a0f96 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
 80a0fbc:	428d      	cmp	r5, r1
 80a0fbe:	d004      	beq.n	80a0fca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 80a0fc0:	6823      	ldr	r3, [r4, #0]
 80a0fc2:	4620      	mov	r0, r4
 80a0fc4:	689b      	ldr	r3, [r3, #8]
 80a0fc6:	1a6a      	subs	r2, r5, r1
 80a0fc8:	4798      	blx	r3
    }
    write('"');
 80a0fca:	2122      	movs	r1, #34	; 0x22
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	f7ff fe9c 	bl	80a0d0a <_ZN5spark10JSONWriter5writeEc>
}
 80a0fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0fd6:	bf00      	nop
 80a0fd8:	080a3696 	.word	0x080a3696

080a0fdc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a0fdc:	b570      	push	{r4, r5, r6, lr}
 80a0fde:	4604      	mov	r4, r0
 80a0fe0:	460d      	mov	r5, r1
 80a0fe2:	4616      	mov	r6, r2
    writeSeparator();
 80a0fe4:	f7ff ff64 	bl	80a0eb0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a0fe8:	4620      	mov	r0, r4
 80a0fea:	4632      	mov	r2, r6
 80a0fec:	4629      	mov	r1, r5
 80a0fee:	f7ff ff9d 	bl	80a0f2c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a0ff2:	2302      	movs	r3, #2
}
 80a0ff4:	4620      	mov	r0, r4
    state_ = VALUE;
 80a0ff6:	7123      	strb	r3, [r4, #4]
}
 80a0ff8:	bd70      	pop	{r4, r5, r6, pc}

080a0ffa <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a0ffa:	b570      	push	{r4, r5, r6, lr}
 80a0ffc:	4604      	mov	r4, r0
 80a0ffe:	460d      	mov	r5, r1
 80a1000:	4616      	mov	r6, r2
    writeSeparator();
 80a1002:	f7ff ff55 	bl	80a0eb0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a1006:	4620      	mov	r0, r4
 80a1008:	4632      	mov	r2, r6
 80a100a:	4629      	mov	r1, r5
 80a100c:	f7ff ff8e 	bl	80a0f2c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a1010:	2301      	movs	r3, #1
}
 80a1012:	4620      	mov	r0, r4
    state_ = NEXT;
 80a1014:	7123      	strb	r3, [r4, #4]
}
 80a1016:	bd70      	pop	{r4, r5, r6, pc}

080a1018 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a1018:	6880      	ldr	r0, [r0, #8]
 80a101a:	6803      	ldr	r3, [r0, #0]
 80a101c:	68db      	ldr	r3, [r3, #12]
 80a101e:	4718      	bx	r3

080a1020 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 80a1020:	4770      	bx	lr

080a1022 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a1022:	4608      	mov	r0, r1
 80a1024:	b111      	cbz	r1, 80a102c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a1026:	680b      	ldr	r3, [r1, #0]
 80a1028:	685b      	ldr	r3, [r3, #4]
 80a102a:	4718      	bx	r3
}
 80a102c:	4770      	bx	lr

080a102e <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a102e:	4770      	bx	lr

080a1030 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a1030:	4770      	bx	lr

080a1032 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 80a1032:	4770      	bx	lr

080a1034 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a1034:	b538      	push	{r3, r4, r5, lr}
 80a1036:	4604      	mov	r4, r0
 80a1038:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a103a:	6800      	ldr	r0, [r0, #0]
 80a103c:	212e      	movs	r1, #46	; 0x2e
 80a103e:	f002 fa06 	bl	80a344e <strchrnul>
    size = s - category;
 80a1042:	6823      	ldr	r3, [r4, #0]
    const char *s = strchrnul(category, '.');
 80a1044:	4602      	mov	r2, r0
    size = s - category;
 80a1046:	1ac0      	subs	r0, r0, r3
 80a1048:	6028      	str	r0, [r5, #0]
    if (size) {
 80a104a:	b120      	cbz	r0, 80a1056 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x22>
        if (*s) {
 80a104c:	7813      	ldrb	r3, [r2, #0]
 80a104e:	b103      	cbz	r3, 80a1052 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1e>
            ++s;
 80a1050:	3201      	adds	r2, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1052:	6820      	ldr	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1054:	6022      	str	r2, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
 80a1056:	bd38      	pop	{r3, r4, r5, pc}

080a1058 <_ZN5spark16JSONStreamWriterD0Ev>:
 80a1058:	b510      	push	{r4, lr}
 80a105a:	4604      	mov	r4, r0
 80a105c:	210c      	movs	r1, #12
 80a105e:	f001 fc36 	bl	80a28ce <_ZdlPvj>
 80a1062:	4620      	mov	r0, r4
 80a1064:	bd10      	pop	{r4, pc}

080a1066 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a1066:	b510      	push	{r4, lr}
 80a1068:	4604      	mov	r4, r0
 80a106a:	2104      	movs	r1, #4
 80a106c:	f001 fc2f 	bl	80a28ce <_ZdlPvj>
 80a1070:	4620      	mov	r0, r4
 80a1072:	bd10      	pop	{r4, pc}

080a1074 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1074:	b510      	push	{r4, lr}
 80a1076:	4604      	mov	r4, r0
 80a1078:	2104      	movs	r1, #4
 80a107a:	f001 fc28 	bl	80a28ce <_ZdlPvj>
 80a107e:	4620      	mov	r0, r4
 80a1080:	bd10      	pop	{r4, pc}

080a1082 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 80a1082:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a1084:	f002 f9ed 	bl	80a3462 <strcmp>
}
 80a1088:	fab0 f080 	clz	r0, r0
 80a108c:	0940      	lsrs	r0, r0, #5
 80a108e:	bd08      	pop	{r3, pc}

080a1090 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a1090:	b510      	push	{r4, lr}
 80a1092:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a1094:	f001 fa52 	bl	80a253c <_Z16_fetch_usbserialv>
 80a1098:	4284      	cmp	r4, r0
 80a109a:	d105      	bne.n	80a10a8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a109c:	f001 fa4e 	bl	80a253c <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a10a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBSerial1.end();
 80a10a4:	f001 ba30 	b.w	80a2508 <_ZN9USBSerial3endEv>
    if (stream == &USBSerial1) {
 80a10a8:	f001 fa86 	bl	80a25b8 <_Z17_fetch_usbserial1v>
 80a10ac:	4284      	cmp	r4, r0
 80a10ae:	d102      	bne.n	80a10b6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x26>
        USBSerial1.end();
 80a10b0:	f001 fa82 	bl	80a25b8 <_Z17_fetch_usbserial1v>
 80a10b4:	e7f4      	b.n	80a10a0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x10>
    if (stream == &Serial1) {
 80a10b6:	f001 f9ab 	bl	80a2410 <_Z22__fetch_global_Serial1v>
 80a10ba:	4284      	cmp	r4, r0
 80a10bc:	d105      	bne.n	80a10ca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
        Serial1.end();
 80a10be:	f001 f9a7 	bl	80a2410 <_Z22__fetch_global_Serial1v>
}
 80a10c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 80a10c6:	f001 b9a0 	b.w	80a240a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a10ca:	b12c      	cbz	r4, 80a10d8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x48>
 80a10cc:	6823      	ldr	r3, [r4, #0]
 80a10ce:	4620      	mov	r0, r4
}
 80a10d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a10d4:	685b      	ldr	r3, [r3, #4]
 80a10d6:	4718      	bx	r3
 80a10d8:	bd10      	pop	{r4, pc}

080a10da <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a10da:	b538      	push	{r3, r4, r5, lr}
 80a10dc:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a10de:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a10e0:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a10e2:	f002 f9d0 	bl	80a3486 <strlen>
 80a10e6:	4621      	mov	r1, r4
 80a10e8:	4602      	mov	r2, r0
 80a10ea:	4628      	mov	r0, r5
}
 80a10ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return value(val, strlen(val));
 80a10f0:	f7ff bf83 	b.w	80a0ffa <_ZN5spark10JSONWriter5valueEPKcj>

080a10f4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 80a10f4:	b570      	push	{r4, r5, r6, lr}
 80a10f6:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a10f8:	4608      	mov	r0, r1
inline void spark::StreamLogHandler::write(const char *str) {
 80a10fa:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a10fc:	f002 f9c3 	bl	80a3486 <strlen>
 80a1100:	6823      	ldr	r3, [r4, #0]
 80a1102:	4602      	mov	r2, r0
 80a1104:	4629      	mov	r1, r5
 80a1106:	4620      	mov	r0, r4
}
 80a1108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write(str, strlen(str));
 80a110c:	68db      	ldr	r3, [r3, #12]
 80a110e:	4718      	bx	r3

080a1110 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 80a1110:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 80a1112:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 80a1114:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 80a1118:	2201      	movs	r2, #1
 80a111a:	68db      	ldr	r3, [r3, #12]
 80a111c:	f10d 0107 	add.w	r1, sp, #7
 80a1120:	4798      	blx	r3
}
 80a1122:	b003      	add	sp, #12
 80a1124:	f85d fb04 	ldr.w	pc, [sp], #4

080a1128 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
 80a1128:	b40e      	push	{r1, r2, r3}
 80a112a:	b503      	push	{r0, r1, lr}
 80a112c:	ab03      	add	r3, sp, #12
 80a112e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
 80a1132:	2100      	movs	r1, #0
 80a1134:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
 80a1136:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
 80a1138:	f001 f804 	bl	80a2144 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
 80a113c:	b002      	add	sp, #8
 80a113e:	f85d eb04 	ldr.w	lr, [sp], #4
 80a1142:	b003      	add	sp, #12
 80a1144:	4770      	bx	lr
	...

080a1148 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 80a114c:	f04f 0814 	mov.w	r8, #20
 80a1150:	e9d0 9500 	ldrd	r9, r5, [r0]
 80a1154:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a1156:	464c      	mov	r4, r9
 80a1158:	fb08 f505 	mul.w	r5, r8, r5
 80a115c:	9300      	str	r3, [sp, #0]
 80a115e:	10ab      	asrs	r3, r5, #2
 80a1160:	4d17      	ldr	r5, [pc, #92]	; (80a11c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a1162:	435d      	muls	r5, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a1164:	2d00      	cmp	r5, #0
 80a1166:	dd23      	ble.n	80a11b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
 80a1168:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 80a116a:	fb08 f006 	mul.w	r0, r8, r6
 80a116e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a1172:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80a1176:	463a      	mov	r2, r7
 80a1178:	455f      	cmp	r7, fp
 80a117a:	bf28      	it	cs
 80a117c:	465a      	movcs	r2, fp
 80a117e:	5820      	ldr	r0, [r4, r0]
 80a1180:	9101      	str	r1, [sp, #4]
 80a1182:	f002 f988 	bl	80a3496 <strncmp>
                if (cmp == 0) {
 80a1186:	2301      	movs	r3, #1
 80a1188:	9901      	ldr	r1, [sp, #4]
 80a118a:	b978      	cbnz	r0, 80a11ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
 80a118c:	455f      	cmp	r7, fp
 80a118e:	d103      	bne.n	80a1198 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a1190:	9a00      	ldr	r2, [sp, #0]
 80a1192:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1194:	4635      	mov	r5, r6
 80a1196:	e7e5      	b.n	80a1164 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
 80a1198:	bf8c      	ite	hi
 80a119a:	2001      	movhi	r0, #1
 80a119c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a119e:	2800      	cmp	r0, #0
 80a11a0:	d0f8      	beq.n	80a1194 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a11a2:	1bae      	subs	r6, r5, r6
	      ++__first;
 80a11a4:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
 80a11a8:	3e01      	subs	r6, #1
 80a11aa:	e7f3      	b.n	80a1194 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
 80a11ac:	0fc0      	lsrs	r0, r0, #31
 80a11ae:	e7f6      	b.n	80a119e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
 80a11b0:	eba4 0409 	sub.w	r4, r4, r9
}
 80a11b4:	4802      	ldr	r0, [pc, #8]	; (80a11c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
 80a11b6:	10a4      	asrs	r4, r4, #2
 80a11b8:	4360      	muls	r0, r4
 80a11ba:	b003      	add	sp, #12
 80a11bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a11c0:	cccccccd 	.word	0xcccccccd

080a11c4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a11c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 80a11c6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 80a11c8:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a11ca:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 80a11cc:	b303      	cbz	r3, 80a1210 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 80a11ce:	b1f9      	cbz	r1, 80a1210 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 80a11d0:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a11d2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 80a11d6:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 80a11d8:	a903      	add	r1, sp, #12
 80a11da:	a801      	add	r0, sp, #4
 80a11dc:	f7ff ff2a 	bl	80a1034 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a11e0:	4601      	mov	r1, r0
 80a11e2:	b1a8      	cbz	r0, 80a1210 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a11e4:	f10d 030b 	add.w	r3, sp, #11
 80a11e8:	4620      	mov	r0, r4
 80a11ea:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 80a11ec:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a11f0:	f7ff ffaa 	bl	80a1148 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a11f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a11f8:	b153      	cbz	r3, 80a1210 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 80a11fa:	2314      	movs	r3, #20
 80a11fc:	6824      	ldr	r4, [r4, #0]
 80a11fe:	fb03 4400 	mla	r4, r3, r0, r4
            if (node.level >= 0) {
 80a1202:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 80a1206:	3408      	adds	r4, #8
            if (node.level >= 0) {
 80a1208:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a120a:	bfa8      	it	ge
 80a120c:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
 80a120e:	e7e3      	b.n	80a11d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 80a1210:	4630      	mov	r0, r6
 80a1212:	b004      	add	sp, #16
 80a1214:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1218 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a1218:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a121a:	4c0a      	ldr	r4, [pc, #40]	; (80a1244 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a121c:	7823      	ldrb	r3, [r4, #0]
 80a121e:	f3bf 8f5b 	dmb	ish
 80a1222:	07db      	lsls	r3, r3, #31
 80a1224:	d40b      	bmi.n	80a123e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a1226:	4620      	mov	r0, r4
 80a1228:	f7fe ff48 	bl	80a00bc <__cxa_guard_acquire>
 80a122c:	b138      	cbz	r0, 80a123e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
 80a122e:	4620      	mov	r0, r4
 80a1230:	f7fe ff49 	bl	80a00c6 <__cxa_guard_release>
 80a1234:	4a04      	ldr	r2, [pc, #16]	; (80a1248 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a1236:	4905      	ldr	r1, [pc, #20]	; (80a124c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a1238:	4805      	ldr	r0, [pc, #20]	; (80a1250 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a123a:	f001 fb43 	bl	80a28c4 <__aeabi_atexit>
}
 80a123e:	4804      	ldr	r0, [pc, #16]	; (80a1250 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
 80a1240:	bd10      	pop	{r4, pc}
 80a1242:	bf00      	nop
 80a1244:	200000ac 	.word	0x200000ac
 80a1248:	20000070 	.word	0x20000070
 80a124c:	080a1031 	.word	0x080a1031
 80a1250:	20000000 	.word	0x20000000

080a1254 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a1254:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a1256:	4c0a      	ldr	r4, [pc, #40]	; (80a1280 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a1258:	7823      	ldrb	r3, [r4, #0]
 80a125a:	f3bf 8f5b 	dmb	ish
 80a125e:	07db      	lsls	r3, r3, #31
 80a1260:	d40b      	bmi.n	80a127a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a1262:	4620      	mov	r0, r4
 80a1264:	f7fe ff2a 	bl	80a00bc <__cxa_guard_acquire>
 80a1268:	b138      	cbz	r0, 80a127a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
 80a126a:	4620      	mov	r0, r4
 80a126c:	f7fe ff2b 	bl	80a00c6 <__cxa_guard_release>
 80a1270:	4a04      	ldr	r2, [pc, #16]	; (80a1284 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a1272:	4905      	ldr	r1, [pc, #20]	; (80a1288 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a1274:	4805      	ldr	r0, [pc, #20]	; (80a128c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a1276:	f001 fb25 	bl	80a28c4 <__aeabi_atexit>
    return &factory;
}
 80a127a:	4804      	ldr	r0, [pc, #16]	; (80a128c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
 80a127c:	bd10      	pop	{r4, pc}
 80a127e:	bf00      	nop
 80a1280:	200000b0 	.word	0x200000b0
 80a1284:	20000070 	.word	0x20000070
 80a1288:	080a102f 	.word	0x080a102f
 80a128c:	20000004 	.word	0x20000004

080a1290 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a1290:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 80a1292:	2500      	movs	r5, #0
 80a1294:	4604      	mov	r4, r0
 80a1296:	e9c0 5500 	strd	r5, r5, [r0]
 80a129a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80a129e:	6085      	str	r5, [r0, #8]
 80a12a0:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a12a2:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80a12a6:	f7ff f981 	bl	80a05ac <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a12aa:	f7ff ffb5 	bl	80a1218 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a12ae:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a12b0:	f7ff ffd0 	bl	80a1254 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a12b4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a12b6:	6220      	str	r0, [r4, #32]
}
 80a12b8:	4620      	mov	r0, r4
 80a12ba:	bd38      	pop	{r3, r4, r5, pc}

080a12bc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a12bc:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a12be:	4c0b      	ldr	r4, [pc, #44]	; (80a12ec <_ZN5spark10LogManager8instanceEv+0x30>)
 80a12c0:	7823      	ldrb	r3, [r4, #0]
 80a12c2:	f3bf 8f5b 	dmb	ish
 80a12c6:	07db      	lsls	r3, r3, #31
 80a12c8:	d40e      	bmi.n	80a12e8 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a12ca:	4620      	mov	r0, r4
 80a12cc:	f7fe fef6 	bl	80a00bc <__cxa_guard_acquire>
 80a12d0:	b150      	cbz	r0, 80a12e8 <_ZN5spark10LogManager8instanceEv+0x2c>
 80a12d2:	4807      	ldr	r0, [pc, #28]	; (80a12f0 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a12d4:	f7ff ffdc 	bl	80a1290 <_ZN5spark10LogManagerC1Ev>
 80a12d8:	4620      	mov	r0, r4
 80a12da:	f7fe fef4 	bl	80a00c6 <__cxa_guard_release>
 80a12de:	4a05      	ldr	r2, [pc, #20]	; (80a12f4 <_ZN5spark10LogManager8instanceEv+0x38>)
 80a12e0:	4905      	ldr	r1, [pc, #20]	; (80a12f8 <_ZN5spark10LogManager8instanceEv+0x3c>)
 80a12e2:	4803      	ldr	r0, [pc, #12]	; (80a12f0 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a12e4:	f001 faee 	bl	80a28c4 <__aeabi_atexit>
    return &mgr;
}
 80a12e8:	4801      	ldr	r0, [pc, #4]	; (80a12f0 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a12ea:	bd10      	pop	{r4, pc}
 80a12ec:	200000a8 	.word	0x200000a8
 80a12f0:	200000b8 	.word	0x200000b8
 80a12f4:	20000070 	.word	0x20000070
 80a12f8:	080a176f 	.word	0x080a176f

080a12fc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a12fc:	2300      	movs	r3, #0
 80a12fe:	4a02      	ldr	r2, [pc, #8]	; (80a1308 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a1300:	4902      	ldr	r1, [pc, #8]	; (80a130c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a1302:	4803      	ldr	r0, [pc, #12]	; (80a1310 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a1304:	f7ff babc 	b.w	80a0880 <log_set_callbacks>
 80a1308:	080a164d 	.word	0x080a164d
 80a130c:	080a15d9 	.word	0x080a15d9
 80a1310:	080a1559 	.word	0x080a1559

080a1314 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a1314:	2300      	movs	r3, #0
 80a1316:	461a      	mov	r2, r3
 80a1318:	4619      	mov	r1, r3
 80a131a:	4618      	mov	r0, r3
 80a131c:	f7ff bab0 	b.w	80a0880 <log_set_callbacks>

080a1320 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a1320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1322:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 80a1324:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1326:	f851 3b04 	ldr.w	r3, [r1], #4
 80a132a:	a801      	add	r0, sp, #4
 80a132c:	9300      	str	r3, [sp, #0]
 80a132e:	f7ff fb85 	bl	80a0a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1332:	466a      	mov	r2, sp
 80a1334:	4629      	mov	r1, r5
 80a1336:	4620      	mov	r0, r4
 80a1338:	f7ff fd0a 	bl	80a0d50 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a133c:	a801      	add	r0, sp, #4
 80a133e:	f7ff fb67 	bl	80a0a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1342:	4620      	mov	r0, r4
 80a1344:	b003      	add	sp, #12
 80a1346:	bd30      	pop	{r4, r5, pc}

080a1348 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a1348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a134a:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a134c:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a134e:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1352:	a801      	add	r0, sp, #4
 80a1354:	9300      	str	r3, [sp, #0]
 80a1356:	f7ff fb71 	bl	80a0a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a135a:	466a      	mov	r2, sp
 80a135c:	4629      	mov	r1, r5
 80a135e:	4620      	mov	r0, r4
 80a1360:	f7ff fd72 	bl	80a0e48 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a1364:	a801      	add	r0, sp, #4
 80a1366:	f7ff fb53 	bl	80a0a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a136a:	4620      	mov	r0, r4
 80a136c:	b003      	add	sp, #12
 80a136e:	bd30      	pop	{r4, r5, pc}

080a1370 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a1370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1372:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 80a1374:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1376:	f851 3b04 	ldr.w	r3, [r1], #4
 80a137a:	a801      	add	r0, sp, #4
 80a137c:	9300      	str	r3, [sp, #0]
 80a137e:	f7ff fb5d 	bl	80a0a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1382:	466a      	mov	r2, sp
 80a1384:	4629      	mov	r1, r5
 80a1386:	4620      	mov	r0, r4
 80a1388:	f7ff fd3a 	bl	80a0e00 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 80a138c:	a801      	add	r0, sp, #4
 80a138e:	f7ff fb3f 	bl	80a0a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1392:	4620      	mov	r0, r4
 80a1394:	b003      	add	sp, #12
 80a1396:	bd30      	pop	{r4, r5, pc}

080a1398 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a1398:	b570      	push	{r4, r5, r6, lr}
 80a139a:	b08a      	sub	sp, #40	; 0x28
 80a139c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a139e:	4601      	mov	r1, r0
 80a13a0:	a804      	add	r0, sp, #16
 80a13a2:	f7ff ffd1 	bl	80a1348 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 80a13a6:	4e14      	ldr	r6, [pc, #80]	; (80a13f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 80a13a8:	a804      	add	r0, sp, #16
 80a13aa:	f7ff fd65 	bl	80a0e78 <_ZN5spark18JSONObjectIterator4nextEv>
 80a13ae:	b1e8      	cbz	r0, 80a13ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 80a13b0:	4668      	mov	r0, sp
 80a13b2:	a904      	add	r1, sp, #16
 80a13b4:	f7ff ffdc 	bl	80a1370 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a13b8:	4631      	mov	r1, r6
 80a13ba:	9802      	ldr	r0, [sp, #8]
 80a13bc:	f7ff fe61 	bl	80a1082 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 80a13c0:	4604      	mov	r4, r0
 80a13c2:	b110      	cbz	r0, 80a13ca <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 80a13c4:	1e2c      	subs	r4, r5, #0
 80a13c6:	bf18      	it	ne
 80a13c8:	2401      	movne	r4, #1
 80a13ca:	a801      	add	r0, sp, #4
 80a13cc:	f7ff fb20 	bl	80a0a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a13d0:	2c00      	cmp	r4, #0
 80a13d2:	d0e9      	beq.n	80a13a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 80a13d4:	4668      	mov	r0, sp
 80a13d6:	a904      	add	r1, sp, #16
 80a13d8:	f7ff ffa2 	bl	80a1320 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a13dc:	4668      	mov	r0, sp
 80a13de:	f7ff fcee 	bl	80a0dbe <_ZNK5spark9JSONValue5toIntEv>
 80a13e2:	6028      	str	r0, [r5, #0]
 80a13e4:	a801      	add	r0, sp, #4
 80a13e6:	f7ff fb13 	bl	80a0a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a13ea:	e7dd      	b.n	80a13a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 80a13ec:	a805      	add	r0, sp, #20
 80a13ee:	f7ff fb0f 	bl	80a0a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a13f2:	b00a      	add	sp, #40	; 0x28
 80a13f4:	bd70      	pop	{r4, r5, r6, pc}
 80a13f6:	bf00      	nop
 80a13f8:	080a369c 	.word	0x080a369c

080a13fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a13fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a13fe:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 80a1400:	4919      	ldr	r1, [pc, #100]	; (80a1468 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6c>)
 80a1402:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1404:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 80a1406:	f002 f82c 	bl	80a3462 <strcmp>
 80a140a:	b948      	cbnz	r0, 80a1420 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
 80a140c:	f001 f896 	bl	80a253c <_Z16_fetch_usbserialv>
 80a1410:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1414:	f001 f874 	bl	80a2500 <_ZN9USBSerial5beginEl>
        return &Serial;
 80a1418:	f001 f890 	bl	80a253c <_Z16_fetch_usbserialv>
}
 80a141c:	b003      	add	sp, #12
 80a141e:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "USBSerial1") == 0) {
 80a1420:	4620      	mov	r0, r4
 80a1422:	4912      	ldr	r1, [pc, #72]	; (80a146c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a1424:	f002 f81d 	bl	80a3462 <strcmp>
 80a1428:	b940      	cbnz	r0, 80a143c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x40>
        USBSerial1.begin();
 80a142a:	f001 f8c5 	bl	80a25b8 <_Z17_fetch_usbserial1v>
 80a142e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1432:	f001 f865 	bl	80a2500 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a1436:	f001 f8bf 	bl	80a25b8 <_Z17_fetch_usbserial1v>
 80a143a:	e7ef      	b.n	80a141c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    if (strcmp(type, "Serial1") == 0) {
 80a143c:	4620      	mov	r0, r4
 80a143e:	490c      	ldr	r1, [pc, #48]	; (80a1470 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a1440:	f002 f80f 	bl	80a3462 <strcmp>
 80a1444:	b970      	cbnz	r0, 80a1464 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a1446:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 80a144a:	a901      	add	r1, sp, #4
 80a144c:	4628      	mov	r0, r5
        int baud = 9600;
 80a144e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 80a1450:	f7ff ffa2 	bl	80a1398 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a1454:	f000 ffdc 	bl	80a2410 <_Z22__fetch_global_Serial1v>
 80a1458:	9901      	ldr	r1, [sp, #4]
 80a145a:	f000 ffd3 	bl	80a2404 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a145e:	f000 ffd7 	bl	80a2410 <_Z22__fetch_global_Serial1v>
 80a1462:	e7db      	b.n	80a141c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
 80a1464:	2000      	movs	r0, #0
 80a1466:	e7d9      	b.n	80a141c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
 80a1468:	080a36a1 	.word	0x080a36a1
 80a146c:	080a36a8 	.word	0x080a36a8
 80a1470:	080a36ab 	.word	0x080a36ab

080a1474 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1474:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 80a1476:	2614      	movs	r6, #20
 80a1478:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a147c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a147e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a1482:	42ae      	cmp	r6, r5
 80a1484:	d005      	beq.n	80a1492 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 80a1486:	f105 0008 	add.w	r0, r5, #8
 80a148a:	f7ff fff3 	bl	80a1474 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a148e:	3514      	adds	r5, #20
 80a1490:	e7f7      	b.n	80a1482 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 80a1492:	6820      	ldr	r0, [r4, #0]
 80a1494:	f7ff fa90 	bl	80a09b8 <free>
}
 80a1498:	4620      	mov	r0, r4
 80a149a:	bd70      	pop	{r4, r5, r6, pc}

080a149c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a149c:	b570      	push	{r4, r5, r6, lr}
 80a149e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 80a14a0:	e9d0 5300 	ldrd	r5, r3, [r0]
 80a14a4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 80a14a8:	42ae      	cmp	r6, r5
 80a14aa:	d004      	beq.n	80a14b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a14ac:	4628      	mov	r0, r5
 80a14ae:	f000 fe8f 	bl	80a21d0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 80a14b2:	3510      	adds	r5, #16
 80a14b4:	e7f8      	b.n	80a14a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 80a14b6:	6820      	ldr	r0, [r4, #0]
 80a14b8:	f7ff fa7e 	bl	80a09b8 <free>
}
 80a14bc:	4620      	mov	r0, r4
 80a14be:	bd70      	pop	{r4, r5, r6, pc}

080a14c0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 80a14c0:	b510      	push	{r4, lr}
 80a14c2:	4604      	mov	r4, r0
 80a14c4:	300c      	adds	r0, #12
 80a14c6:	f7ff ffd5 	bl	80a1474 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a14ca:	4620      	mov	r0, r4
 80a14cc:	f7ff ffe6 	bl	80a149c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a14d0:	4620      	mov	r0, r4
 80a14d2:	bd10      	pop	{r4, pc}

080a14d4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 80a14d4:	b510      	push	{r4, lr}
 80a14d6:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 80a14d8:	4b03      	ldr	r3, [pc, #12]	; (80a14e8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a14da:	f840 3b04 	str.w	r3, [r0], #4
 80a14de:	f7ff ffef 	bl	80a14c0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 80a14e2:	4620      	mov	r0, r4
 80a14e4:	bd10      	pop	{r4, pc}
 80a14e6:	bf00      	nop
 80a14e8:	080a362c 	.word	0x080a362c

080a14ec <_ZN5spark16StreamLogHandlerD0Ev>:
 80a14ec:	b510      	push	{r4, lr}
 80a14ee:	4604      	mov	r4, r0
 80a14f0:	f7ff fff0 	bl	80a14d4 <_ZN5spark16StreamLogHandlerD1Ev>
 80a14f4:	4620      	mov	r0, r4
 80a14f6:	2124      	movs	r1, #36	; 0x24
 80a14f8:	f001 f9e9 	bl	80a28ce <_ZdlPvj>
 80a14fc:	4620      	mov	r0, r4
 80a14fe:	bd10      	pop	{r4, pc}

080a1500 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 80a1500:	b510      	push	{r4, lr}
 80a1502:	4604      	mov	r4, r0
 80a1504:	4b02      	ldr	r3, [pc, #8]	; (80a1510 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a1506:	6003      	str	r3, [r0, #0]
 80a1508:	f7ff ffe4 	bl	80a14d4 <_ZN5spark16StreamLogHandlerD1Ev>
 80a150c:	4620      	mov	r0, r4
 80a150e:	bd10      	pop	{r4, pc}
 80a1510:	080a374c 	.word	0x080a374c

080a1514 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a1514:	b510      	push	{r4, lr}
 80a1516:	4604      	mov	r4, r0
 80a1518:	f7ff fff2 	bl	80a1500 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a151c:	4620      	mov	r0, r4
 80a151e:	2124      	movs	r1, #36	; 0x24
 80a1520:	f001 f9d5 	bl	80a28ce <_ZdlPvj>
 80a1524:	4620      	mov	r0, r4
 80a1526:	bd10      	pop	{r4, pc}

080a1528 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 80a1528:	2200      	movs	r2, #0
 80a152a:	e9c0 2200 	strd	r2, r2, [r0]
 80a152e:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a1530:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 80a1532:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1534:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1536:	6004      	str	r4, [r0, #0]
 80a1538:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a153a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a153c:	6044      	str	r4, [r0, #4]
 80a153e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1540:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a1542:	6084      	str	r4, [r0, #8]
}
 80a1544:	bd10      	pop	{r4, pc}

080a1546 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a1546:	b510      	push	{r4, lr}
 80a1548:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80a154a:	6803      	ldr	r3, [r0, #0]
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a154c:	6818      	ldr	r0, [r3, #0]
 80a154e:	f7ff f845 	bl	80a05dc <os_mutex_recursive_unlock>
 80a1552:	4620      	mov	r0, r4
 80a1554:	bd10      	pop	{r4, pc}
	...

080a1558 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a1558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a155c:	b087      	sub	sp, #28
 80a155e:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a1560:	4b1c      	ldr	r3, [pc, #112]	; (80a15d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 80a1562:	4680      	mov	r8, r0
 80a1564:	685b      	ldr	r3, [r3, #4]
 80a1566:	4689      	mov	r9, r1
 80a1568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a156c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a156e:	b96b      	cbnz	r3, 80a158c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 80a1570:	f7ff fea4 	bl	80a12bc <_ZN5spark10LogManager8instanceEv>
 80a1574:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1576:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a157a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a157c:	9305      	str	r3, [sp, #20]
 80a157e:	f7ff f825 	bl	80a05cc <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
 80a1582:	7b23      	ldrb	r3, [r4, #12]
 80a1584:	b12b      	cbz	r3, 80a1592 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 80a1586:	a805      	add	r0, sp, #20
 80a1588:	f7ff ffdd 	bl	80a1546 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a158c:	b007      	add	sp, #28
 80a158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a1592:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 80a1594:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 80a1598:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 80a159a:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a159e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a15a2:	45aa      	cmp	sl, r5
 80a15a4:	d012      	beq.n	80a15cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 80a15a6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 80a15aa:	4631      	mov	r1, r6
 80a15ac:	1d38      	adds	r0, r7, #4
 80a15ae:	f7ff fe09 	bl	80a11c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a15b2:	4581      	cmp	r9, r0
 80a15b4:	d3f5      	bcc.n	80a15a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 80a15b6:	9a03      	ldr	r2, [sp, #12]
 80a15b8:	683b      	ldr	r3, [r7, #0]
 80a15ba:	9200      	str	r2, [sp, #0]
 80a15bc:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80a15c0:	464a      	mov	r2, r9
 80a15c2:	4633      	mov	r3, r6
 80a15c4:	4641      	mov	r1, r8
 80a15c6:	4638      	mov	r0, r7
 80a15c8:	47d8      	blx	fp
 80a15ca:	e7ea      	b.n	80a15a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 80a15cc:	2300      	movs	r3, #0
 80a15ce:	7323      	strb	r3, [r4, #12]
 80a15d0:	e7d9      	b.n	80a1586 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 80a15d2:	bf00      	nop
 80a15d4:	e000ed00 	.word	0xe000ed00

080a15d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a15d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a15dc:	469b      	mov	fp, r3
 80a15de:	4b1a      	ldr	r3, [pc, #104]	; (80a1648 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 80a15e0:	4680      	mov	r8, r0
 80a15e2:	685b      	ldr	r3, [r3, #4]
 80a15e4:	4689      	mov	r9, r1
 80a15e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a15ea:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
 80a15ec:	b96b      	cbnz	r3, 80a160a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 80a15ee:	f7ff fe65 	bl	80a12bc <_ZN5spark10LogManager8instanceEv>
 80a15f2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a15f4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a15f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a15fa:	9301      	str	r3, [sp, #4]
 80a15fc:	f7fe ffe6 	bl	80a05cc <os_mutex_recursive_lock>
        if (that->isActive()) {
 80a1600:	7b23      	ldrb	r3, [r4, #12]
 80a1602:	b12b      	cbz	r3, 80a1610 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 80a1604:	a801      	add	r0, sp, #4
 80a1606:	f7ff ff9e 	bl	80a1546 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a160a:	b003      	add	sp, #12
 80a160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 80a1610:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 80a1612:	b2f6      	uxtb	r6, r6
 80a1614:	7323      	strb	r3, [r4, #12]
 80a1616:	e9d4 5300 	ldrd	r5, r3, [r4]
 80a161a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a161e:	4555      	cmp	r5, sl
 80a1620:	d00e      	beq.n	80a1640 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 80a1622:	f855 7b04 	ldr.w	r7, [r5], #4
 80a1626:	4659      	mov	r1, fp
 80a1628:	1d38      	adds	r0, r7, #4
 80a162a:	f7ff fdcb 	bl	80a11c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a162e:	4286      	cmp	r6, r0
 80a1630:	d3f5      	bcc.n	80a161e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 80a1632:	683b      	ldr	r3, [r7, #0]
 80a1634:	464a      	mov	r2, r9
 80a1636:	4641      	mov	r1, r8
 80a1638:	4638      	mov	r0, r7
 80a163a:	68db      	ldr	r3, [r3, #12]
 80a163c:	4798      	blx	r3
 80a163e:	e7ee      	b.n	80a161e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 80a1640:	2300      	movs	r3, #0
 80a1642:	7323      	strb	r3, [r4, #12]
 80a1644:	e7de      	b.n	80a1604 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 80a1646:	bf00      	nop
 80a1648:	e000ed00 	.word	0xe000ed00

080a164c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a164c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a1650:	4b16      	ldr	r3, [pc, #88]	; (80a16ac <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 80a1652:	4605      	mov	r5, r0
 80a1654:	685b      	ldr	r3, [r3, #4]
 80a1656:	460f      	mov	r7, r1
 80a1658:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (HAL_IsISR()) {
 80a165c:	bb1b      	cbnz	r3, 80a16a6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 80a165e:	f7ff fe2d 	bl	80a12bc <_ZN5spark10LogManager8instanceEv>
 80a1662:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1664:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a1668:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a166a:	9301      	str	r3, [sp, #4]
 80a166c:	f7fe ffae 	bl	80a05cc <os_mutex_recursive_lock>
 80a1670:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 80a1674:	2446      	movs	r4, #70	; 0x46
 80a1676:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a167a:	45b0      	cmp	r8, r6
 80a167c:	d109      	bne.n	80a1692 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 80a167e:	a801      	add	r0, sp, #4
 80a1680:	f7ff ff61 	bl	80a1546 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 80a1684:	42a5      	cmp	r5, r4
 80a1686:	bfb4      	ite	lt
 80a1688:	2000      	movlt	r0, #0
 80a168a:	2001      	movge	r0, #1
}
 80a168c:	b002      	add	sp, #8
 80a168e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 80a1692:	f856 0b04 	ldr.w	r0, [r6], #4
 80a1696:	4639      	mov	r1, r7
 80a1698:	3004      	adds	r0, #4
 80a169a:	f7ff fd93 	bl	80a11c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 80a169e:	4284      	cmp	r4, r0
 80a16a0:	bfa8      	it	ge
 80a16a2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 80a16a4:	e7e9      	b.n	80a167a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 80a16a6:	2000      	movs	r0, #0
 80a16a8:	e7f0      	b.n	80a168c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 80a16aa:	bf00      	nop
 80a16ac:	e000ed00 	.word	0xe000ed00

080a16b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a16b0:	460b      	mov	r3, r1
 80a16b2:	b570      	push	{r4, r5, r6, lr}
 80a16b4:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a16b6:	c805      	ldmia	r0, {r0, r2}
 80a16b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 80a16bc:	4282      	cmp	r2, r0
 80a16be:	d007      	beq.n	80a16d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x20>
 80a16c0:	4601      	mov	r1, r0
            if (*p == value) {
 80a16c2:	681d      	ldr	r5, [r3, #0]
 80a16c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80a16c8:	42ae      	cmp	r6, r5
 80a16ca:	d003      	beq.n	80a16d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
 80a16cc:	4608      	mov	r0, r1
 80a16ce:	e7f5      	b.n	80a16bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
        return false;
 80a16d0:	2000      	movs	r0, #0
}
 80a16d2:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a16d4:	1a52      	subs	r2, r2, r1
 80a16d6:	f001 fe67 	bl	80a33a8 <memmove>
    --size_;
 80a16da:	6863      	ldr	r3, [r4, #4]
    return true;
 80a16dc:	2001      	movs	r0, #1
    --size_;
 80a16de:	3b01      	subs	r3, #1
 80a16e0:	6063      	str	r3, [r4, #4]
    return true;
 80a16e2:	e7f6      	b.n	80a16d2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>

080a16e4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a16e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a16e6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a16e8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80a16ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 80a16ee:	9101      	str	r1, [sp, #4]
 80a16f0:	9303      	str	r3, [sp, #12]
 80a16f2:	f7fe ff6b 	bl	80a05cc <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a16f6:	4620      	mov	r0, r4
 80a16f8:	a901      	add	r1, sp, #4
 80a16fa:	f7ff ffd9 	bl	80a16b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a16fe:	b118      	cbz	r0, 80a1708 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 80a1700:	6863      	ldr	r3, [r4, #4]
 80a1702:	b90b      	cbnz	r3, 80a1708 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 80a1704:	f7ff fe06 	bl	80a1314 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a1708:	a803      	add	r0, sp, #12
 80a170a:	f7ff ff1c 	bl	80a1546 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 80a170e:	b004      	add	sp, #16
 80a1710:	bd10      	pop	{r4, pc}

080a1712 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 80a1712:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 80a1714:	b570      	push	{r4, r5, r6, lr}
 80a1716:	4604      	mov	r4, r0
 80a1718:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80a171c:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a1720:	42ae      	cmp	r6, r5
 80a1722:	d015      	beq.n	80a1750 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a1724:	4620      	mov	r0, r4
 80a1726:	f105 0110 	add.w	r1, r5, #16
 80a172a:	f7ff ffc1 	bl	80a16b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a172e:	6863      	ldr	r3, [r4, #4]
 80a1730:	b90b      	cbnz	r3, 80a1736 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a1732:	f7ff fdef 	bl	80a1314 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 80a1736:	69e0      	ldr	r0, [r4, #28]
 80a1738:	6929      	ldr	r1, [r5, #16]
 80a173a:	6803      	ldr	r3, [r0, #0]
 80a173c:	68db      	ldr	r3, [r3, #12]
 80a173e:	4798      	blx	r3
        if (h.stream) {
 80a1740:	6969      	ldr	r1, [r5, #20]
 80a1742:	b119      	cbz	r1, 80a174c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a1744:	6a20      	ldr	r0, [r4, #32]
 80a1746:	6803      	ldr	r3, [r0, #0]
 80a1748:	68db      	ldr	r3, [r3, #12]
 80a174a:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 80a174c:	3518      	adds	r5, #24
 80a174e:	e7e7      	b.n	80a1720 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 80a1750:	2618      	movs	r6, #24
 80a1752:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a1756:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a175a:	42ae      	cmp	r6, r5
 80a175c:	d004      	beq.n	80a1768 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 80a175e:	4628      	mov	r0, r5
 80a1760:	f000 fd36 	bl	80a21d0 <_ZN6StringD1Ev>
 80a1764:	3518      	adds	r5, #24
 80a1766:	e7f8      	b.n	80a175a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 80a1768:	2300      	movs	r3, #0
 80a176a:	6163      	str	r3, [r4, #20]
}
 80a176c:	bd70      	pop	{r4, r5, r6, pc}

080a176e <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 80a176e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1770:	4604      	mov	r4, r0
    resetSystemCallbacks();
 80a1772:	f7ff fdcf 	bl	80a1314 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a1776:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80a177a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	f7fe ff25 	bl	80a05cc <os_mutex_recursive_lock>
         destroyFactoryHandlers();
 80a1782:	4620      	mov	r0, r4
 80a1784:	f7ff ffc5 	bl	80a1712 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 80a1788:	a801      	add	r0, sp, #4
 80a178a:	f7ff fedc 	bl	80a1546 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 80a178e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1790:	b108      	cbz	r0, 80a1796 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 80a1792:	f7fe ff13 	bl	80a05bc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 80a1796:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 80a179a:	2618      	movs	r6, #24
 80a179c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 80a17a0:	42ae      	cmp	r6, r5
 80a17a2:	d004      	beq.n	80a17ae <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 80a17a4:	4628      	mov	r0, r5
 80a17a6:	f000 fd13 	bl	80a21d0 <_ZN6StringD1Ev>
 80a17aa:	3518      	adds	r5, #24
 80a17ac:	e7f8      	b.n	80a17a0 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 80a17ae:	6920      	ldr	r0, [r4, #16]
 80a17b0:	f7ff f902 	bl	80a09b8 <free>
 80a17b4:	6820      	ldr	r0, [r4, #0]
 80a17b6:	f7ff f8ff 	bl	80a09b8 <free>
}
 80a17ba:	4620      	mov	r0, r4
 80a17bc:	b002      	add	sp, #8
 80a17be:	bd70      	pop	{r4, r5, r6, pc}

080a17c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 80a17c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a17c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17c4:	4606      	mov	r6, r0
 80a17c6:	460c      	mov	r4, r1
 80a17c8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a17ca:	d927      	bls.n	80a181c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
 80a17cc:	4290      	cmp	r0, r2
 80a17ce:	d226      	bcs.n	80a181e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
        capacity_(0) {
 80a17d0:	2600      	movs	r6, #0
            --end;
 80a17d2:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a17d6:	1a6c      	subs	r4, r5, r1
 80a17d8:	f1a1 0714 	sub.w	r7, r1, #20
 80a17dc:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a17de:	42af      	cmp	r7, r5
 80a17e0:	d03d      	beq.n	80a185e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
 80a17e2:	b1a4      	cbz	r4, 80a180e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
 80a17e4:	682b      	ldr	r3, [r5, #0]
 80a17e6:	6023      	str	r3, [r4, #0]
 80a17e8:	88ab      	ldrh	r3, [r5, #4]
 80a17ea:	80a3      	strh	r3, [r4, #4]
 80a17ec:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
        capacity_(0) {
 80a17f0:	e9c4 6602 	strd	r6, r6, [r4, #8]
 80a17f4:	6126      	str	r6, [r4, #16]
 80a17f6:	80e3      	strh	r3, [r4, #6]
 80a17f8:	68ab      	ldr	r3, [r5, #8]
 80a17fa:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a17fc:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a17fe:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1800:	68ea      	ldr	r2, [r5, #12]
 80a1802:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1804:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1806:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1808:	692a      	ldr	r2, [r5, #16]
 80a180a:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a180c:	612b      	str	r3, [r5, #16]
 80a180e:	f105 0008 	add.w	r0, r5, #8
 80a1812:	f7ff fe2f 	bl	80a1474 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 80a1816:	3d14      	subs	r5, #20
 80a1818:	3c14      	subs	r4, #20
 80a181a:	e7e0      	b.n	80a17de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
 80a181c:	d01f      	beq.n	80a185e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
 80a181e:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
 80a1820:	42ac      	cmp	r4, r5
 80a1822:	d01c      	beq.n	80a185e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
 80a1824:	b1a6      	cbz	r6, 80a1850 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
 80a1826:	6823      	ldr	r3, [r4, #0]
 80a1828:	6033      	str	r3, [r6, #0]
 80a182a:	88a3      	ldrh	r3, [r4, #4]
 80a182c:	80b3      	strh	r3, [r6, #4]
 80a182e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
        capacity_(0) {
 80a1832:	e9c6 7702 	strd	r7, r7, [r6, #8]
 80a1836:	6137      	str	r7, [r6, #16]
 80a1838:	80f3      	strh	r3, [r6, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a183a:	68a3      	ldr	r3, [r4, #8]
 80a183c:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a183e:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1840:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1842:	68e2      	ldr	r2, [r4, #12]
 80a1844:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1846:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1848:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a184a:	6922      	ldr	r2, [r4, #16]
 80a184c:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a184e:	6123      	str	r3, [r4, #16]
 80a1850:	f104 0008 	add.w	r0, r4, #8
 80a1854:	f7ff fe0e 	bl	80a1474 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 80a1858:	3414      	adds	r4, #20
 80a185a:	3614      	adds	r6, #20
 80a185c:	e7e0      	b.n	80a1820 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
 80a185e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1860 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a1860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1862:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 80a1866:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a1868:	4604      	mov	r4, r0
 80a186a:	460e      	mov	r6, r1
 80a186c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a186e:	db0d      	blt.n	80a188c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
 80a1870:	3501      	adds	r5, #1
        if (n > 0) {
 80a1872:	2d00      	cmp	r5, #0
 80a1874:	6800      	ldr	r0, [r0, #0]
 80a1876:	dd04      	ble.n	80a1882 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
 80a1878:	00a9      	lsls	r1, r5, #2
 80a187a:	f7ff f8a5 	bl	80a09c8 <realloc>
            if (!d) {
 80a187e:	b918      	cbnz	r0, 80a1888 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
 80a1880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 80a1882:	f7ff f899 	bl	80a09b8 <free>
        T* d = nullptr;
 80a1886:	2000      	movs	r0, #0
        data_ = d;
 80a1888:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a188a:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
 80a188c:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
 80a188e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 80a1890:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
 80a1894:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a1896:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
 80a189a:	1d08      	adds	r0, r1, #4
 80a189c:	f001 fd84 	bl	80a33a8 <memmove>
    new(p) T(std::move(value));
 80a18a0:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a18a4:	6863      	ldr	r3, [r4, #4]
    return true;
 80a18a6:	2001      	movs	r0, #1
    ++size_;
 80a18a8:	3301      	adds	r3, #1
 80a18aa:	6063      	str	r3, [r4, #4]
    return true;
 80a18ac:	e7e8      	b.n	80a1880 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

080a18ae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a18ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a18b0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a18b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
 80a18b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
 80a18b8:	460d      	mov	r5, r1
 80a18ba:	9301      	str	r3, [sp, #4]
 80a18bc:	f7fe fe86 	bl	80a05cc <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
 80a18c0:	e9d4 3100 	ldrd	r3, r1, [r4]
 80a18c4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
 80a18c8:	4283      	cmp	r3, r0
 80a18ca:	461a      	mov	r2, r3
 80a18cc:	d00a      	beq.n	80a18e4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 80a18ce:	6812      	ldr	r2, [r2, #0]
 80a18d0:	3304      	adds	r3, #4
 80a18d2:	42aa      	cmp	r2, r5
 80a18d4:	d1f8      	bne.n	80a18c8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
 80a18d6:	a801      	add	r0, sp, #4
 80a18d8:	f7ff fe35 	bl	80a1546 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
 80a18dc:	2500      	movs	r5, #0
}
 80a18de:	4628      	mov	r0, r5
 80a18e0:	b003      	add	sp, #12
 80a18e2:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
 80a18e4:	462a      	mov	r2, r5
 80a18e6:	4620      	mov	r0, r4
 80a18e8:	f7ff ffba 	bl	80a1860 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a18ec:	4605      	mov	r5, r0
 80a18ee:	2800      	cmp	r0, #0
 80a18f0:	d0f1      	beq.n	80a18d6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 80a18f2:	6863      	ldr	r3, [r4, #4]
 80a18f4:	2b01      	cmp	r3, #1
 80a18f6:	d101      	bne.n	80a18fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 80a18f8:	f7ff fd00 	bl	80a12fc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 80a18fc:	a801      	add	r0, sp, #4
 80a18fe:	f7ff fe22 	bl	80a1546 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a1902:	e7ec      	b.n	80a18de <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

080a1904 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 80a1904:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 80a1906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1908:	4604      	mov	r4, r0
 80a190a:	460d      	mov	r5, r1
 80a190c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a190e:	d914      	bls.n	80a193a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a1910:	4290      	cmp	r0, r2
 80a1912:	d213      	bcs.n	80a193c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 80a1914:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 80a1918:	1a75      	subs	r5, r6, r1
 80a191a:	f1a1 0710 	sub.w	r7, r1, #16
 80a191e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 80a1920:	42b7      	cmp	r7, r6
 80a1922:	d018      	beq.n	80a1956 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a1924:	b11c      	cbz	r4, 80a192e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a1926:	4631      	mov	r1, r6
 80a1928:	4620      	mov	r0, r4
 80a192a:	f000 fcb8 	bl	80a229e <_ZN6StringC1EOS_>
                end->~T();
 80a192e:	4630      	mov	r0, r6
 80a1930:	f000 fc4e 	bl	80a21d0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 80a1934:	3e10      	subs	r6, #16
 80a1936:	3c10      	subs	r4, #16
 80a1938:	e7f2      	b.n	80a1920 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 80a193a:	d00c      	beq.n	80a1956 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a193c:	42b5      	cmp	r5, r6
 80a193e:	d00a      	beq.n	80a1956 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a1940:	b11c      	cbz	r4, 80a194a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a1942:	4629      	mov	r1, r5
 80a1944:	4620      	mov	r0, r4
 80a1946:	f000 fcaa 	bl	80a229e <_ZN6StringC1EOS_>
                p->~T();
 80a194a:	4628      	mov	r0, r5
 80a194c:	f000 fc40 	bl	80a21d0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 80a1950:	3510      	adds	r5, #16
 80a1952:	3410      	adds	r4, #16
 80a1954:	e7f2      	b.n	80a193c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 80a1956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1958 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 80a1958:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 80a195a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 80a195c:	4605      	mov	r5, r0
        if (n > 0) {
 80a195e:	dd11      	ble.n	80a1984 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 80a1960:	0130      	lsls	r0, r6, #4
 80a1962:	f7ff f821 	bl	80a09a8 <malloc>
            if (!d) {
 80a1966:	4604      	mov	r4, r0
 80a1968:	b158      	cbz	r0, 80a1982 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 80a196a:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a196e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a1972:	f7ff ffc7 	bl	80a1904 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 80a1976:	6828      	ldr	r0, [r5, #0]
 80a1978:	f7ff f81e 	bl	80a09b8 <free>
        return true;
 80a197c:	2001      	movs	r0, #1
        data_ = d;
 80a197e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a1980:	60ae      	str	r6, [r5, #8]
    }
 80a1982:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 80a1984:	2400      	movs	r4, #0
 80a1986:	e7f6      	b.n	80a1976 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

080a1988 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a1988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a198c:	4691      	mov	r9, r2
        capacity_(0) {
 80a198e:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a1990:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a1992:	b097      	sub	sp, #92	; 0x5c
 80a1994:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
 80a1996:	f8d9 1004 	ldr.w	r1, [r9, #4]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a199a:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 80a199c:	4299      	cmp	r1, r3
        capacity_(0) {
 80a199e:	e9c0 3300 	strd	r3, r3, [r0]
 80a19a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80a19a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a19aa:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a19ae:	7602      	strb	r2, [r0, #24]
 80a19b0:	930c      	str	r3, [sp, #48]	; 0x30
    if (n > capacity_ && !realloc(n)) {
 80a19b2:	dc23      	bgt.n	80a19fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 80a19b4:	e9d9 5700 	ldrd	r5, r7, [r9]
 80a19b8:	2314      	movs	r3, #20
 80a19ba:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 80a19be:	42af      	cmp	r7, r5
 80a19c0:	d03b      	beq.n	80a1a3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 80a19c2:	4629      	mov	r1, r5
 80a19c4:	a80d      	add	r0, sp, #52	; 0x34
 80a19c6:	f000 fc6a 	bl	80a229e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 80a19ca:	a90d      	add	r1, sp, #52	; 0x34
 80a19cc:	a811      	add	r0, sp, #68	; 0x44
 80a19ce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a19d0:	f000 fc65 	bl	80a229e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a19d4:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 80a19d8:	4299      	cmp	r1, r3
 80a19da:	da1b      	bge.n	80a1a14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 80a19dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
 80a19de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
 80a19e0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a19e4:	4631      	mov	r1, r6
 80a19e6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a19ea:	f106 0010 	add.w	r0, r6, #16
 80a19ee:	f7ff ff89 	bl	80a1904 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a19f2:	b9ee      	cbnz	r6, 80a1a30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 80a19f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a19f6:	3301      	adds	r3, #1
 80a19f8:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
 80a19fa:	e011      	b.n	80a1a20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 80a19fc:	a80a      	add	r0, sp, #40	; 0x28
 80a19fe:	f7ff ffab 	bl	80a1958 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a1a02:	2800      	cmp	r0, #0
 80a1a04:	d1d6      	bne.n	80a19b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
 80a1a06:	a80a      	add	r0, sp, #40	; 0x28
 80a1a08:	f7ff fd48 	bl	80a149c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a1a0c:	4620      	mov	r0, r4
 80a1a0e:	b017      	add	sp, #92	; 0x5c
 80a1a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1a14:	3101      	adds	r1, #1
 80a1a16:	a80a      	add	r0, sp, #40	; 0x28
 80a1a18:	f7ff ff9e 	bl	80a1958 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a1a1c:	2800      	cmp	r0, #0
 80a1a1e:	d1dd      	bne.n	80a19dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 80a1a20:	a811      	add	r0, sp, #68	; 0x44
 80a1a22:	f000 fbd5 	bl	80a21d0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 80a1a26:	a80d      	add	r0, sp, #52	; 0x34
 80a1a28:	f000 fbd2 	bl	80a21d0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 80a1a2c:	3514      	adds	r5, #20
 80a1a2e:	e7c6      	b.n	80a19be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 80a1a30:	4630      	mov	r0, r6
 80a1a32:	a911      	add	r1, sp, #68	; 0x44
 80a1a34:	f000 fc33 	bl	80a229e <_ZN6StringC1EOS_>
 80a1a38:	e7dc      	b.n	80a19f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 80a1a3a:	2600      	movs	r6, #0
 80a1a3c:	f04f 0a14 	mov.w	sl, #20
        size_t size = 0; // Name length
 80a1a40:	4637      	mov	r7, r6
 80a1a42:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
 80a1a46:	960f      	str	r6, [sp, #60]	; 0x3c
    for (int i = 0; i < cats.size(); ++i) {
 80a1a48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a1a4c:	429e      	cmp	r6, r3
 80a1a4e:	f280 8097 	bge.w	80a1b80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
 80a1a52:	0133      	lsls	r3, r6, #4
 80a1a54:	58d3      	ldr	r3, [r2, r3]
 80a1a56:	9308      	str	r3, [sp, #32]
        if (!category) {
 80a1a58:	b90b      	cbnz	r3, 80a1a5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
 80a1a5a:	3601      	adds	r6, #1
 80a1a5c:	e7f4      	b.n	80a1a48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
 80a1a5e:	fb0a f306 	mul.w	r3, sl, r6
 80a1a62:	9709      	str	r7, [sp, #36]	; 0x24
 80a1a64:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a1a66:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
 80a1a68:	a909      	add	r1, sp, #36	; 0x24
 80a1a6a:	a808      	add	r0, sp, #32
 80a1a6c:	f7ff fae2 	bl	80a1034 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1a70:	4683      	mov	fp, r0
 80a1a72:	2800      	cmp	r0, #0
 80a1a74:	d0f1      	beq.n	80a1a5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1a76:	4601      	mov	r1, r0
 80a1a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a1a7a:	4628      	mov	r0, r5
 80a1a7c:	f10d 031f 	add.w	r3, sp, #31
            bool found = false;
 80a1a80:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1a84:	f7ff fb60 	bl	80a1148 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1a88:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1a8c:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1a8e:	f1b8 0f00 	cmp.w	r8, #0
 80a1a92:	d166      	bne.n	80a1b62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a1a94:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80a1a98:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
            level(-1) {
 80a1a9c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80a1aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a1aa4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80a1aa8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80a1aac:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a1ab0:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80a1ab4:	4293      	cmp	r3, r2
 80a1ab6:	db1a      	blt.n	80a1aee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
 80a1ab8:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
 80a1abc:	f1bb 0f00 	cmp.w	fp, #0
 80a1ac0:	dd4a      	ble.n	80a1b58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
 80a1ac2:	fb0a f00b 	mul.w	r0, sl, fp
 80a1ac6:	f7fe ff6f 	bl	80a09a8 <malloc>
            if (!d) {
 80a1aca:	9004      	str	r0, [sp, #16]
 80a1acc:	2800      	cmp	r0, #0
 80a1ace:	d045      	beq.n	80a1b5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
 80a1ad0:	e9d5 1200 	ldrd	r1, r2, [r5]
 80a1ad4:	fb0a 1202 	mla	r2, sl, r2, r1
 80a1ad8:	f7ff fe72 	bl	80a17c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a1adc:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
 80a1ade:	6828      	ldr	r0, [r5, #0]
 80a1ae0:	9304      	str	r3, [sp, #16]
 80a1ae2:	f7fe ff69 	bl	80a09b8 <free>
        data_ = d;
 80a1ae6:	9b04      	ldr	r3, [sp, #16]
        capacity_ = n;
 80a1ae8:	f8c5 b008 	str.w	fp, [r5, #8]
        data_ = d;
 80a1aec:	602b      	str	r3, [r5, #0]
    T* const p = data_ + i;
 80a1aee:	9b01      	ldr	r3, [sp, #4]
 80a1af0:	f8d5 b000 	ldr.w	fp, [r5]
 80a1af4:	fb0a f303 	mul.w	r3, sl, r3
    move(p + 1, p, data_ + size_);
 80a1af8:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 80a1afa:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
 80a1afe:	f101 0014 	add.w	r0, r1, #20
 80a1b02:	fb0a b202 	mla	r2, sl, r2, fp
 80a1b06:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
 80a1b08:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
 80a1b0a:	f7ff fe59 	bl	80a17c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a1b0e:	9904      	ldr	r1, [sp, #16]
 80a1b10:	b1a9      	cbz	r1, 80a1b3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
 80a1b12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a1b14:	9b05      	ldr	r3, [sp, #20]
 80a1b16:	f84b 2003 	str.w	r2, [fp, r3]
 80a1b1a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80a1b1e:	808b      	strh	r3, [r1, #4]
 80a1b20:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
        capacity_(0) {
 80a1b24:	e9c1 7702 	strd	r7, r7, [r1, #8]
 80a1b28:	610f      	str	r7, [r1, #16]
 80a1b2a:	80cb      	strh	r3, [r1, #6]
      __a = _GLIBCXX_MOVE(__b);
 80a1b2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a1b2e:	608b      	str	r3, [r1, #8]
 80a1b30:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b32:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
 80a1b34:	60cb      	str	r3, [r1, #12]
 80a1b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b38:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
 80a1b3a:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b3c:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
 80a1b3e:	686b      	ldr	r3, [r5, #4]
 80a1b40:	3301      	adds	r3, #1
 80a1b42:	606b      	str	r3, [r5, #4]
 80a1b44:	a813      	add	r0, sp, #76	; 0x4c
 80a1b46:	f7ff fc95 	bl	80a1474 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1b4a:	f1b8 0f00 	cmp.w	r8, #0
 80a1b4e:	d008      	beq.n	80a1b62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
 80a1b50:	a80d      	add	r0, sp, #52	; 0x34
 80a1b52:	f7ff fc8f 	bl	80a1474 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1b56:	e756      	b.n	80a1a06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 80a1b58:	4643      	mov	r3, r8
 80a1b5a:	e7c0      	b.n	80a1ade <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a1b5c:	f04f 0801 	mov.w	r8, #1
 80a1b60:	e7f0      	b.n	80a1b44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
 80a1b62:	9b01      	ldr	r3, [sp, #4]
 80a1b64:	682d      	ldr	r5, [r5, #0]
 80a1b66:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
 80a1b6a:	9b08      	ldr	r3, [sp, #32]
 80a1b6c:	781b      	ldrb	r3, [r3, #0]
 80a1b6e:	b92b      	cbnz	r3, 80a1b7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
 80a1b70:	f8d9 3000 	ldr.w	r3, [r9]
 80a1b74:	9a02      	ldr	r2, [sp, #8]
 80a1b76:	4413      	add	r3, r2
 80a1b78:	7c1b      	ldrb	r3, [r3, #16]
 80a1b7a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 80a1b7c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 80a1b7e:	e773      	b.n	80a1a68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1b80:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1b82:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1b84:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1b86:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1b88:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b8a:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
 80a1b8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b8e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1b90:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1b92:	60a2      	str	r2, [r4, #8]
 80a1b94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b96:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1b98:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1b9a:	60e2      	str	r2, [r4, #12]
 80a1b9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b9e:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ba0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1ba2:	6122      	str	r2, [r4, #16]
 80a1ba4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ba6:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
 80a1ba8:	9b03      	ldr	r3, [sp, #12]
 80a1baa:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 80a1bac:	6162      	str	r2, [r4, #20]
 80a1bae:	7623      	strb	r3, [r4, #24]
 80a1bb0:	e7ce      	b.n	80a1b50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

080a1bb4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a1bb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a1bb6:	4605      	mov	r5, r0
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a1bb8:	460e      	mov	r6, r1
 80a1bba:	4604      	mov	r4, r0
        filter_(level, filters) {
 80a1bbc:	4b08      	ldr	r3, [pc, #32]	; (80a1be0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a1bbe:	4611      	mov	r1, r2
 80a1bc0:	f845 3b04 	str.w	r3, [r5], #4
 80a1bc4:	a801      	add	r0, sp, #4
 80a1bc6:	f7fe fb50 	bl	80a026a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1bca:	4631      	mov	r1, r6
 80a1bcc:	aa01      	add	r2, sp, #4
 80a1bce:	4628      	mov	r0, r5
 80a1bd0:	f7ff feda 	bl	80a1988 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1bd4:	a801      	add	r0, sp, #4
 80a1bd6:	f7fe fb07 	bl	80a01e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a1bda:	4620      	mov	r0, r4
 80a1bdc:	b004      	add	sp, #16
 80a1bde:	bd70      	pop	{r4, r5, r6, pc}
 80a1be0:	080a362c 	.word	0x080a362c

080a1be4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 80a1be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1be6:	460f      	mov	r7, r1
 80a1be8:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a1bea:	4638      	mov	r0, r7
 80a1bec:	4925      	ldr	r1, [pc, #148]	; (80a1c84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
 80a1bee:	4616      	mov	r6, r2
 80a1bf0:	461d      	mov	r5, r3
 80a1bf2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a1bf4:	f001 fc35 	bl	80a3462 <strcmp>
 80a1bf8:	bb00      	cbnz	r0, 80a1c3c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
 80a1bfa:	b1e4      	cbz	r4, 80a1c36 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a1bfc:	4629      	mov	r1, r5
 80a1bfe:	4668      	mov	r0, sp
 80a1c00:	f7ff fc92 	bl	80a1528 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a1c04:	2024      	movs	r0, #36	; 0x24
 80a1c06:	4920      	ldr	r1, [pc, #128]	; (80a1c88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a1c08:	f000 fe63 	bl	80a28d2 <_ZnwjRKSt9nothrow_t>
 80a1c0c:	4605      	mov	r5, r0
 80a1c0e:	b170      	cbz	r0, 80a1c2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a1c10:	4669      	mov	r1, sp
 80a1c12:	a803      	add	r0, sp, #12
 80a1c14:	f7fe fb29 	bl	80a026a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1c18:	4631      	mov	r1, r6
 80a1c1a:	aa03      	add	r2, sp, #12
 80a1c1c:	4628      	mov	r0, r5
 80a1c1e:	f7ff ffc9 	bl	80a1bb4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1c22:	a803      	add	r0, sp, #12
 80a1c24:	f7fe fae0 	bl	80a01e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
 80a1c28:	4b18      	ldr	r3, [pc, #96]	; (80a1c8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
 80a1c2a:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
 80a1c2c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a1c2e:	4668      	mov	r0, sp
 80a1c30:	f7fe fada 	bl	80a01e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a1c34:	462c      	mov	r4, r5
}
 80a1c36:	4620      	mov	r0, r4
 80a1c38:	b007      	add	sp, #28
 80a1c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a1c3c:	4638      	mov	r0, r7
 80a1c3e:	4914      	ldr	r1, [pc, #80]	; (80a1c90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
 80a1c40:	f001 fc0f 	bl	80a3462 <strcmp>
 80a1c44:	b9e0      	cbnz	r0, 80a1c80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
 80a1c46:	2c00      	cmp	r4, #0
 80a1c48:	d0f5      	beq.n	80a1c36 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a1c4a:	4629      	mov	r1, r5
 80a1c4c:	4668      	mov	r0, sp
 80a1c4e:	f7ff fc6b 	bl	80a1528 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a1c52:	2024      	movs	r0, #36	; 0x24
 80a1c54:	490c      	ldr	r1, [pc, #48]	; (80a1c88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
 80a1c56:	f000 fe3c 	bl	80a28d2 <_ZnwjRKSt9nothrow_t>
 80a1c5a:	4605      	mov	r5, r0
 80a1c5c:	2800      	cmp	r0, #0
 80a1c5e:	d0e6      	beq.n	80a1c2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
 80a1c60:	4669      	mov	r1, sp
 80a1c62:	a803      	add	r0, sp, #12
 80a1c64:	f7fe fb01 	bl	80a026a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a1c68:	4631      	mov	r1, r6
 80a1c6a:	aa03      	add	r2, sp, #12
 80a1c6c:	4628      	mov	r0, r5
 80a1c6e:	f7ff ffa1 	bl	80a1bb4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a1c72:	a803      	add	r0, sp, #12
 80a1c74:	f7fe fab8 	bl	80a01e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a1c78:	4b06      	ldr	r3, [pc, #24]	; (80a1c94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
 80a1c7a:	622c      	str	r4, [r5, #32]
 80a1c7c:	602b      	str	r3, [r5, #0]
}
 80a1c7e:	e7d6      	b.n	80a1c2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
 80a1c80:	2400      	movs	r4, #0
 80a1c82:	e7d8      	b.n	80a1c36 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
 80a1c84:	080a36b3 	.word	0x080a36b3
 80a1c88:	080a3880 	.word	0x080a3880
 80a1c8c:	080a374c 	.word	0x080a374c
 80a1c90:	080a36b7 	.word	0x080a36b7
 80a1c94:	080a3734 	.word	0x080a3734

080a1c98 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 80a1c98:	4b01      	ldr	r3, [pc, #4]	; (80a1ca0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1c9a:	4a02      	ldr	r2, [pc, #8]	; (80a1ca4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1c9c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1c9e:	4770      	bx	lr
 80a1ca0:	200000b4 	.word	0x200000b4
 80a1ca4:	080a36c8 	.word	0x080a36c8

080a1ca8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1cac:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 80a1cae:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1cb2:	4604      	mov	r4, r0
 80a1cb4:	460e      	mov	r6, r1
 80a1cb6:	4617      	mov	r7, r2
 80a1cb8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 80a1cba:	f000 fc3f 	bl	80a253c <_Z16_fetch_usbserialv>
 80a1cbe:	4581      	cmp	r9, r0
 80a1cc0:	d04d      	beq.n	80a1d5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 80a1cc2:	792b      	ldrb	r3, [r5, #4]
 80a1cc4:	0719      	lsls	r1, r3, #28
 80a1cc6:	d504      	bpl.n	80a1cd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 80a1cc8:	4620      	mov	r0, r4
 80a1cca:	696a      	ldr	r2, [r5, #20]
 80a1ccc:	4954      	ldr	r1, [pc, #336]	; (80a1e20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a1cce:	f7ff fa2b 	bl	80a1128 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 80a1cd2:	f1b8 0f00 	cmp.w	r8, #0
 80a1cd6:	d00d      	beq.n	80a1cf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 80a1cd8:	215b      	movs	r1, #91	; 0x5b
 80a1cda:	4620      	mov	r0, r4
 80a1cdc:	f7ff fa18 	bl	80a1110 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a1ce0:	4641      	mov	r1, r8
 80a1ce2:	4620      	mov	r0, r4
 80a1ce4:	f7ff fa06 	bl	80a10f4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a1ce8:	6823      	ldr	r3, [r4, #0]
 80a1cea:	2202      	movs	r2, #2
 80a1cec:	4620      	mov	r0, r4
 80a1cee:	68db      	ldr	r3, [r3, #12]
 80a1cf0:	494c      	ldr	r1, [pc, #304]	; (80a1e24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a1cf2:	4798      	blx	r3
    if (attr.has_file) {
 80a1cf4:	792b      	ldrb	r3, [r5, #4]
 80a1cf6:	07da      	lsls	r2, r3, #31
 80a1cf8:	d524      	bpl.n	80a1d44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 80a1cfa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 80a1cfe:	212f      	movs	r1, #47	; 0x2f
 80a1d00:	4640      	mov	r0, r8
 80a1d02:	f001 fbda 	bl	80a34ba <strrchr>
    if (s1) {
 80a1d06:	b108      	cbz	r0, 80a1d0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 80a1d08:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 80a1d0c:	4641      	mov	r1, r8
 80a1d0e:	4620      	mov	r0, r4
 80a1d10:	f7ff f9f0 	bl	80a10f4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a1d14:	792b      	ldrb	r3, [r5, #4]
 80a1d16:	079b      	lsls	r3, r3, #30
 80a1d18:	d508      	bpl.n	80a1d2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 80a1d1a:	213a      	movs	r1, #58	; 0x3a
 80a1d1c:	4620      	mov	r0, r4
 80a1d1e:	f7ff f9f7 	bl	80a1110 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 80a1d22:	4620      	mov	r0, r4
 80a1d24:	68ea      	ldr	r2, [r5, #12]
 80a1d26:	4940      	ldr	r1, [pc, #256]	; (80a1e28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a1d28:	f7ff f9fe 	bl	80a1128 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 80a1d2c:	792a      	ldrb	r2, [r5, #4]
 80a1d2e:	6823      	ldr	r3, [r4, #0]
 80a1d30:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 80a1d34:	4620      	mov	r0, r4
            write(", ", 2);
 80a1d36:	f04f 0202 	mov.w	r2, #2
 80a1d3a:	68db      	ldr	r3, [r3, #12]
 80a1d3c:	bf14      	ite	ne
 80a1d3e:	493b      	ldrne	r1, [pc, #236]	; (80a1e2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 80a1d40:	493b      	ldreq	r1, [pc, #236]	; (80a1e30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a1d42:	4798      	blx	r3
    if (attr.has_function) {
 80a1d44:	792b      	ldrb	r3, [r5, #4]
 80a1d46:	0758      	lsls	r0, r3, #29
 80a1d48:	d51d      	bpl.n	80a1d86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1d4a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a1d4c:	460b      	mov	r3, r1
 80a1d4e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 80a1d50:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a1d54:	b160      	cbz	r0, 80a1d70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 80a1d56:	2820      	cmp	r0, #32
 80a1d58:	d108      	bne.n	80a1d6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 80a1d5a:	4619      	mov	r1, r3
 80a1d5c:	e7f7      	b.n	80a1d4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 80a1d5e:	4835      	ldr	r0, [pc, #212]	; (80a1e34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a1d60:	f000 f967 	bl	80a2032 <_ZN5spark12NetworkClass9listeningEv>
 80a1d64:	2800      	cmp	r0, #0
 80a1d66:	d0ac      	beq.n	80a1cc2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 80a1d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 80a1d6c:	2828      	cmp	r0, #40	; 0x28
 80a1d6e:	d1ee      	bne.n	80a1d4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 80a1d70:	6823      	ldr	r3, [r4, #0]
 80a1d72:	1a52      	subs	r2, r2, r1
 80a1d74:	4620      	mov	r0, r4
 80a1d76:	68db      	ldr	r3, [r3, #12]
 80a1d78:	4798      	blx	r3
        write("(): ", 4);
 80a1d7a:	6823      	ldr	r3, [r4, #0]
 80a1d7c:	2204      	movs	r2, #4
 80a1d7e:	4620      	mov	r0, r4
 80a1d80:	68db      	ldr	r3, [r3, #12]
 80a1d82:	492d      	ldr	r1, [pc, #180]	; (80a1e38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a1d84:	4798      	blx	r3
    return log_level_name(level, nullptr);
 80a1d86:	2100      	movs	r1, #0
 80a1d88:	4638      	mov	r0, r7
 80a1d8a:	f7fe fd71 	bl	80a0870 <log_level_name>
 80a1d8e:	4601      	mov	r1, r0
    write(s);
 80a1d90:	4620      	mov	r0, r4
 80a1d92:	f7ff f9af 	bl	80a10f4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a1d96:	6823      	ldr	r3, [r4, #0]
 80a1d98:	2202      	movs	r2, #2
 80a1d9a:	4620      	mov	r0, r4
 80a1d9c:	68db      	ldr	r3, [r3, #12]
 80a1d9e:	4924      	ldr	r1, [pc, #144]	; (80a1e30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a1da0:	4798      	blx	r3
    if (msg) {
 80a1da2:	b11e      	cbz	r6, 80a1dac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 80a1da4:	4631      	mov	r1, r6
 80a1da6:	4620      	mov	r0, r4
 80a1da8:	f7ff f9a4 	bl	80a10f4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 80a1dac:	792b      	ldrb	r3, [r5, #4]
 80a1dae:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a1db2:	d02c      	beq.n	80a1e0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 80a1db4:	6823      	ldr	r3, [r4, #0]
 80a1db6:	4921      	ldr	r1, [pc, #132]	; (80a1e3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a1db8:	68db      	ldr	r3, [r3, #12]
 80a1dba:	2202      	movs	r2, #2
 80a1dbc:	4620      	mov	r0, r4
 80a1dbe:	4798      	blx	r3
        if (attr.has_code) {
 80a1dc0:	792b      	ldrb	r3, [r5, #4]
 80a1dc2:	06d9      	lsls	r1, r3, #27
 80a1dc4:	d50a      	bpl.n	80a1ddc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 80a1dc6:	6823      	ldr	r3, [r4, #0]
 80a1dc8:	2207      	movs	r2, #7
 80a1dca:	4620      	mov	r0, r4
 80a1dcc:	491c      	ldr	r1, [pc, #112]	; (80a1e40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a1dce:	68db      	ldr	r3, [r3, #12]
 80a1dd0:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 80a1dd2:	4620      	mov	r0, r4
 80a1dd4:	69aa      	ldr	r2, [r5, #24]
 80a1dd6:	491b      	ldr	r1, [pc, #108]	; (80a1e44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a1dd8:	f7ff f9a6 	bl	80a1128 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 80a1ddc:	792b      	ldrb	r3, [r5, #4]
 80a1dde:	069a      	lsls	r2, r3, #26
 80a1de0:	d511      	bpl.n	80a1e06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 80a1de2:	06db      	lsls	r3, r3, #27
 80a1de4:	d505      	bpl.n	80a1df2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 80a1de6:	6823      	ldr	r3, [r4, #0]
 80a1de8:	2202      	movs	r2, #2
 80a1dea:	4620      	mov	r0, r4
 80a1dec:	68db      	ldr	r3, [r3, #12]
 80a1dee:	490f      	ldr	r1, [pc, #60]	; (80a1e2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a1df0:	4798      	blx	r3
            write("details = ", 10);
 80a1df2:	6823      	ldr	r3, [r4, #0]
 80a1df4:	4620      	mov	r0, r4
 80a1df6:	4914      	ldr	r1, [pc, #80]	; (80a1e48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a1df8:	220a      	movs	r2, #10
 80a1dfa:	68db      	ldr	r3, [r3, #12]
 80a1dfc:	4798      	blx	r3
            write(attr.details);
 80a1dfe:	4620      	mov	r0, r4
 80a1e00:	69e9      	ldr	r1, [r5, #28]
 80a1e02:	f7ff f977 	bl	80a10f4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 80a1e06:	215d      	movs	r1, #93	; 0x5d
 80a1e08:	4620      	mov	r0, r4
 80a1e0a:	f7ff f981 	bl	80a1110 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 80a1e0e:	6823      	ldr	r3, [r4, #0]
 80a1e10:	4620      	mov	r0, r4
}
 80a1e12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 80a1e16:	2202      	movs	r2, #2
 80a1e18:	68db      	ldr	r3, [r3, #12]
 80a1e1a:	490c      	ldr	r1, [pc, #48]	; (80a1e4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a1e1c:	4718      	bx	r3
 80a1e1e:	bf00      	nop
 80a1e20:	080a36cc 	.word	0x080a36cc
 80a1e24:	080a36d3 	.word	0x080a36d3
 80a1e28:	080a3690 	.word	0x080a3690
 80a1e2c:	080a36d6 	.word	0x080a36d6
 80a1e30:	080a36db 	.word	0x080a36db
 80a1e34:	200000e0 	.word	0x200000e0
 80a1e38:	080a36d9 	.word	0x080a36d9
 80a1e3c:	080a36de 	.word	0x080a36de
 80a1e40:	080a36e1 	.word	0x080a36e1
 80a1e44:	080a36e9 	.word	0x080a36e9
 80a1e48:	080a36ec 	.word	0x080a36ec
 80a1e4c:	080a36f7 	.word	0x080a36f7

080a1e50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1e54:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
 80a1e56:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1e5a:	4605      	mov	r5, r0
 80a1e5c:	460f      	mov	r7, r1
 80a1e5e:	4690      	mov	r8, r2
 80a1e60:	461e      	mov	r6, r3
 80a1e62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 80a1e64:	f000 fb6a 	bl	80a253c <_Z16_fetch_usbserialv>
 80a1e68:	4581      	cmp	r9, r0
 80a1e6a:	d105      	bne.n	80a1e78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a1e6c:	4849      	ldr	r0, [pc, #292]	; (80a1f94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a1e6e:	f000 f8e0 	bl	80a2032 <_ZN5spark12NetworkClass9listeningEv>
 80a1e72:	2800      	cmp	r0, #0
 80a1e74:	f040 808a 	bne.w	80a1f8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 80a1e78:	f04f 0900 	mov.w	r9, #0
    JSONStreamWriter json(*this->stream());
 80a1e7c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 80a1e7e:	4a46      	ldr	r2, [pc, #280]	; (80a1f98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 80a1e80:	a801      	add	r0, sp, #4
 80a1e82:	9201      	str	r2, [sp, #4]
 80a1e84:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 80a1e86:	f88d 9008 	strb.w	r9, [sp, #8]
 80a1e8a:	f7ff f81e 	bl	80a0eca <_ZN5spark10JSONWriter11beginObjectEv>
 80a1e8e:	4649      	mov	r1, r9
 80a1e90:	4640      	mov	r0, r8
 80a1e92:	f7fe fced 	bl	80a0870 <log_level_name>
 80a1e96:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 80a1e98:	4940      	ldr	r1, [pc, #256]	; (80a1f9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a1e9a:	2201      	movs	r2, #1
 80a1e9c:	a801      	add	r0, sp, #4
 80a1e9e:	f7ff f89d 	bl	80a0fdc <_ZN5spark10JSONWriter4nameEPKcj>
 80a1ea2:	4641      	mov	r1, r8
 80a1ea4:	f7ff f919 	bl	80a10da <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 80a1ea8:	b13f      	cbz	r7, 80a1eba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a1eaa:	493d      	ldr	r1, [pc, #244]	; (80a1fa0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a1eac:	2201      	movs	r2, #1
 80a1eae:	a801      	add	r0, sp, #4
 80a1eb0:	f7ff f894 	bl	80a0fdc <_ZN5spark10JSONWriter4nameEPKcj>
 80a1eb4:	4639      	mov	r1, r7
 80a1eb6:	f7ff f910 	bl	80a10da <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 80a1eba:	b13e      	cbz	r6, 80a1ecc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a1ebc:	4939      	ldr	r1, [pc, #228]	; (80a1fa4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a1ebe:	2201      	movs	r2, #1
 80a1ec0:	a801      	add	r0, sp, #4
 80a1ec2:	f7ff f88b 	bl	80a0fdc <_ZN5spark10JSONWriter4nameEPKcj>
 80a1ec6:	4631      	mov	r1, r6
 80a1ec8:	f7ff f907 	bl	80a10da <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 80a1ecc:	7923      	ldrb	r3, [r4, #4]
 80a1ece:	07df      	lsls	r7, r3, #31
 80a1ed0:	d50e      	bpl.n	80a1ef0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a1ed2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 80a1ed4:	212f      	movs	r1, #47	; 0x2f
 80a1ed6:	4630      	mov	r0, r6
 80a1ed8:	f001 faef 	bl	80a34ba <strrchr>
    if (s1) {
 80a1edc:	b100      	cbz	r0, 80a1ee0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a1ede:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 80a1ee0:	4931      	ldr	r1, [pc, #196]	; (80a1fa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a1ee2:	2201      	movs	r2, #1
 80a1ee4:	a801      	add	r0, sp, #4
 80a1ee6:	f7ff f879 	bl	80a0fdc <_ZN5spark10JSONWriter4nameEPKcj>
 80a1eea:	4631      	mov	r1, r6
 80a1eec:	f7ff f8f5 	bl	80a10da <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 80a1ef0:	7923      	ldrb	r3, [r4, #4]
 80a1ef2:	079e      	lsls	r6, r3, #30
 80a1ef4:	d507      	bpl.n	80a1f06 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a1ef6:	492d      	ldr	r1, [pc, #180]	; (80a1fac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a1ef8:	2202      	movs	r2, #2
 80a1efa:	a801      	add	r0, sp, #4
 80a1efc:	f7ff f86e 	bl	80a0fdc <_ZN5spark10JSONWriter4nameEPKcj>
 80a1f00:	68e1      	ldr	r1, [r4, #12]
 80a1f02:	f7fe ffef 	bl	80a0ee4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 80a1f06:	7923      	ldrb	r3, [r4, #4]
 80a1f08:	0758      	lsls	r0, r3, #29
 80a1f0a:	d514      	bpl.n	80a1f36 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1f0c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 80a1f0e:	4633      	mov	r3, r6
 80a1f10:	461f      	mov	r7, r3
    for (; *s; ++s) {
 80a1f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1f16:	b12a      	cbz	r2, 80a1f24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 80a1f18:	2a20      	cmp	r2, #32
 80a1f1a:	d101      	bne.n	80a1f20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a1f1c:	461e      	mov	r6, r3
 80a1f1e:	e7f7      	b.n	80a1f10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 80a1f20:	2a28      	cmp	r2, #40	; 0x28
 80a1f22:	d1f5      	bne.n	80a1f10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 80a1f24:	2202      	movs	r2, #2
 80a1f26:	4922      	ldr	r1, [pc, #136]	; (80a1fb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a1f28:	a801      	add	r0, sp, #4
 80a1f2a:	f7ff f857 	bl	80a0fdc <_ZN5spark10JSONWriter4nameEPKcj>
 80a1f2e:	4631      	mov	r1, r6
 80a1f30:	1bba      	subs	r2, r7, r6
 80a1f32:	f7ff f862 	bl	80a0ffa <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 80a1f36:	7923      	ldrb	r3, [r4, #4]
 80a1f38:	0719      	lsls	r1, r3, #28
 80a1f3a:	d507      	bpl.n	80a1f4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 80a1f3c:	491d      	ldr	r1, [pc, #116]	; (80a1fb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a1f3e:	2201      	movs	r2, #1
 80a1f40:	a801      	add	r0, sp, #4
 80a1f42:	f7ff f84b 	bl	80a0fdc <_ZN5spark10JSONWriter4nameEPKcj>
 80a1f46:	6961      	ldr	r1, [r4, #20]
 80a1f48:	f7fe ffde 	bl	80a0f08 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 80a1f4c:	7923      	ldrb	r3, [r4, #4]
 80a1f4e:	06da      	lsls	r2, r3, #27
 80a1f50:	d508      	bpl.n	80a1f64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 80a1f52:	2204      	movs	r2, #4
 80a1f54:	4918      	ldr	r1, [pc, #96]	; (80a1fb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a1f56:	eb0d 0002 	add.w	r0, sp, r2
 80a1f5a:	f7ff f83f 	bl	80a0fdc <_ZN5spark10JSONWriter4nameEPKcj>
 80a1f5e:	69a1      	ldr	r1, [r4, #24]
 80a1f60:	f7fe ffc0 	bl	80a0ee4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 80a1f64:	7923      	ldrb	r3, [r4, #4]
 80a1f66:	069b      	lsls	r3, r3, #26
 80a1f68:	d507      	bpl.n	80a1f7a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 80a1f6a:	4914      	ldr	r1, [pc, #80]	; (80a1fbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a1f6c:	2206      	movs	r2, #6
 80a1f6e:	a801      	add	r0, sp, #4
 80a1f70:	f7ff f834 	bl	80a0fdc <_ZN5spark10JSONWriter4nameEPKcj>
 80a1f74:	69e1      	ldr	r1, [r4, #28]
 80a1f76:	f7ff f8b0 	bl	80a10da <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 80a1f7a:	a801      	add	r0, sp, #4
 80a1f7c:	f7fe ff8f 	bl	80a0e9e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a1f80:	6a28      	ldr	r0, [r5, #32]
 80a1f82:	2202      	movs	r2, #2
 80a1f84:	6803      	ldr	r3, [r0, #0]
 80a1f86:	490e      	ldr	r1, [pc, #56]	; (80a1fc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a1f88:	68db      	ldr	r3, [r3, #12]
 80a1f8a:	4798      	blx	r3
}
 80a1f8c:	b005      	add	sp, #20
 80a1f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1f92:	bf00      	nop
 80a1f94:	200000e0 	.word	0x200000e0
 80a1f98:	080a371c 	.word	0x080a371c
 80a1f9c:	080a36a6 	.word	0x080a36a6
 80a1fa0:	080a36fa 	.word	0x080a36fa
 80a1fa4:	080a36fc 	.word	0x080a36fc
 80a1fa8:	080a3620 	.word	0x080a3620
 80a1fac:	080a36fe 	.word	0x080a36fe
 80a1fb0:	080a3701 	.word	0x080a3701
 80a1fb4:	080a3704 	.word	0x080a3704
 80a1fb8:	080a3706 	.word	0x080a3706
 80a1fbc:	080a370b 	.word	0x080a370b
 80a1fc0:	080a36f7 	.word	0x080a36f7

080a1fc4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1fc4:	2300      	movs	r3, #0
 80a1fc6:	6840      	ldr	r0, [r0, #4]
 80a1fc8:	461a      	mov	r2, r3
 80a1fca:	f7fe bc8d 	b.w	80a08e8 <network_connect>

080a1fce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1fce:	2200      	movs	r2, #0
 80a1fd0:	2102      	movs	r1, #2
 80a1fd2:	6840      	ldr	r0, [r0, #4]
 80a1fd4:	f7fe bc98 	b.w	80a0908 <network_disconnect>

080a1fd8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1fd8:	2200      	movs	r2, #0
 80a1fda:	6840      	ldr	r0, [r0, #4]
 80a1fdc:	4611      	mov	r1, r2
 80a1fde:	f7fe bc8b 	b.w	80a08f8 <network_connecting>

080a1fe2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1fe2:	2200      	movs	r2, #0
 80a1fe4:	6840      	ldr	r0, [r0, #4]
 80a1fe6:	4611      	mov	r1, r2
 80a1fe8:	f7fe bc96 	b.w	80a0918 <network_ready>

080a1fec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1fec:	2300      	movs	r3, #0
 80a1fee:	6840      	ldr	r0, [r0, #4]
 80a1ff0:	461a      	mov	r2, r3
 80a1ff2:	4619      	mov	r1, r3
 80a1ff4:	f7fe bc98 	b.w	80a0928 <network_on>

080a1ff8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1ff8:	2300      	movs	r3, #0
 80a1ffa:	6840      	ldr	r0, [r0, #4]
 80a1ffc:	461a      	mov	r2, r3
 80a1ffe:	4619      	mov	r1, r3
 80a2000:	f7fe bc9a 	b.w	80a0938 <network_off>

080a2004 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2004:	2100      	movs	r1, #0
 80a2006:	6840      	ldr	r0, [r0, #4]
 80a2008:	f7fe bcbe 	b.w	80a0988 <network_is_on>

080a200c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a200c:	2100      	movs	r1, #0
 80a200e:	6840      	ldr	r0, [r0, #4]
 80a2010:	f7fe bcc2 	b.w	80a0998 <network_is_off>

080a2014 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2014:	2200      	movs	r2, #0
 80a2016:	6840      	ldr	r0, [r0, #4]
 80a2018:	f081 0101 	eor.w	r1, r1, #1
 80a201c:	f7fe bc94 	b.w	80a0948 <network_listen>

080a2020 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2020:	2200      	movs	r2, #0
 80a2022:	6840      	ldr	r0, [r0, #4]
 80a2024:	f7fe bca0 	b.w	80a0968 <network_set_listen_timeout>

080a2028 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2028:	2200      	movs	r2, #0
 80a202a:	6840      	ldr	r0, [r0, #4]
 80a202c:	4611      	mov	r1, r2
 80a202e:	f7fe bca3 	b.w	80a0978 <network_get_listen_timeout>

080a2032 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2032:	2200      	movs	r2, #0
 80a2034:	6840      	ldr	r0, [r0, #4]
 80a2036:	4611      	mov	r1, r2
 80a2038:	f7fe bc8e 	b.w	80a0958 <network_listening>

080a203c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a203c:	b570      	push	{r4, r5, r6, lr}
 80a203e:	4615      	mov	r5, r2
 80a2040:	b08e      	sub	sp, #56	; 0x38
 80a2042:	4604      	mov	r4, r0
    IPAddress addr;
 80a2044:	a808      	add	r0, sp, #32
 80a2046:	f7fe fdbd 	bl	80a0bc4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a204a:	2211      	movs	r2, #17
 80a204c:	2100      	movs	r1, #0
 80a204e:	a803      	add	r0, sp, #12
 80a2050:	f001 f9c4 	bl	80a33dc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2054:	2600      	movs	r6, #0
 80a2056:	4628      	mov	r0, r5
 80a2058:	f001 fa15 	bl	80a3486 <strlen>
 80a205c:	4b0a      	ldr	r3, [pc, #40]	; (80a2088 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a205e:	9600      	str	r6, [sp, #0]
 80a2060:	b281      	uxth	r1, r0
 80a2062:	685b      	ldr	r3, [r3, #4]
 80a2064:	4628      	mov	r0, r5
 80a2066:	aa03      	add	r2, sp, #12
 80a2068:	f7fe fbea 	bl	80a0840 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a206c:	b130      	cbz	r0, 80a207c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a206e:	4631      	mov	r1, r6
 80a2070:	4620      	mov	r0, r4
 80a2072:	f7fe fdc7 	bl	80a0c04 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2076:	4620      	mov	r0, r4
 80a2078:	b00e      	add	sp, #56	; 0x38
 80a207a:	bd70      	pop	{r4, r5, r6, pc}
 80a207c:	4620      	mov	r0, r4
 80a207e:	a903      	add	r1, sp, #12
 80a2080:	f7fe fdae 	bl	80a0be0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2084:	e7f7      	b.n	80a2076 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2086:	bf00      	nop
 80a2088:	20000560 	.word	0x20000560

080a208c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a208c:	4b02      	ldr	r3, [pc, #8]	; (80a2098 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a208e:	4a03      	ldr	r2, [pc, #12]	; (80a209c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2090:	601a      	str	r2, [r3, #0]
 80a2092:	2200      	movs	r2, #0
 80a2094:	605a      	str	r2, [r3, #4]

} // spark
 80a2096:	4770      	bx	lr
 80a2098:	200000e0 	.word	0x200000e0
 80a209c:	080a3794 	.word	0x080a3794

080a20a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a20a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20a2:	4606      	mov	r6, r0
 80a20a4:	460d      	mov	r5, r1
  size_t n = 0;
 80a20a6:	2400      	movs	r4, #0
 80a20a8:	188f      	adds	r7, r1, r2
  while (size--) {
 80a20aa:	42bd      	cmp	r5, r7
 80a20ac:	d00c      	beq.n	80a20c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a20ae:	6833      	ldr	r3, [r6, #0]
 80a20b0:	4630      	mov	r0, r6
 80a20b2:	689b      	ldr	r3, [r3, #8]
 80a20b4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a20b8:	4798      	blx	r3
     if (chunk>=0)
 80a20ba:	1e03      	subs	r3, r0, #0
 80a20bc:	db01      	blt.n	80a20c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a20be:	441c      	add	r4, r3
  while (size--) {
 80a20c0:	e7f3      	b.n	80a20aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a20c2:	2c00      	cmp	r4, #0
 80a20c4:	bf08      	it	eq
 80a20c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a20c8:	4620      	mov	r0, r4
 80a20ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a20cc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80a20cc:	b570      	push	{r4, r5, r6, lr}
 80a20ce:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a20d0:	460c      	mov	r4, r1
    }
 80a20d2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a20d4:	b149      	cbz	r1, 80a20ea <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a20d6:	f001 f9d6 	bl	80a3486 <strlen>
 80a20da:	682b      	ldr	r3, [r5, #0]
 80a20dc:	4602      	mov	r2, r0
 80a20de:	4621      	mov	r1, r4
 80a20e0:	4628      	mov	r0, r5
    }
 80a20e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a20e6:	68db      	ldr	r3, [r3, #12]
 80a20e8:	4718      	bx	r3
    }
 80a20ea:	bd70      	pop	{r4, r5, r6, pc}

080a20ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a20ec:	6803      	ldr	r3, [r0, #0]
 80a20ee:	689b      	ldr	r3, [r3, #8]
 80a20f0:	4718      	bx	r3

080a20f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a20f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a20f4:	210d      	movs	r1, #13
{
 80a20f6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a20f8:	f7ff fff8 	bl	80a20ec <_ZN5Print5printEc>
  n += print('\n');
 80a20fc:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a20fe:	4604      	mov	r4, r0
  n += print('\n');
 80a2100:	4628      	mov	r0, r5
 80a2102:	f7ff fff3 	bl	80a20ec <_ZN5Print5printEc>
  return n;
}
 80a2106:	4420      	add	r0, r4
 80a2108:	bd38      	pop	{r3, r4, r5, pc}

080a210a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a210a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a210c:	2a01      	cmp	r2, #1
 80a210e:	bf98      	it	ls
 80a2110:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2112:	b530      	push	{r4, r5, lr}
 80a2114:	b08b      	sub	sp, #44	; 0x2c
 80a2116:	460c      	mov	r4, r1
  *str = '\0';
 80a2118:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a211c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a211e:	4625      	mov	r5, r4
 80a2120:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a2124:	fb04 5312 	mls	r3, r4, r2, r5
 80a2128:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a212a:	2b09      	cmp	r3, #9
 80a212c:	bf94      	ite	ls
 80a212e:	3330      	addls	r3, #48	; 0x30
 80a2130:	3337      	addhi	r3, #55	; 0x37
 80a2132:	b2db      	uxtb	r3, r3
  } while(n);
 80a2134:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2136:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a213a:	d9f0      	bls.n	80a211e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a213c:	f7ff ffc6 	bl	80a20cc <_ZN5Print5writeEPKc>
}
 80a2140:	b00b      	add	sp, #44	; 0x2c
 80a2142:	bd30      	pop	{r4, r5, pc}

080a2144 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80a2144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2148:	b086      	sub	sp, #24
 80a214a:	af00      	add	r7, sp, #0
 80a214c:	4605      	mov	r5, r0
 80a214e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2150:	1d38      	adds	r0, r7, #4
 80a2152:	2114      	movs	r1, #20
{
 80a2154:	4614      	mov	r4, r2
    va_copy(args2, args);
 80a2156:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80a2158:	f7fe fc3e 	bl	80a09d8 <vsnprintf>

    if (n<bufsize)
 80a215c:	2813      	cmp	r0, #19
 80a215e:	d80e      	bhi.n	80a217e <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80a2160:	4628      	mov	r0, r5
 80a2162:	1d39      	adds	r1, r7, #4
 80a2164:	f7ff ffb2 	bl	80a20cc <_ZN5Print5writeEPKc>
 80a2168:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80a216a:	b11e      	cbz	r6, 80a2174 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80a216c:	4628      	mov	r0, r5
 80a216e:	f7ff ffc0 	bl	80a20f2 <_ZN5Print7printlnEv>
 80a2172:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80a2174:	4620      	mov	r0, r4
 80a2176:	3718      	adds	r7, #24
 80a2178:	46bd      	mov	sp, r7
 80a217a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 80a217e:	f100 0308 	add.w	r3, r0, #8
 80a2182:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 80a2186:	46e8      	mov	r8, sp
        char bigger[n+1];
 80a2188:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80a218c:	4622      	mov	r2, r4
 80a218e:	1c41      	adds	r1, r0, #1
 80a2190:	683b      	ldr	r3, [r7, #0]
 80a2192:	4668      	mov	r0, sp
 80a2194:	f7fe fc20 	bl	80a09d8 <vsnprintf>
  return write(str);
 80a2198:	4669      	mov	r1, sp
 80a219a:	4628      	mov	r0, r5
 80a219c:	f7ff ff96 	bl	80a20cc <_ZN5Print5writeEPKc>
 80a21a0:	4604      	mov	r4, r0
 80a21a2:	46c5      	mov	sp, r8
 80a21a4:	e7e1      	b.n	80a216a <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080a21a6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a21a6:	b510      	push	{r4, lr}
 80a21a8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a21aa:	f7fe fc28 	bl	80a09fe <_ZNSt14_Function_baseD1Ev>
 80a21ae:	4620      	mov	r0, r4
 80a21b0:	bd10      	pop	{r4, pc}
	...

080a21b4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a21b4:	2300      	movs	r3, #0
 80a21b6:	4803      	ldr	r0, [pc, #12]	; (80a21c4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a21b8:	4a03      	ldr	r2, [pc, #12]	; (80a21c8 <_GLOBAL__sub_I_RGB+0x14>)
 80a21ba:	4904      	ldr	r1, [pc, #16]	; (80a21cc <_GLOBAL__sub_I_RGB+0x18>)
 80a21bc:	6083      	str	r3, [r0, #8]
 80a21be:	f000 bb81 	b.w	80a28c4 <__aeabi_atexit>
 80a21c2:	bf00      	nop
 80a21c4:	200000e8 	.word	0x200000e8
 80a21c8:	20000070 	.word	0x20000070
 80a21cc:	080a21a7 	.word	0x080a21a7

080a21d0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a21d0:	b510      	push	{r4, lr}
 80a21d2:	4604      	mov	r4, r0
{
	free(buffer);
 80a21d4:	6800      	ldr	r0, [r0, #0]
 80a21d6:	f7fe fbef 	bl	80a09b8 <free>
}
 80a21da:	4620      	mov	r0, r4
 80a21dc:	bd10      	pop	{r4, pc}

080a21de <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a21de:	b510      	push	{r4, lr}
 80a21e0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a21e2:	6800      	ldr	r0, [r0, #0]
 80a21e4:	b108      	cbz	r0, 80a21ea <_ZN6String10invalidateEv+0xc>
 80a21e6:	f7fe fbe7 	bl	80a09b8 <free>
	buffer = NULL;
 80a21ea:	2300      	movs	r3, #0
	capacity = len = 0;
 80a21ec:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a21f0:	6023      	str	r3, [r4, #0]
}
 80a21f2:	bd10      	pop	{r4, pc}

080a21f4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a21f4:	b538      	push	{r3, r4, r5, lr}
 80a21f6:	4604      	mov	r4, r0
 80a21f8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a21fa:	6800      	ldr	r0, [r0, #0]
 80a21fc:	3101      	adds	r1, #1
 80a21fe:	f7fe fbe3 	bl	80a09c8 <realloc>
	if (newbuffer) {
 80a2202:	b110      	cbz	r0, 80a220a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2204:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a2208:	2001      	movs	r0, #1
	}
	return 0;
}
 80a220a:	bd38      	pop	{r3, r4, r5, pc}

080a220c <_ZN6String7reserveEj>:
{
 80a220c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a220e:	6803      	ldr	r3, [r0, #0]
{
 80a2210:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2212:	b123      	cbz	r3, 80a221e <_ZN6String7reserveEj+0x12>
 80a2214:	6843      	ldr	r3, [r0, #4]
 80a2216:	428b      	cmp	r3, r1
 80a2218:	d301      	bcc.n	80a221e <_ZN6String7reserveEj+0x12>
 80a221a:	2001      	movs	r0, #1
}
 80a221c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a221e:	4620      	mov	r0, r4
 80a2220:	f7ff ffe8 	bl	80a21f4 <_ZN6String12changeBufferEj>
 80a2224:	2800      	cmp	r0, #0
 80a2226:	d0f9      	beq.n	80a221c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a2228:	68a3      	ldr	r3, [r4, #8]
 80a222a:	2b00      	cmp	r3, #0
 80a222c:	d1f5      	bne.n	80a221a <_ZN6String7reserveEj+0xe>
 80a222e:	6822      	ldr	r2, [r4, #0]
 80a2230:	7013      	strb	r3, [r2, #0]
 80a2232:	e7f2      	b.n	80a221a <_ZN6String7reserveEj+0xe>

080a2234 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2234:	b570      	push	{r4, r5, r6, lr}
 80a2236:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2238:	4611      	mov	r1, r2
{
 80a223a:	4604      	mov	r4, r0
 80a223c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a223e:	f7ff ffe5 	bl	80a220c <_ZN6String7reserveEj>
 80a2242:	b920      	cbnz	r0, 80a224e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2244:	4620      	mov	r0, r4
 80a2246:	f7ff ffca 	bl	80a21de <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a224a:	4620      	mov	r0, r4
 80a224c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a224e:	462a      	mov	r2, r5
 80a2250:	4631      	mov	r1, r6
 80a2252:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2254:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2256:	f001 f899 	bl	80a338c <memcpy>
	buffer[len] = 0;
 80a225a:	2100      	movs	r1, #0
 80a225c:	6822      	ldr	r2, [r4, #0]
 80a225e:	68a3      	ldr	r3, [r4, #8]
 80a2260:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2262:	e7f2      	b.n	80a224a <_ZN6String4copyEPKcj+0x16>

080a2264 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a2264:	b538      	push	{r3, r4, r5, lr}
 80a2266:	4605      	mov	r5, r0
	if (buffer) {
 80a2268:	6800      	ldr	r0, [r0, #0]
{
 80a226a:	460c      	mov	r4, r1
	if (buffer) {
 80a226c:	b168      	cbz	r0, 80a228a <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a226e:	686a      	ldr	r2, [r5, #4]
 80a2270:	688b      	ldr	r3, [r1, #8]
 80a2272:	429a      	cmp	r2, r3
 80a2274:	d307      	bcc.n	80a2286 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a2276:	6809      	ldr	r1, [r1, #0]
 80a2278:	f001 f8fd 	bl	80a3476 <strcpy>
			len = rhs.len;
 80a227c:	68a3      	ldr	r3, [r4, #8]
 80a227e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a2280:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a2282:	60a3      	str	r3, [r4, #8]
}
 80a2284:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a2286:	f7fe fb97 	bl	80a09b8 <free>
	buffer = rhs.buffer;
 80a228a:	6823      	ldr	r3, [r4, #0]
 80a228c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a228e:	6863      	ldr	r3, [r4, #4]
 80a2290:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a2292:	68a3      	ldr	r3, [r4, #8]
 80a2294:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a2296:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a2298:	e9c4 3300 	strd	r3, r3, [r4]
 80a229c:	e7f1      	b.n	80a2282 <_ZN6String4moveERS_+0x1e>

080a229e <_ZN6StringC1EOS_>:
	buffer = NULL;
 80a229e:	2300      	movs	r3, #0
String::String(String &&rval)
 80a22a0:	b510      	push	{r4, lr}
 80a22a2:	4604      	mov	r4, r0
	capacity = 0;
 80a22a4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a22a8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a22aa:	7303      	strb	r3, [r0, #12]
	move(rval);
 80a22ac:	f7ff ffda 	bl	80a2264 <_ZN6String4moveERS_>
}
 80a22b0:	4620      	mov	r0, r4
 80a22b2:	bd10      	pop	{r4, pc}

080a22b4 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a22b4:	4288      	cmp	r0, r1
{
 80a22b6:	b510      	push	{r4, lr}
 80a22b8:	460b      	mov	r3, r1
 80a22ba:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a22bc:	d004      	beq.n	80a22c8 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a22be:	6809      	ldr	r1, [r1, #0]
 80a22c0:	b121      	cbz	r1, 80a22cc <_ZN6StringaSERKS_+0x18>
 80a22c2:	689a      	ldr	r2, [r3, #8]
 80a22c4:	f7ff ffb6 	bl	80a2234 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a22c8:	4620      	mov	r0, r4
 80a22ca:	bd10      	pop	{r4, pc}
	else invalidate();
 80a22cc:	f7ff ff87 	bl	80a21de <_ZN6String10invalidateEv>
 80a22d0:	e7fa      	b.n	80a22c8 <_ZN6StringaSERKS_+0x14>

080a22d2 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a22d2:	2300      	movs	r3, #0
String::String(const String &value)
 80a22d4:	b510      	push	{r4, lr}
 80a22d6:	4604      	mov	r4, r0
	capacity = 0;
 80a22d8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a22dc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a22de:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a22e0:	f7ff ffe8 	bl	80a22b4 <_ZN6StringaSERKS_>
}
 80a22e4:	4620      	mov	r0, r4
 80a22e6:	bd10      	pop	{r4, pc}

080a22e8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a22e8:	b510      	push	{r4, lr}
 80a22ea:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a22ec:	6800      	ldr	r0, [r0, #0]
 80a22ee:	b118      	cbz	r0, 80a22f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a22f0:	f7fe fb62 	bl	80a09b8 <free>
            wakeupSource_ = nullptr;
 80a22f4:	2300      	movs	r3, #0
 80a22f6:	6023      	str	r3, [r4, #0]
        }
    }
 80a22f8:	bd10      	pop	{r4, pc}

080a22fa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a22fa:	b510      	push	{r4, lr}
 80a22fc:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a22fe:	f7ff fff3 	bl	80a22e8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a2302:	4620      	mov	r0, r4
 80a2304:	bd10      	pop	{r4, pc}
	...

080a2308 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a2308:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a230a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a230c:	b510      	push	{r4, lr}
 80a230e:	4b08      	ldr	r3, [pc, #32]	; (80a2330 <_GLOBAL__sub_I_System+0x28>)
 80a2310:	4c08      	ldr	r4, [pc, #32]	; (80a2334 <_GLOBAL__sub_I_System+0x2c>)
 80a2312:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a2314:	4b08      	ldr	r3, [pc, #32]	; (80a2338 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a2316:	6020      	str	r0, [r4, #0]
 80a2318:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a231a:	71a0      	strb	r0, [r4, #6]
 80a231c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a231e:	f7fe fab7 	bl	80a0890 <set_system_mode>
SystemClass System;
 80a2322:	4620      	mov	r0, r4
 80a2324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a2328:	4a04      	ldr	r2, [pc, #16]	; (80a233c <_GLOBAL__sub_I_System+0x34>)
 80a232a:	4905      	ldr	r1, [pc, #20]	; (80a2340 <_GLOBAL__sub_I_System+0x38>)
 80a232c:	f000 baca 	b.w	80a28c4 <__aeabi_atexit>
 80a2330:	20000104 	.word	0x20000104
 80a2334:	200000f8 	.word	0x200000f8
 80a2338:	ffff0000 	.word	0xffff0000
 80a233c:	20000070 	.word	0x20000070
 80a2340:	080a22fb 	.word	0x080a22fb

080a2344 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2344:	4b02      	ldr	r3, [pc, #8]	; (80a2350 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2346:	681a      	ldr	r2, [r3, #0]
 80a2348:	4b02      	ldr	r3, [pc, #8]	; (80a2354 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a234a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a234c:	4770      	bx	lr
 80a234e:	bf00      	nop
 80a2350:	20000008 	.word	0x20000008
 80a2354:	20000108 	.word	0x20000108

080a2358 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a2358:	4770      	bx	lr

080a235a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a235a:	7441      	strb	r1, [r0, #17]
}
 80a235c:	4770      	bx	lr

080a235e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a235e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2360:	7c00      	ldrb	r0, [r0, #16]
 80a2362:	f7fe fa1d 	bl	80a07a0 <hal_usart_available_data_for_write>
}
 80a2366:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a236a:	bd08      	pop	{r3, pc}

080a236c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a236c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a236e:	7c00      	ldrb	r0, [r0, #16]
 80a2370:	f7fe f9f6 	bl	80a0760 <hal_usart_available>
}
 80a2374:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2378:	bd08      	pop	{r3, pc}

080a237a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a237a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a237c:	7c00      	ldrb	r0, [r0, #16]
 80a237e:	f7fe f9ff 	bl	80a0780 <hal_usart_peek>
}
 80a2382:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2386:	bd08      	pop	{r3, pc}

080a2388 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2388:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a238a:	7c00      	ldrb	r0, [r0, #16]
 80a238c:	f7fe f9f0 	bl	80a0770 <hal_usart_read>
}
 80a2390:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2394:	bd08      	pop	{r3, pc}

080a2396 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a2396:	7c00      	ldrb	r0, [r0, #16]
 80a2398:	f7fe b9fa 	b.w	80a0790 <hal_usart_flush>

080a239c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a239c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a239e:	7c46      	ldrb	r6, [r0, #17]
{
 80a23a0:	4604      	mov	r4, r0
 80a23a2:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a23a4:	b12e      	cbz	r6, 80a23b2 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a23a6:	4629      	mov	r1, r5
 80a23a8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a23aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a23ae:	f7fe b9cf 	b.w	80a0750 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a23b2:	7c00      	ldrb	r0, [r0, #16]
 80a23b4:	f7fe f9f4 	bl	80a07a0 <hal_usart_available_data_for_write>
 80a23b8:	2800      	cmp	r0, #0
 80a23ba:	dcf4      	bgt.n	80a23a6 <_ZN11USARTSerial5writeEh+0xa>
}
 80a23bc:	4630      	mov	r0, r6
 80a23be:	bd70      	pop	{r4, r5, r6, pc}

080a23c0 <_ZN11USARTSerialD0Ev>:
 80a23c0:	b510      	push	{r4, lr}
 80a23c2:	4604      	mov	r4, r0
 80a23c4:	2114      	movs	r1, #20
 80a23c6:	f000 fa82 	bl	80a28ce <_ZdlPvj>
 80a23ca:	4620      	mov	r0, r4
 80a23cc:	bd10      	pop	{r4, pc}
	...

080a23d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a23d0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a23d4:	b510      	push	{r4, lr}
 80a23d6:	4604      	mov	r4, r0
 80a23d8:	4608      	mov	r0, r1
 80a23da:	4611      	mov	r1, r2
 80a23dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a23e0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a23e4:	4a04      	ldr	r2, [pc, #16]	; (80a23f8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a23e6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a23e8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a23ea:	2201      	movs	r2, #1
 80a23ec:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a23ee:	461a      	mov	r2, r3
 80a23f0:	f7fe f99e 	bl	80a0730 <hal_usart_init>
}
 80a23f4:	4620      	mov	r0, r4
 80a23f6:	bd10      	pop	{r4, pc}
 80a23f8:	080a37ec 	.word	0x080a37ec

080a23fc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a23fc:	2300      	movs	r3, #0
 80a23fe:	7c00      	ldrb	r0, [r0, #16]
 80a2400:	f7fe b9d6 	b.w	80a07b0 <hal_usart_begin_config>

080a2404 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a2404:	2200      	movs	r2, #0
 80a2406:	f7ff bff9 	b.w	80a23fc <_ZN11USARTSerial5beginEmm>

080a240a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 80a240a:	7c00      	ldrb	r0, [r0, #16]
 80a240c:	f7fe b998 	b.w	80a0740 <hal_usart_end>

080a2410 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2410:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2412:	4d0d      	ldr	r5, [pc, #52]	; (80a2448 <_Z22__fetch_global_Serial1v+0x38>)
 80a2414:	7829      	ldrb	r1, [r5, #0]
 80a2416:	f3bf 8f5b 	dmb	ish
 80a241a:	f011 0401 	ands.w	r4, r1, #1
 80a241e:	d111      	bne.n	80a2444 <_Z22__fetch_global_Serial1v+0x34>
 80a2420:	4628      	mov	r0, r5
 80a2422:	f7fd fe4b 	bl	80a00bc <__cxa_guard_acquire>
 80a2426:	b168      	cbz	r0, 80a2444 <_Z22__fetch_global_Serial1v+0x34>
 80a2428:	4621      	mov	r1, r4
 80a242a:	4a08      	ldr	r2, [pc, #32]	; (80a244c <_Z22__fetch_global_Serial1v+0x3c>)
 80a242c:	4b08      	ldr	r3, [pc, #32]	; (80a2450 <_Z22__fetch_global_Serial1v+0x40>)
 80a242e:	4809      	ldr	r0, [pc, #36]	; (80a2454 <_Z22__fetch_global_Serial1v+0x44>)
 80a2430:	f7ff ffce 	bl	80a23d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2434:	4628      	mov	r0, r5
 80a2436:	f7fd fe46 	bl	80a00c6 <__cxa_guard_release>
 80a243a:	4a07      	ldr	r2, [pc, #28]	; (80a2458 <_Z22__fetch_global_Serial1v+0x48>)
 80a243c:	4907      	ldr	r1, [pc, #28]	; (80a245c <_Z22__fetch_global_Serial1v+0x4c>)
 80a243e:	4805      	ldr	r0, [pc, #20]	; (80a2454 <_Z22__fetch_global_Serial1v+0x44>)
 80a2440:	f000 fa40 	bl	80a28c4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2444:	4803      	ldr	r0, [pc, #12]	; (80a2454 <_Z22__fetch_global_Serial1v+0x44>)
 80a2446:	bd38      	pop	{r3, r4, r5, pc}
 80a2448:	2000010c 	.word	0x2000010c
 80a244c:	20000110 	.word	0x20000110
 80a2450:	20000194 	.word	0x20000194
 80a2454:	20000218 	.word	0x20000218
 80a2458:	20000070 	.word	0x20000070
 80a245c:	080a2359 	.word	0x080a2359

080a2460 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2460:	7441      	strb	r1, [r0, #17]
}
 80a2462:	4770      	bx	lr

080a2464 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2464:	4770      	bx	lr

080a2466 <_ZN9USBSerial4readEv>:
{
 80a2466:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2468:	2100      	movs	r1, #0
 80a246a:	7c00      	ldrb	r0, [r0, #16]
 80a246c:	f7fe f9d0 	bl	80a0810 <HAL_USB_USART_Receive_Data>
}
 80a2470:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2474:	bd08      	pop	{r3, pc}

080a2476 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a2476:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2478:	2101      	movs	r1, #1
 80a247a:	7c00      	ldrb	r0, [r0, #16]
 80a247c:	f7fe f9c8 	bl	80a0810 <HAL_USB_USART_Receive_Data>
}
 80a2480:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2484:	bd08      	pop	{r3, pc}

080a2486 <_ZN9USBSerial17availableForWriteEv>:
{
 80a2486:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2488:	7c00      	ldrb	r0, [r0, #16]
 80a248a:	f7fe f9b9 	bl	80a0800 <HAL_USB_USART_Available_Data_For_Write>
}
 80a248e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2492:	bd08      	pop	{r3, pc}

080a2494 <_ZN9USBSerial9availableEv>:
{
 80a2494:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2496:	7c00      	ldrb	r0, [r0, #16]
 80a2498:	f7fe f9aa 	bl	80a07f0 <HAL_USB_USART_Available_Data>
}
 80a249c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24a0:	bd08      	pop	{r3, pc}

080a24a2 <_ZN9USBSerial5writeEh>:
{
 80a24a2:	b538      	push	{r3, r4, r5, lr}
 80a24a4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24a6:	7c00      	ldrb	r0, [r0, #16]
{
 80a24a8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a24aa:	f7fe f9a9 	bl	80a0800 <HAL_USB_USART_Available_Data_For_Write>
 80a24ae:	2800      	cmp	r0, #0
 80a24b0:	dc01      	bgt.n	80a24b6 <_ZN9USBSerial5writeEh+0x14>
 80a24b2:	7c60      	ldrb	r0, [r4, #17]
 80a24b4:	b128      	cbz	r0, 80a24c2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a24b6:	4629      	mov	r1, r5
 80a24b8:	7c20      	ldrb	r0, [r4, #16]
 80a24ba:	f7fe f9b1 	bl	80a0820 <HAL_USB_USART_Send_Data>
 80a24be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a24c2:	bd38      	pop	{r3, r4, r5, pc}

080a24c4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a24c4:	7c00      	ldrb	r0, [r0, #16]
 80a24c6:	f7fe b9b3 	b.w	80a0830 <HAL_USB_USART_Flush_Data>

080a24ca <_ZN9USBSerialD0Ev>:
 80a24ca:	b510      	push	{r4, lr}
 80a24cc:	4604      	mov	r4, r0
 80a24ce:	2114      	movs	r1, #20
 80a24d0:	f000 f9fd 	bl	80a28ce <_ZdlPvj>
 80a24d4:	4620      	mov	r0, r4
 80a24d6:	bd10      	pop	{r4, pc}

080a24d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a24d8:	b510      	push	{r4, lr}
 80a24da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a24de:	4604      	mov	r4, r0
 80a24e0:	4608      	mov	r0, r1
 80a24e2:	2100      	movs	r1, #0
 80a24e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a24e8:	4b04      	ldr	r3, [pc, #16]	; (80a24fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a24ea:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a24ec:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a24ee:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a24f0:	4611      	mov	r1, r2
  _blocking = true;
 80a24f2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a24f4:	f7fe f964 	bl	80a07c0 <HAL_USB_USART_Init>
}
 80a24f8:	4620      	mov	r0, r4
 80a24fa:	bd10      	pop	{r4, pc}
 80a24fc:	080a381c 	.word	0x080a381c

080a2500 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2500:	2200      	movs	r2, #0
 80a2502:	7c00      	ldrb	r0, [r0, #16]
 80a2504:	f7fe b964 	b.w	80a07d0 <HAL_USB_USART_Begin>

080a2508 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 80a2508:	7c00      	ldrb	r0, [r0, #16]
 80a250a:	f7fe b969 	b.w	80a07e0 <HAL_USB_USART_End>
	...

080a2510 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2510:	b510      	push	{r4, lr}
 80a2512:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2514:	2214      	movs	r2, #20
 80a2516:	2100      	movs	r1, #0
 80a2518:	f000 ff60 	bl	80a33dc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a251c:	4b05      	ldr	r3, [pc, #20]	; (80a2534 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a251e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a2520:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2522:	4b05      	ldr	r3, [pc, #20]	; (80a2538 <_Z19acquireSerialBufferv+0x28>)
 80a2524:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2526:	f240 1301 	movw	r3, #257	; 0x101
 80a252a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a252c:	2381      	movs	r3, #129	; 0x81
 80a252e:	8223      	strh	r3, [r4, #16]
}
 80a2530:	bd10      	pop	{r4, pc}
 80a2532:	bf00      	nop
 80a2534:	2000025c 	.word	0x2000025c
 80a2538:	2000035d 	.word	0x2000035d

080a253c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a253c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a253e:	4d0f      	ldr	r5, [pc, #60]	; (80a257c <_Z16_fetch_usbserialv+0x40>)
{
 80a2540:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2542:	a801      	add	r0, sp, #4
 80a2544:	f7ff ffe4 	bl	80a2510 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2548:	7829      	ldrb	r1, [r5, #0]
 80a254a:	f3bf 8f5b 	dmb	ish
 80a254e:	f011 0401 	ands.w	r4, r1, #1
 80a2552:	d110      	bne.n	80a2576 <_Z16_fetch_usbserialv+0x3a>
 80a2554:	4628      	mov	r0, r5
 80a2556:	f7fd fdb1 	bl	80a00bc <__cxa_guard_acquire>
 80a255a:	b160      	cbz	r0, 80a2576 <_Z16_fetch_usbserialv+0x3a>
 80a255c:	4621      	mov	r1, r4
 80a255e:	aa01      	add	r2, sp, #4
 80a2560:	4807      	ldr	r0, [pc, #28]	; (80a2580 <_Z16_fetch_usbserialv+0x44>)
 80a2562:	f7ff ffb9 	bl	80a24d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2566:	4628      	mov	r0, r5
 80a2568:	f7fd fdad 	bl	80a00c6 <__cxa_guard_release>
 80a256c:	4a05      	ldr	r2, [pc, #20]	; (80a2584 <_Z16_fetch_usbserialv+0x48>)
 80a256e:	4906      	ldr	r1, [pc, #24]	; (80a2588 <_Z16_fetch_usbserialv+0x4c>)
 80a2570:	4803      	ldr	r0, [pc, #12]	; (80a2580 <_Z16_fetch_usbserialv+0x44>)
 80a2572:	f000 f9a7 	bl	80a28c4 <__aeabi_atexit>
	return _usbserial;
}
 80a2576:	4802      	ldr	r0, [pc, #8]	; (80a2580 <_Z16_fetch_usbserialv+0x44>)
 80a2578:	b007      	add	sp, #28
 80a257a:	bd30      	pop	{r4, r5, pc}
 80a257c:	2000022c 	.word	0x2000022c
 80a2580:	20000234 	.word	0x20000234
 80a2584:	20000070 	.word	0x20000070
 80a2588:	080a2465 	.word	0x080a2465

080a258c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a258c:	b510      	push	{r4, lr}
 80a258e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2590:	2214      	movs	r2, #20
 80a2592:	2100      	movs	r1, #0
 80a2594:	f000 ff22 	bl	80a33dc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2598:	4b05      	ldr	r3, [pc, #20]	; (80a25b0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a259a:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a259c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a259e:	4b05      	ldr	r3, [pc, #20]	; (80a25b4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a25a0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a25a2:	f240 1301 	movw	r3, #257	; 0x101
 80a25a6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a25a8:	2381      	movs	r3, #129	; 0x81
 80a25aa:	8223      	strh	r3, [r4, #16]
}
 80a25ac:	bd10      	pop	{r4, pc}
 80a25ae:	bf00      	nop
 80a25b0:	200003de 	.word	0x200003de
 80a25b4:	200004df 	.word	0x200004df

080a25b8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a25b8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25ba:	4c0f      	ldr	r4, [pc, #60]	; (80a25f8 <_Z17_fetch_usbserial1v+0x40>)
{
 80a25bc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a25be:	a801      	add	r0, sp, #4
 80a25c0:	f7ff ffe4 	bl	80a258c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25c4:	7823      	ldrb	r3, [r4, #0]
 80a25c6:	f3bf 8f5b 	dmb	ish
 80a25ca:	07db      	lsls	r3, r3, #31
 80a25cc:	d410      	bmi.n	80a25f0 <_Z17_fetch_usbserial1v+0x38>
 80a25ce:	4620      	mov	r0, r4
 80a25d0:	f7fd fd74 	bl	80a00bc <__cxa_guard_acquire>
 80a25d4:	b160      	cbz	r0, 80a25f0 <_Z17_fetch_usbserial1v+0x38>
 80a25d6:	2101      	movs	r1, #1
 80a25d8:	aa01      	add	r2, sp, #4
 80a25da:	4808      	ldr	r0, [pc, #32]	; (80a25fc <_Z17_fetch_usbserial1v+0x44>)
 80a25dc:	f7ff ff7c 	bl	80a24d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a25e0:	4620      	mov	r0, r4
 80a25e2:	f7fd fd70 	bl	80a00c6 <__cxa_guard_release>
 80a25e6:	4a06      	ldr	r2, [pc, #24]	; (80a2600 <_Z17_fetch_usbserial1v+0x48>)
 80a25e8:	4906      	ldr	r1, [pc, #24]	; (80a2604 <_Z17_fetch_usbserial1v+0x4c>)
 80a25ea:	4804      	ldr	r0, [pc, #16]	; (80a25fc <_Z17_fetch_usbserial1v+0x44>)
 80a25ec:	f000 f96a 	bl	80a28c4 <__aeabi_atexit>
  return _usbserial1;
}
 80a25f0:	4802      	ldr	r0, [pc, #8]	; (80a25fc <_Z17_fetch_usbserial1v+0x44>)
 80a25f2:	b006      	add	sp, #24
 80a25f4:	bd10      	pop	{r4, pc}
 80a25f6:	bf00      	nop
 80a25f8:	20000230 	.word	0x20000230
 80a25fc:	20000248 	.word	0x20000248
 80a2600:	20000070 	.word	0x20000070
 80a2604:	080a2465 	.word	0x080a2465

080a2608 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2608:	2200      	movs	r2, #0
 80a260a:	6840      	ldr	r0, [r0, #4]
 80a260c:	4611      	mov	r1, r2
 80a260e:	f7fe b983 	b.w	80a0918 <network_ready>

080a2612 <_ZN5spark9WiFiClass7resolveEPKc>:
    IPAddress resolve(const char* name)
 80a2612:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2614:	4615      	mov	r5, r2
 80a2616:	b089      	sub	sp, #36	; 0x24
        HAL_IPAddress ip = {};
 80a2618:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a261a:	460e      	mov	r6, r1
 80a261c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a261e:	2100      	movs	r1, #0
 80a2620:	a803      	add	r0, sp, #12
 80a2622:	f000 fedb 	bl	80a33dc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2626:	4628      	mov	r0, r5
 80a2628:	f000 ff2d 	bl	80a3486 <strlen>
 80a262c:	2700      	movs	r7, #0
 80a262e:	b281      	uxth	r1, r0
 80a2630:	6873      	ldr	r3, [r6, #4]
 80a2632:	4628      	mov	r0, r5
 80a2634:	9700      	str	r7, [sp, #0]
 80a2636:	aa03      	add	r2, sp, #12
 80a2638:	f7fe f902 	bl	80a0840 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a263c:	b130      	cbz	r0, 80a264c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a263e:	4639      	mov	r1, r7
 80a2640:	4620      	mov	r0, r4
 80a2642:	f7fe fadf 	bl	80a0c04 <_ZN9IPAddressC1Em>
    }
 80a2646:	4620      	mov	r0, r4
 80a2648:	b009      	add	sp, #36	; 0x24
 80a264a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a264c:	4620      	mov	r0, r4
 80a264e:	a903      	add	r1, sp, #12
 80a2650:	f7fe fac6 	bl	80a0be0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2654:	e7f7      	b.n	80a2646 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2656 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2656:	2200      	movs	r2, #0
 80a2658:	6840      	ldr	r0, [r0, #4]
 80a265a:	4611      	mov	r1, r2
 80a265c:	f7fe b97c 	b.w	80a0958 <network_listening>

080a2660 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2660:	2200      	movs	r2, #0
 80a2662:	6840      	ldr	r0, [r0, #4]
 80a2664:	4611      	mov	r1, r2
 80a2666:	f7fe b987 	b.w	80a0978 <network_get_listen_timeout>

080a266a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a266a:	2200      	movs	r2, #0
 80a266c:	6840      	ldr	r0, [r0, #4]
 80a266e:	f7fe b97b 	b.w	80a0968 <network_set_listen_timeout>

080a2672 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2672:	2200      	movs	r2, #0
 80a2674:	6840      	ldr	r0, [r0, #4]
 80a2676:	f081 0101 	eor.w	r1, r1, #1
 80a267a:	f7fe b965 	b.w	80a0948 <network_listen>

080a267e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a267e:	2300      	movs	r3, #0
 80a2680:	6840      	ldr	r0, [r0, #4]
 80a2682:	461a      	mov	r2, r3
 80a2684:	4619      	mov	r1, r3
 80a2686:	f7fe b957 	b.w	80a0938 <network_off>

080a268a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a268a:	2300      	movs	r3, #0
 80a268c:	6840      	ldr	r0, [r0, #4]
 80a268e:	461a      	mov	r2, r3
 80a2690:	4619      	mov	r1, r3
 80a2692:	f7fe b949 	b.w	80a0928 <network_on>

080a2696 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2696:	2200      	movs	r2, #0
 80a2698:	6840      	ldr	r0, [r0, #4]
 80a269a:	4611      	mov	r1, r2
 80a269c:	f7fe b92c 	b.w	80a08f8 <network_connecting>

080a26a0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a26a0:	2200      	movs	r2, #0
 80a26a2:	2102      	movs	r1, #2
 80a26a4:	6840      	ldr	r0, [r0, #4]
 80a26a6:	f7fe b92f 	b.w	80a0908 <network_disconnect>

080a26aa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a26aa:	2300      	movs	r3, #0
 80a26ac:	6840      	ldr	r0, [r0, #4]
 80a26ae:	461a      	mov	r2, r3
 80a26b0:	f7fe b91a 	b.w	80a08e8 <network_connect>

080a26b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a26b4:	2204      	movs	r2, #4
 80a26b6:	4b02      	ldr	r3, [pc, #8]	; (80a26c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a26b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a26ba:	4a02      	ldr	r2, [pc, #8]	; (80a26c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a26bc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a26be:	4770      	bx	lr
 80a26c0:	20000560 	.word	0x20000560
 80a26c4:	080a384c 	.word	0x080a384c

080a26c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a26c8:	4b01      	ldr	r3, [pc, #4]	; (80a26d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a26ca:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a26cc:	4770      	bx	lr
 80a26ce:	bf00      	nop
 80a26d0:	2000000c 	.word	0x2000000c

080a26d4 <serialEventRun>:
{
 80a26d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a26d6:	4b13      	ldr	r3, [pc, #76]	; (80a2724 <serialEventRun+0x50>)
 80a26d8:	b143      	cbz	r3, 80a26ec <serialEventRun+0x18>
 80a26da:	f7ff ff2f 	bl	80a253c <_Z16_fetch_usbserialv>
 80a26de:	6803      	ldr	r3, [r0, #0]
 80a26e0:	691b      	ldr	r3, [r3, #16]
 80a26e2:	4798      	blx	r3
 80a26e4:	2800      	cmp	r0, #0
 80a26e6:	dd01      	ble.n	80a26ec <serialEventRun+0x18>
        serialEvent();
 80a26e8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a26ec:	4b0e      	ldr	r3, [pc, #56]	; (80a2728 <serialEventRun+0x54>)
 80a26ee:	b143      	cbz	r3, 80a2702 <serialEventRun+0x2e>
 80a26f0:	f7ff fe8e 	bl	80a2410 <_Z22__fetch_global_Serial1v>
 80a26f4:	6803      	ldr	r3, [r0, #0]
 80a26f6:	691b      	ldr	r3, [r3, #16]
 80a26f8:	4798      	blx	r3
 80a26fa:	2800      	cmp	r0, #0
 80a26fc:	dd01      	ble.n	80a2702 <serialEventRun+0x2e>
        serialEvent1();
 80a26fe:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2702:	4b0a      	ldr	r3, [pc, #40]	; (80a272c <serialEventRun+0x58>)
 80a2704:	b10b      	cbz	r3, 80a270a <serialEventRun+0x36>
 80a2706:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a270a:	4b09      	ldr	r3, [pc, #36]	; (80a2730 <serialEventRun+0x5c>)
 80a270c:	b143      	cbz	r3, 80a2720 <serialEventRun+0x4c>
 80a270e:	f7ff ff53 	bl	80a25b8 <_Z17_fetch_usbserial1v>
 80a2712:	6803      	ldr	r3, [r0, #0]
 80a2714:	691b      	ldr	r3, [r3, #16]
 80a2716:	4798      	blx	r3
 80a2718:	2800      	cmp	r0, #0
 80a271a:	dd01      	ble.n	80a2720 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a271c:	f3af 8000 	nop.w
}
 80a2720:	bd08      	pop	{r3, pc}
 80a2722:	bf00      	nop
	...

080a2734 <_post_loop>:
{
 80a2734:	b508      	push	{r3, lr}
	serialEventRun();
 80a2736:	f7ff ffcd 	bl	80a26d4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a273a:	f7fd ff67 	bl	80a060c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a273e:	4b01      	ldr	r3, [pc, #4]	; (80a2744 <_post_loop+0x10>)
 80a2740:	6018      	str	r0, [r3, #0]
}
 80a2742:	bd08      	pop	{r3, pc}
 80a2744:	20000570 	.word	0x20000570

080a2748 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2748:	4802      	ldr	r0, [pc, #8]	; (80a2754 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a274a:	4a03      	ldr	r2, [pc, #12]	; (80a2758 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a274c:	4903      	ldr	r1, [pc, #12]	; (80a275c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a274e:	1a12      	subs	r2, r2, r0
 80a2750:	f000 be1c 	b.w	80a338c <memcpy>
 80a2754:	40024000 	.word	0x40024000
 80a2758:	40024004 	.word	0x40024004
 80a275c:	080a39b8 	.word	0x080a39b8

080a2760 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2760:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2762:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2764:	461a      	mov	r2, r3
 80a2766:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a276a:	9300      	str	r3, [sp, #0]
 80a276c:	f7fe f8aa 	bl	80a08c4 <system_ctrl_set_result>
}
 80a2770:	b003      	add	sp, #12
 80a2772:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2778 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2778:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a277a:	8843      	ldrh	r3, [r0, #2]
 80a277c:	2b0a      	cmp	r3, #10
 80a277e:	d008      	beq.n	80a2792 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2780:	2b50      	cmp	r3, #80	; 0x50
 80a2782:	d10b      	bne.n	80a279c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2784:	4b09      	ldr	r3, [pc, #36]	; (80a27ac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2786:	681b      	ldr	r3, [r3, #0]
 80a2788:	b14b      	cbz	r3, 80a279e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a278a:	b003      	add	sp, #12
 80a278c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2790:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2792:	f7ff ffe5 	bl	80a2760 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2796:	b003      	add	sp, #12
 80a2798:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a279c:	2300      	movs	r3, #0
 80a279e:	461a      	mov	r2, r3
 80a27a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a27a4:	9300      	str	r3, [sp, #0]
 80a27a6:	f7fe f88d 	bl	80a08c4 <system_ctrl_set_result>
}
 80a27aa:	e7f4      	b.n	80a2796 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a27ac:	2000056c 	.word	0x2000056c

080a27b0 <module_user_init_hook>:
{
 80a27b0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a27b2:	4c12      	ldr	r4, [pc, #72]	; (80a27fc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a27b4:	2100      	movs	r1, #0
 80a27b6:	4812      	ldr	r0, [pc, #72]	; (80a2800 <module_user_init_hook+0x50>)
 80a27b8:	f7fe f916 	bl	80a09e8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a27bc:	4d11      	ldr	r5, [pc, #68]	; (80a2804 <module_user_init_hook+0x54>)
 80a27be:	6823      	ldr	r3, [r4, #0]
 80a27c0:	42ab      	cmp	r3, r5
 80a27c2:	bf0c      	ite	eq
 80a27c4:	2201      	moveq	r2, #1
 80a27c6:	2200      	movne	r2, #0
 80a27c8:	4b0f      	ldr	r3, [pc, #60]	; (80a2808 <module_user_init_hook+0x58>)
 80a27ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a27cc:	d002      	beq.n	80a27d4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a27ce:	f7ff ffbb 	bl	80a2748 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a27d2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a27d4:	f7fd ff0a 	bl	80a05ec <HAL_RNG_GetRandomNumber>
 80a27d8:	4604      	mov	r4, r0
    srand(seed);
 80a27da:	f000 fe07 	bl	80a33ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a27de:	4b0b      	ldr	r3, [pc, #44]	; (80a280c <module_user_init_hook+0x5c>)
 80a27e0:	b113      	cbz	r3, 80a27e8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a27e2:	4620      	mov	r0, r4
 80a27e4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a27e8:	2100      	movs	r1, #0
 80a27ea:	4808      	ldr	r0, [pc, #32]	; (80a280c <module_user_init_hook+0x5c>)
 80a27ec:	f7fe f874 	bl	80a08d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a27f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a27f4:	2100      	movs	r1, #0
 80a27f6:	4806      	ldr	r0, [pc, #24]	; (80a2810 <module_user_init_hook+0x60>)
 80a27f8:	f7fe b85a 	b.w	80a08b0 <system_ctrl_set_app_request_handler>
 80a27fc:	40024000 	.word	0x40024000
 80a2800:	080a26c9 	.word	0x080a26c9
 80a2804:	9a271c1e 	.word	0x9a271c1e
 80a2808:	20000568 	.word	0x20000568
 80a280c:	00000000 	.word	0x00000000
 80a2810:	080a2779 	.word	0x080a2779

080a2814 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a2814:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a2816:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2818:	2520      	movs	r5, #32
 80a281a:	8043      	strh	r3, [r0, #2]
 80a281c:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a281e:	4e08      	ldr	r6, [pc, #32]	; (80a2840 <_Z17acquireWireBufferv+0x2c>)
{
 80a2820:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2822:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2824:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2826:	6085      	str	r5, [r0, #8]
 80a2828:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a282a:	4628      	mov	r0, r5
 80a282c:	f000 f853 	bl	80a28d6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2830:	4631      	mov	r1, r6
	};
 80a2832:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2834:	4628      	mov	r0, r5
 80a2836:	f000 f84e 	bl	80a28d6 <_ZnajRKSt9nothrow_t>
	};
 80a283a:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a283c:	4620      	mov	r0, r4
 80a283e:	bd70      	pop	{r4, r5, r6, pc}
 80a2840:	080a3880 	.word	0x080a3880

080a2844 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2844:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2846:	4d0f      	ldr	r5, [pc, #60]	; (80a2884 <_Z19__fetch_global_Wirev+0x40>)
{
 80a2848:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a284a:	7829      	ldrb	r1, [r5, #0]
 80a284c:	f3bf 8f5b 	dmb	ish
 80a2850:	f011 0401 	ands.w	r4, r1, #1
 80a2854:	d113      	bne.n	80a287e <_Z19__fetch_global_Wirev+0x3a>
 80a2856:	4628      	mov	r0, r5
 80a2858:	f7fd fc30 	bl	80a00bc <__cxa_guard_acquire>
 80a285c:	b178      	cbz	r0, 80a287e <_Z19__fetch_global_Wirev+0x3a>
 80a285e:	a801      	add	r0, sp, #4
 80a2860:	f7ff ffd8 	bl	80a2814 <_Z17acquireWireBufferv>
 80a2864:	4621      	mov	r1, r4
 80a2866:	aa01      	add	r2, sp, #4
 80a2868:	4807      	ldr	r0, [pc, #28]	; (80a2888 <_Z19__fetch_global_Wirev+0x44>)
 80a286a:	f7fe f91b 	bl	80a0aa4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a286e:	4628      	mov	r0, r5
 80a2870:	f7fd fc29 	bl	80a00c6 <__cxa_guard_release>
 80a2874:	4a05      	ldr	r2, [pc, #20]	; (80a288c <_Z19__fetch_global_Wirev+0x48>)
 80a2876:	4906      	ldr	r1, [pc, #24]	; (80a2890 <_Z19__fetch_global_Wirev+0x4c>)
 80a2878:	4803      	ldr	r0, [pc, #12]	; (80a2888 <_Z19__fetch_global_Wirev+0x44>)
 80a287a:	f000 f823 	bl	80a28c4 <__aeabi_atexit>
	return wire;
}
 80a287e:	4802      	ldr	r0, [pc, #8]	; (80a2888 <_Z19__fetch_global_Wirev+0x44>)
 80a2880:	b007      	add	sp, #28
 80a2882:	bd30      	pop	{r4, r5, pc}
 80a2884:	20000574 	.word	0x20000574
 80a2888:	20000578 	.word	0x20000578
 80a288c:	20000070 	.word	0x20000070
 80a2890:	080a0a4b 	.word	0x080a0a4b

080a2894 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2894:	2300      	movs	r3, #0
 80a2896:	b513      	push	{r0, r1, r4, lr}
 80a2898:	4c07      	ldr	r4, [pc, #28]	; (80a28b8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a289a:	461a      	mov	r2, r3
 80a289c:	4619      	mov	r1, r3
 80a289e:	4620      	mov	r0, r4
 80a28a0:	9300      	str	r3, [sp, #0]
 80a28a2:	f7fe f9c5 	bl	80a0c30 <_ZN9IPAddressC1Ehhhh>
 80a28a6:	4620      	mov	r0, r4
 80a28a8:	4a04      	ldr	r2, [pc, #16]	; (80a28bc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a28aa:	4905      	ldr	r1, [pc, #20]	; (80a28c0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a28ac:	b002      	add	sp, #8
 80a28ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a28b2:	f000 b807 	b.w	80a28c4 <__aeabi_atexit>
 80a28b6:	bf00      	nop
 80a28b8:	2000058c 	.word	0x2000058c
 80a28bc:	20000070 	.word	0x20000070
 80a28c0:	080a0b81 	.word	0x080a0b81

080a28c4 <__aeabi_atexit>:
 80a28c4:	460b      	mov	r3, r1
 80a28c6:	4601      	mov	r1, r0
 80a28c8:	4618      	mov	r0, r3
 80a28ca:	f000 bd51 	b.w	80a3370 <__cxa_atexit>

080a28ce <_ZdlPvj>:
 80a28ce:	f7fd bbe8 	b.w	80a00a2 <_ZdlPv>

080a28d2 <_ZnwjRKSt9nothrow_t>:
 80a28d2:	f7fd bbe2 	b.w	80a009a <_Znwj>

080a28d6 <_ZnajRKSt9nothrow_t>:
 80a28d6:	f7fd bbe2 	b.w	80a009e <_Znaj>
	...

080a28dc <__aeabi_drsub>:
 80a28dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a28e0:	e002      	b.n	80a28e8 <__adddf3>
 80a28e2:	bf00      	nop

080a28e4 <__aeabi_dsub>:
 80a28e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a28e8 <__adddf3>:
 80a28e8:	b530      	push	{r4, r5, lr}
 80a28ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a28ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a28f2:	ea94 0f05 	teq	r4, r5
 80a28f6:	bf08      	it	eq
 80a28f8:	ea90 0f02 	teqeq	r0, r2
 80a28fc:	bf1f      	itttt	ne
 80a28fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2902:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2906:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a290a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a290e:	f000 80e2 	beq.w	80a2ad6 <__adddf3+0x1ee>
 80a2912:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2916:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a291a:	bfb8      	it	lt
 80a291c:	426d      	neglt	r5, r5
 80a291e:	dd0c      	ble.n	80a293a <__adddf3+0x52>
 80a2920:	442c      	add	r4, r5
 80a2922:	ea80 0202 	eor.w	r2, r0, r2
 80a2926:	ea81 0303 	eor.w	r3, r1, r3
 80a292a:	ea82 0000 	eor.w	r0, r2, r0
 80a292e:	ea83 0101 	eor.w	r1, r3, r1
 80a2932:	ea80 0202 	eor.w	r2, r0, r2
 80a2936:	ea81 0303 	eor.w	r3, r1, r3
 80a293a:	2d36      	cmp	r5, #54	; 0x36
 80a293c:	bf88      	it	hi
 80a293e:	bd30      	pophi	{r4, r5, pc}
 80a2940:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2944:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2948:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a294c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2950:	d002      	beq.n	80a2958 <__adddf3+0x70>
 80a2952:	4240      	negs	r0, r0
 80a2954:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2958:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a295c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2960:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2964:	d002      	beq.n	80a296c <__adddf3+0x84>
 80a2966:	4252      	negs	r2, r2
 80a2968:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a296c:	ea94 0f05 	teq	r4, r5
 80a2970:	f000 80a7 	beq.w	80a2ac2 <__adddf3+0x1da>
 80a2974:	f1a4 0401 	sub.w	r4, r4, #1
 80a2978:	f1d5 0e20 	rsbs	lr, r5, #32
 80a297c:	db0d      	blt.n	80a299a <__adddf3+0xb2>
 80a297e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2982:	fa22 f205 	lsr.w	r2, r2, r5
 80a2986:	1880      	adds	r0, r0, r2
 80a2988:	f141 0100 	adc.w	r1, r1, #0
 80a298c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2990:	1880      	adds	r0, r0, r2
 80a2992:	fa43 f305 	asr.w	r3, r3, r5
 80a2996:	4159      	adcs	r1, r3
 80a2998:	e00e      	b.n	80a29b8 <__adddf3+0xd0>
 80a299a:	f1a5 0520 	sub.w	r5, r5, #32
 80a299e:	f10e 0e20 	add.w	lr, lr, #32
 80a29a2:	2a01      	cmp	r2, #1
 80a29a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a29a8:	bf28      	it	cs
 80a29aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a29ae:	fa43 f305 	asr.w	r3, r3, r5
 80a29b2:	18c0      	adds	r0, r0, r3
 80a29b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a29b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a29bc:	d507      	bpl.n	80a29ce <__adddf3+0xe6>
 80a29be:	f04f 0e00 	mov.w	lr, #0
 80a29c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a29c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a29ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80a29ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a29d2:	d31b      	bcc.n	80a2a0c <__adddf3+0x124>
 80a29d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a29d8:	d30c      	bcc.n	80a29f4 <__adddf3+0x10c>
 80a29da:	0849      	lsrs	r1, r1, #1
 80a29dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a29e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a29e4:	f104 0401 	add.w	r4, r4, #1
 80a29e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a29ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a29f0:	f080 809a 	bcs.w	80a2b28 <__adddf3+0x240>
 80a29f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a29f8:	bf08      	it	eq
 80a29fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a29fe:	f150 0000 	adcs.w	r0, r0, #0
 80a2a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2a06:	ea41 0105 	orr.w	r1, r1, r5
 80a2a0a:	bd30      	pop	{r4, r5, pc}
 80a2a0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2a10:	4140      	adcs	r0, r0
 80a2a12:	eb41 0101 	adc.w	r1, r1, r1
 80a2a16:	3c01      	subs	r4, #1
 80a2a18:	bf28      	it	cs
 80a2a1a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a2a1e:	d2e9      	bcs.n	80a29f4 <__adddf3+0x10c>
 80a2a20:	f091 0f00 	teq	r1, #0
 80a2a24:	bf04      	itt	eq
 80a2a26:	4601      	moveq	r1, r0
 80a2a28:	2000      	moveq	r0, #0
 80a2a2a:	fab1 f381 	clz	r3, r1
 80a2a2e:	bf08      	it	eq
 80a2a30:	3320      	addeq	r3, #32
 80a2a32:	f1a3 030b 	sub.w	r3, r3, #11
 80a2a36:	f1b3 0220 	subs.w	r2, r3, #32
 80a2a3a:	da0c      	bge.n	80a2a56 <__adddf3+0x16e>
 80a2a3c:	320c      	adds	r2, #12
 80a2a3e:	dd08      	ble.n	80a2a52 <__adddf3+0x16a>
 80a2a40:	f102 0c14 	add.w	ip, r2, #20
 80a2a44:	f1c2 020c 	rsb	r2, r2, #12
 80a2a48:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2a4c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2a50:	e00c      	b.n	80a2a6c <__adddf3+0x184>
 80a2a52:	f102 0214 	add.w	r2, r2, #20
 80a2a56:	bfd8      	it	le
 80a2a58:	f1c2 0c20 	rsble	ip, r2, #32
 80a2a5c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2a60:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2a64:	bfdc      	itt	le
 80a2a66:	ea41 010c 	orrle.w	r1, r1, ip
 80a2a6a:	4090      	lslle	r0, r2
 80a2a6c:	1ae4      	subs	r4, r4, r3
 80a2a6e:	bfa2      	ittt	ge
 80a2a70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2a74:	4329      	orrge	r1, r5
 80a2a76:	bd30      	popge	{r4, r5, pc}
 80a2a78:	ea6f 0404 	mvn.w	r4, r4
 80a2a7c:	3c1f      	subs	r4, #31
 80a2a7e:	da1c      	bge.n	80a2aba <__adddf3+0x1d2>
 80a2a80:	340c      	adds	r4, #12
 80a2a82:	dc0e      	bgt.n	80a2aa2 <__adddf3+0x1ba>
 80a2a84:	f104 0414 	add.w	r4, r4, #20
 80a2a88:	f1c4 0220 	rsb	r2, r4, #32
 80a2a8c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2a90:	fa01 f302 	lsl.w	r3, r1, r2
 80a2a94:	ea40 0003 	orr.w	r0, r0, r3
 80a2a98:	fa21 f304 	lsr.w	r3, r1, r4
 80a2a9c:	ea45 0103 	orr.w	r1, r5, r3
 80a2aa0:	bd30      	pop	{r4, r5, pc}
 80a2aa2:	f1c4 040c 	rsb	r4, r4, #12
 80a2aa6:	f1c4 0220 	rsb	r2, r4, #32
 80a2aaa:	fa20 f002 	lsr.w	r0, r0, r2
 80a2aae:	fa01 f304 	lsl.w	r3, r1, r4
 80a2ab2:	ea40 0003 	orr.w	r0, r0, r3
 80a2ab6:	4629      	mov	r1, r5
 80a2ab8:	bd30      	pop	{r4, r5, pc}
 80a2aba:	fa21 f004 	lsr.w	r0, r1, r4
 80a2abe:	4629      	mov	r1, r5
 80a2ac0:	bd30      	pop	{r4, r5, pc}
 80a2ac2:	f094 0f00 	teq	r4, #0
 80a2ac6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2aca:	bf06      	itte	eq
 80a2acc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2ad0:	3401      	addeq	r4, #1
 80a2ad2:	3d01      	subne	r5, #1
 80a2ad4:	e74e      	b.n	80a2974 <__adddf3+0x8c>
 80a2ad6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2ada:	bf18      	it	ne
 80a2adc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2ae0:	d029      	beq.n	80a2b36 <__adddf3+0x24e>
 80a2ae2:	ea94 0f05 	teq	r4, r5
 80a2ae6:	bf08      	it	eq
 80a2ae8:	ea90 0f02 	teqeq	r0, r2
 80a2aec:	d005      	beq.n	80a2afa <__adddf3+0x212>
 80a2aee:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2af2:	bf04      	itt	eq
 80a2af4:	4619      	moveq	r1, r3
 80a2af6:	4610      	moveq	r0, r2
 80a2af8:	bd30      	pop	{r4, r5, pc}
 80a2afa:	ea91 0f03 	teq	r1, r3
 80a2afe:	bf1e      	ittt	ne
 80a2b00:	2100      	movne	r1, #0
 80a2b02:	2000      	movne	r0, #0
 80a2b04:	bd30      	popne	{r4, r5, pc}
 80a2b06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2b0a:	d105      	bne.n	80a2b18 <__adddf3+0x230>
 80a2b0c:	0040      	lsls	r0, r0, #1
 80a2b0e:	4149      	adcs	r1, r1
 80a2b10:	bf28      	it	cs
 80a2b12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2b16:	bd30      	pop	{r4, r5, pc}
 80a2b18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2b1c:	bf3c      	itt	cc
 80a2b1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2b22:	bd30      	popcc	{r4, r5, pc}
 80a2b24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2b28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2b2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2b30:	f04f 0000 	mov.w	r0, #0
 80a2b34:	bd30      	pop	{r4, r5, pc}
 80a2b36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2b3a:	bf1a      	itte	ne
 80a2b3c:	4619      	movne	r1, r3
 80a2b3e:	4610      	movne	r0, r2
 80a2b40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2b44:	bf1c      	itt	ne
 80a2b46:	460b      	movne	r3, r1
 80a2b48:	4602      	movne	r2, r0
 80a2b4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2b4e:	bf06      	itte	eq
 80a2b50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2b54:	ea91 0f03 	teqeq	r1, r3
 80a2b58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2b5c:	bd30      	pop	{r4, r5, pc}
 80a2b5e:	bf00      	nop

080a2b60 <__aeabi_ui2d>:
 80a2b60:	f090 0f00 	teq	r0, #0
 80a2b64:	bf04      	itt	eq
 80a2b66:	2100      	moveq	r1, #0
 80a2b68:	4770      	bxeq	lr
 80a2b6a:	b530      	push	{r4, r5, lr}
 80a2b6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2b70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2b74:	f04f 0500 	mov.w	r5, #0
 80a2b78:	f04f 0100 	mov.w	r1, #0
 80a2b7c:	e750      	b.n	80a2a20 <__adddf3+0x138>
 80a2b7e:	bf00      	nop

080a2b80 <__aeabi_i2d>:
 80a2b80:	f090 0f00 	teq	r0, #0
 80a2b84:	bf04      	itt	eq
 80a2b86:	2100      	moveq	r1, #0
 80a2b88:	4770      	bxeq	lr
 80a2b8a:	b530      	push	{r4, r5, lr}
 80a2b8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2b90:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2b94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2b98:	bf48      	it	mi
 80a2b9a:	4240      	negmi	r0, r0
 80a2b9c:	f04f 0100 	mov.w	r1, #0
 80a2ba0:	e73e      	b.n	80a2a20 <__adddf3+0x138>
 80a2ba2:	bf00      	nop

080a2ba4 <__aeabi_f2d>:
 80a2ba4:	0042      	lsls	r2, r0, #1
 80a2ba6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2baa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2bae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2bb2:	bf1f      	itttt	ne
 80a2bb4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2bb8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2bbc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2bc0:	4770      	bxne	lr
 80a2bc2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a2bc6:	bf08      	it	eq
 80a2bc8:	4770      	bxeq	lr
 80a2bca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a2bce:	bf04      	itt	eq
 80a2bd0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a2bd4:	4770      	bxeq	lr
 80a2bd6:	b530      	push	{r4, r5, lr}
 80a2bd8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2bdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2be0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2be4:	e71c      	b.n	80a2a20 <__adddf3+0x138>
 80a2be6:	bf00      	nop

080a2be8 <__aeabi_ul2d>:
 80a2be8:	ea50 0201 	orrs.w	r2, r0, r1
 80a2bec:	bf08      	it	eq
 80a2bee:	4770      	bxeq	lr
 80a2bf0:	b530      	push	{r4, r5, lr}
 80a2bf2:	f04f 0500 	mov.w	r5, #0
 80a2bf6:	e00a      	b.n	80a2c0e <__aeabi_l2d+0x16>

080a2bf8 <__aeabi_l2d>:
 80a2bf8:	ea50 0201 	orrs.w	r2, r0, r1
 80a2bfc:	bf08      	it	eq
 80a2bfe:	4770      	bxeq	lr
 80a2c00:	b530      	push	{r4, r5, lr}
 80a2c02:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2c06:	d502      	bpl.n	80a2c0e <__aeabi_l2d+0x16>
 80a2c08:	4240      	negs	r0, r0
 80a2c0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2c0e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2c12:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2c16:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2c1a:	f43f aed8 	beq.w	80a29ce <__adddf3+0xe6>
 80a2c1e:	f04f 0203 	mov.w	r2, #3
 80a2c22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2c26:	bf18      	it	ne
 80a2c28:	3203      	addne	r2, #3
 80a2c2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2c2e:	bf18      	it	ne
 80a2c30:	3203      	addne	r2, #3
 80a2c32:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2c36:	f1c2 0320 	rsb	r3, r2, #32
 80a2c3a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2c3e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2c42:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2c46:	ea40 000e 	orr.w	r0, r0, lr
 80a2c4a:	fa21 f102 	lsr.w	r1, r1, r2
 80a2c4e:	4414      	add	r4, r2
 80a2c50:	e6bd      	b.n	80a29ce <__adddf3+0xe6>
 80a2c52:	bf00      	nop

080a2c54 <__aeabi_dmul>:
 80a2c54:	b570      	push	{r4, r5, r6, lr}
 80a2c56:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2c5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2c5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2c62:	bf1d      	ittte	ne
 80a2c64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2c68:	ea94 0f0c 	teqne	r4, ip
 80a2c6c:	ea95 0f0c 	teqne	r5, ip
 80a2c70:	f000 f8de 	bleq	80a2e30 <__aeabi_dmul+0x1dc>
 80a2c74:	442c      	add	r4, r5
 80a2c76:	ea81 0603 	eor.w	r6, r1, r3
 80a2c7a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2c7e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2c82:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2c86:	bf18      	it	ne
 80a2c88:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2c8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2c94:	d038      	beq.n	80a2d08 <__aeabi_dmul+0xb4>
 80a2c96:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2c9a:	f04f 0500 	mov.w	r5, #0
 80a2c9e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2ca2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2ca6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2caa:	f04f 0600 	mov.w	r6, #0
 80a2cae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2cb2:	f09c 0f00 	teq	ip, #0
 80a2cb6:	bf18      	it	ne
 80a2cb8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2cbc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2cc0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2cc4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2cc8:	d204      	bcs.n	80a2cd4 <__aeabi_dmul+0x80>
 80a2cca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2cce:	416d      	adcs	r5, r5
 80a2cd0:	eb46 0606 	adc.w	r6, r6, r6
 80a2cd4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2cd8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2cdc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2ce0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2ce4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2ce8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2cec:	bf88      	it	hi
 80a2cee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2cf2:	d81e      	bhi.n	80a2d32 <__aeabi_dmul+0xde>
 80a2cf4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2cf8:	bf08      	it	eq
 80a2cfa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2cfe:	f150 0000 	adcs.w	r0, r0, #0
 80a2d02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2d06:	bd70      	pop	{r4, r5, r6, pc}
 80a2d08:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2d0c:	ea46 0101 	orr.w	r1, r6, r1
 80a2d10:	ea40 0002 	orr.w	r0, r0, r2
 80a2d14:	ea81 0103 	eor.w	r1, r1, r3
 80a2d18:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2d1c:	bfc2      	ittt	gt
 80a2d1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2d22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2d26:	bd70      	popgt	{r4, r5, r6, pc}
 80a2d28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2d2c:	f04f 0e00 	mov.w	lr, #0
 80a2d30:	3c01      	subs	r4, #1
 80a2d32:	f300 80ab 	bgt.w	80a2e8c <__aeabi_dmul+0x238>
 80a2d36:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2d3a:	bfde      	ittt	le
 80a2d3c:	2000      	movle	r0, #0
 80a2d3e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2d42:	bd70      	pople	{r4, r5, r6, pc}
 80a2d44:	f1c4 0400 	rsb	r4, r4, #0
 80a2d48:	3c20      	subs	r4, #32
 80a2d4a:	da35      	bge.n	80a2db8 <__aeabi_dmul+0x164>
 80a2d4c:	340c      	adds	r4, #12
 80a2d4e:	dc1b      	bgt.n	80a2d88 <__aeabi_dmul+0x134>
 80a2d50:	f104 0414 	add.w	r4, r4, #20
 80a2d54:	f1c4 0520 	rsb	r5, r4, #32
 80a2d58:	fa00 f305 	lsl.w	r3, r0, r5
 80a2d5c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2d60:	fa01 f205 	lsl.w	r2, r1, r5
 80a2d64:	ea40 0002 	orr.w	r0, r0, r2
 80a2d68:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2d6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2d70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2d74:	fa21 f604 	lsr.w	r6, r1, r4
 80a2d78:	eb42 0106 	adc.w	r1, r2, r6
 80a2d7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2d80:	bf08      	it	eq
 80a2d82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2d86:	bd70      	pop	{r4, r5, r6, pc}
 80a2d88:	f1c4 040c 	rsb	r4, r4, #12
 80a2d8c:	f1c4 0520 	rsb	r5, r4, #32
 80a2d90:	fa00 f304 	lsl.w	r3, r0, r4
 80a2d94:	fa20 f005 	lsr.w	r0, r0, r5
 80a2d98:	fa01 f204 	lsl.w	r2, r1, r4
 80a2d9c:	ea40 0002 	orr.w	r0, r0, r2
 80a2da0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2da4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2da8:	f141 0100 	adc.w	r1, r1, #0
 80a2dac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2db0:	bf08      	it	eq
 80a2db2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2db6:	bd70      	pop	{r4, r5, r6, pc}
 80a2db8:	f1c4 0520 	rsb	r5, r4, #32
 80a2dbc:	fa00 f205 	lsl.w	r2, r0, r5
 80a2dc0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2dc4:	fa20 f304 	lsr.w	r3, r0, r4
 80a2dc8:	fa01 f205 	lsl.w	r2, r1, r5
 80a2dcc:	ea43 0302 	orr.w	r3, r3, r2
 80a2dd0:	fa21 f004 	lsr.w	r0, r1, r4
 80a2dd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2dd8:	fa21 f204 	lsr.w	r2, r1, r4
 80a2ddc:	ea20 0002 	bic.w	r0, r0, r2
 80a2de0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2de4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2de8:	bf08      	it	eq
 80a2dea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2dee:	bd70      	pop	{r4, r5, r6, pc}
 80a2df0:	f094 0f00 	teq	r4, #0
 80a2df4:	d10f      	bne.n	80a2e16 <__aeabi_dmul+0x1c2>
 80a2df6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2dfa:	0040      	lsls	r0, r0, #1
 80a2dfc:	eb41 0101 	adc.w	r1, r1, r1
 80a2e00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2e04:	bf08      	it	eq
 80a2e06:	3c01      	subeq	r4, #1
 80a2e08:	d0f7      	beq.n	80a2dfa <__aeabi_dmul+0x1a6>
 80a2e0a:	ea41 0106 	orr.w	r1, r1, r6
 80a2e0e:	f095 0f00 	teq	r5, #0
 80a2e12:	bf18      	it	ne
 80a2e14:	4770      	bxne	lr
 80a2e16:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2e1a:	0052      	lsls	r2, r2, #1
 80a2e1c:	eb43 0303 	adc.w	r3, r3, r3
 80a2e20:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2e24:	bf08      	it	eq
 80a2e26:	3d01      	subeq	r5, #1
 80a2e28:	d0f7      	beq.n	80a2e1a <__aeabi_dmul+0x1c6>
 80a2e2a:	ea43 0306 	orr.w	r3, r3, r6
 80a2e2e:	4770      	bx	lr
 80a2e30:	ea94 0f0c 	teq	r4, ip
 80a2e34:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2e38:	bf18      	it	ne
 80a2e3a:	ea95 0f0c 	teqne	r5, ip
 80a2e3e:	d00c      	beq.n	80a2e5a <__aeabi_dmul+0x206>
 80a2e40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2e44:	bf18      	it	ne
 80a2e46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2e4a:	d1d1      	bne.n	80a2df0 <__aeabi_dmul+0x19c>
 80a2e4c:	ea81 0103 	eor.w	r1, r1, r3
 80a2e50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2e54:	f04f 0000 	mov.w	r0, #0
 80a2e58:	bd70      	pop	{r4, r5, r6, pc}
 80a2e5a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2e5e:	bf06      	itte	eq
 80a2e60:	4610      	moveq	r0, r2
 80a2e62:	4619      	moveq	r1, r3
 80a2e64:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2e68:	d019      	beq.n	80a2e9e <__aeabi_dmul+0x24a>
 80a2e6a:	ea94 0f0c 	teq	r4, ip
 80a2e6e:	d102      	bne.n	80a2e76 <__aeabi_dmul+0x222>
 80a2e70:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2e74:	d113      	bne.n	80a2e9e <__aeabi_dmul+0x24a>
 80a2e76:	ea95 0f0c 	teq	r5, ip
 80a2e7a:	d105      	bne.n	80a2e88 <__aeabi_dmul+0x234>
 80a2e7c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2e80:	bf1c      	itt	ne
 80a2e82:	4610      	movne	r0, r2
 80a2e84:	4619      	movne	r1, r3
 80a2e86:	d10a      	bne.n	80a2e9e <__aeabi_dmul+0x24a>
 80a2e88:	ea81 0103 	eor.w	r1, r1, r3
 80a2e8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2e90:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2e94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2e98:	f04f 0000 	mov.w	r0, #0
 80a2e9c:	bd70      	pop	{r4, r5, r6, pc}
 80a2e9e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2ea2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2ea6:	bd70      	pop	{r4, r5, r6, pc}

080a2ea8 <__aeabi_ddiv>:
 80a2ea8:	b570      	push	{r4, r5, r6, lr}
 80a2eaa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2eae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2eb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2eb6:	bf1d      	ittte	ne
 80a2eb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2ebc:	ea94 0f0c 	teqne	r4, ip
 80a2ec0:	ea95 0f0c 	teqne	r5, ip
 80a2ec4:	f000 f8a7 	bleq	80a3016 <__aeabi_ddiv+0x16e>
 80a2ec8:	eba4 0405 	sub.w	r4, r4, r5
 80a2ecc:	ea81 0e03 	eor.w	lr, r1, r3
 80a2ed0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2ed4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2ed8:	f000 8088 	beq.w	80a2fec <__aeabi_ddiv+0x144>
 80a2edc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2ee0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2ee4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2ee8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2eec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2ef0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2ef4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2ef8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2efc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2f00:	429d      	cmp	r5, r3
 80a2f02:	bf08      	it	eq
 80a2f04:	4296      	cmpeq	r6, r2
 80a2f06:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2f0a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2f0e:	d202      	bcs.n	80a2f16 <__aeabi_ddiv+0x6e>
 80a2f10:	085b      	lsrs	r3, r3, #1
 80a2f12:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f16:	1ab6      	subs	r6, r6, r2
 80a2f18:	eb65 0503 	sbc.w	r5, r5, r3
 80a2f1c:	085b      	lsrs	r3, r3, #1
 80a2f1e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2f26:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2f2a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f2e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f32:	bf22      	ittt	cs
 80a2f34:	1ab6      	subcs	r6, r6, r2
 80a2f36:	4675      	movcs	r5, lr
 80a2f38:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2f3c:	085b      	lsrs	r3, r3, #1
 80a2f3e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f42:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f46:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f4a:	bf22      	ittt	cs
 80a2f4c:	1ab6      	subcs	r6, r6, r2
 80a2f4e:	4675      	movcs	r5, lr
 80a2f50:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2f54:	085b      	lsrs	r3, r3, #1
 80a2f56:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f5a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f62:	bf22      	ittt	cs
 80a2f64:	1ab6      	subcs	r6, r6, r2
 80a2f66:	4675      	movcs	r5, lr
 80a2f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2f6c:	085b      	lsrs	r3, r3, #1
 80a2f6e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f72:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f76:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f7a:	bf22      	ittt	cs
 80a2f7c:	1ab6      	subcs	r6, r6, r2
 80a2f7e:	4675      	movcs	r5, lr
 80a2f80:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2f84:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2f88:	d018      	beq.n	80a2fbc <__aeabi_ddiv+0x114>
 80a2f8a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2f8e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2f92:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2f96:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2f9a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2f9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2fa2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2fa6:	d1c0      	bne.n	80a2f2a <__aeabi_ddiv+0x82>
 80a2fa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2fac:	d10b      	bne.n	80a2fc6 <__aeabi_ddiv+0x11e>
 80a2fae:	ea41 0100 	orr.w	r1, r1, r0
 80a2fb2:	f04f 0000 	mov.w	r0, #0
 80a2fb6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2fba:	e7b6      	b.n	80a2f2a <__aeabi_ddiv+0x82>
 80a2fbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2fc0:	bf04      	itt	eq
 80a2fc2:	4301      	orreq	r1, r0
 80a2fc4:	2000      	moveq	r0, #0
 80a2fc6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2fca:	bf88      	it	hi
 80a2fcc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2fd0:	f63f aeaf 	bhi.w	80a2d32 <__aeabi_dmul+0xde>
 80a2fd4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2fd8:	bf04      	itt	eq
 80a2fda:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2fde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2fe2:	f150 0000 	adcs.w	r0, r0, #0
 80a2fe6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2fea:	bd70      	pop	{r4, r5, r6, pc}
 80a2fec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2ff0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2ff4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2ff8:	bfc2      	ittt	gt
 80a2ffa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2ffe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3002:	bd70      	popgt	{r4, r5, r6, pc}
 80a3004:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3008:	f04f 0e00 	mov.w	lr, #0
 80a300c:	3c01      	subs	r4, #1
 80a300e:	e690      	b.n	80a2d32 <__aeabi_dmul+0xde>
 80a3010:	ea45 0e06 	orr.w	lr, r5, r6
 80a3014:	e68d      	b.n	80a2d32 <__aeabi_dmul+0xde>
 80a3016:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a301a:	ea94 0f0c 	teq	r4, ip
 80a301e:	bf08      	it	eq
 80a3020:	ea95 0f0c 	teqeq	r5, ip
 80a3024:	f43f af3b 	beq.w	80a2e9e <__aeabi_dmul+0x24a>
 80a3028:	ea94 0f0c 	teq	r4, ip
 80a302c:	d10a      	bne.n	80a3044 <__aeabi_ddiv+0x19c>
 80a302e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3032:	f47f af34 	bne.w	80a2e9e <__aeabi_dmul+0x24a>
 80a3036:	ea95 0f0c 	teq	r5, ip
 80a303a:	f47f af25 	bne.w	80a2e88 <__aeabi_dmul+0x234>
 80a303e:	4610      	mov	r0, r2
 80a3040:	4619      	mov	r1, r3
 80a3042:	e72c      	b.n	80a2e9e <__aeabi_dmul+0x24a>
 80a3044:	ea95 0f0c 	teq	r5, ip
 80a3048:	d106      	bne.n	80a3058 <__aeabi_ddiv+0x1b0>
 80a304a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a304e:	f43f aefd 	beq.w	80a2e4c <__aeabi_dmul+0x1f8>
 80a3052:	4610      	mov	r0, r2
 80a3054:	4619      	mov	r1, r3
 80a3056:	e722      	b.n	80a2e9e <__aeabi_dmul+0x24a>
 80a3058:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a305c:	bf18      	it	ne
 80a305e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3062:	f47f aec5 	bne.w	80a2df0 <__aeabi_dmul+0x19c>
 80a3066:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a306a:	f47f af0d 	bne.w	80a2e88 <__aeabi_dmul+0x234>
 80a306e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3072:	f47f aeeb 	bne.w	80a2e4c <__aeabi_dmul+0x1f8>
 80a3076:	e712      	b.n	80a2e9e <__aeabi_dmul+0x24a>

080a3078 <__aeabi_uldivmod>:
 80a3078:	b953      	cbnz	r3, 80a3090 <__aeabi_uldivmod+0x18>
 80a307a:	b94a      	cbnz	r2, 80a3090 <__aeabi_uldivmod+0x18>
 80a307c:	2900      	cmp	r1, #0
 80a307e:	bf08      	it	eq
 80a3080:	2800      	cmpeq	r0, #0
 80a3082:	bf1c      	itt	ne
 80a3084:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80a3088:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a308c:	f000 b96e 	b.w	80a336c <__aeabi_idiv0>
 80a3090:	f1ad 0c08 	sub.w	ip, sp, #8
 80a3094:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3098:	f000 f806 	bl	80a30a8 <__udivmoddi4>
 80a309c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a30a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a30a4:	b004      	add	sp, #16
 80a30a6:	4770      	bx	lr

080a30a8 <__udivmoddi4>:
 80a30a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a30ac:	9e08      	ldr	r6, [sp, #32]
 80a30ae:	460d      	mov	r5, r1
 80a30b0:	4604      	mov	r4, r0
 80a30b2:	468e      	mov	lr, r1
 80a30b4:	2b00      	cmp	r3, #0
 80a30b6:	f040 8083 	bne.w	80a31c0 <__udivmoddi4+0x118>
 80a30ba:	428a      	cmp	r2, r1
 80a30bc:	4617      	mov	r7, r2
 80a30be:	d947      	bls.n	80a3150 <__udivmoddi4+0xa8>
 80a30c0:	fab2 f382 	clz	r3, r2
 80a30c4:	b14b      	cbz	r3, 80a30da <__udivmoddi4+0x32>
 80a30c6:	f1c3 0120 	rsb	r1, r3, #32
 80a30ca:	fa05 fe03 	lsl.w	lr, r5, r3
 80a30ce:	fa20 f101 	lsr.w	r1, r0, r1
 80a30d2:	409f      	lsls	r7, r3
 80a30d4:	ea41 0e0e 	orr.w	lr, r1, lr
 80a30d8:	409c      	lsls	r4, r3
 80a30da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a30de:	fbbe fcf8 	udiv	ip, lr, r8
 80a30e2:	fa1f f987 	uxth.w	r9, r7
 80a30e6:	fb08 e21c 	mls	r2, r8, ip, lr
 80a30ea:	fb0c f009 	mul.w	r0, ip, r9
 80a30ee:	0c21      	lsrs	r1, r4, #16
 80a30f0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a30f4:	4290      	cmp	r0, r2
 80a30f6:	d90a      	bls.n	80a310e <__udivmoddi4+0x66>
 80a30f8:	18ba      	adds	r2, r7, r2
 80a30fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a30fe:	f080 8118 	bcs.w	80a3332 <__udivmoddi4+0x28a>
 80a3102:	4290      	cmp	r0, r2
 80a3104:	f240 8115 	bls.w	80a3332 <__udivmoddi4+0x28a>
 80a3108:	f1ac 0c02 	sub.w	ip, ip, #2
 80a310c:	443a      	add	r2, r7
 80a310e:	1a12      	subs	r2, r2, r0
 80a3110:	fbb2 f0f8 	udiv	r0, r2, r8
 80a3114:	fb08 2210 	mls	r2, r8, r0, r2
 80a3118:	fb00 f109 	mul.w	r1, r0, r9
 80a311c:	b2a4      	uxth	r4, r4
 80a311e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a3122:	42a1      	cmp	r1, r4
 80a3124:	d909      	bls.n	80a313a <__udivmoddi4+0x92>
 80a3126:	193c      	adds	r4, r7, r4
 80a3128:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a312c:	f080 8103 	bcs.w	80a3336 <__udivmoddi4+0x28e>
 80a3130:	42a1      	cmp	r1, r4
 80a3132:	f240 8100 	bls.w	80a3336 <__udivmoddi4+0x28e>
 80a3136:	3802      	subs	r0, #2
 80a3138:	443c      	add	r4, r7
 80a313a:	1a64      	subs	r4, r4, r1
 80a313c:	2100      	movs	r1, #0
 80a313e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a3142:	b11e      	cbz	r6, 80a314c <__udivmoddi4+0xa4>
 80a3144:	2200      	movs	r2, #0
 80a3146:	40dc      	lsrs	r4, r3
 80a3148:	e9c6 4200 	strd	r4, r2, [r6]
 80a314c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3150:	b902      	cbnz	r2, 80a3154 <__udivmoddi4+0xac>
 80a3152:	deff      	udf	#255	; 0xff
 80a3154:	fab2 f382 	clz	r3, r2
 80a3158:	2b00      	cmp	r3, #0
 80a315a:	d14f      	bne.n	80a31fc <__udivmoddi4+0x154>
 80a315c:	1a8d      	subs	r5, r1, r2
 80a315e:	2101      	movs	r1, #1
 80a3160:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a3164:	fa1f f882 	uxth.w	r8, r2
 80a3168:	fbb5 fcfe 	udiv	ip, r5, lr
 80a316c:	fb0e 551c 	mls	r5, lr, ip, r5
 80a3170:	fb08 f00c 	mul.w	r0, r8, ip
 80a3174:	0c22      	lsrs	r2, r4, #16
 80a3176:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a317a:	42a8      	cmp	r0, r5
 80a317c:	d907      	bls.n	80a318e <__udivmoddi4+0xe6>
 80a317e:	197d      	adds	r5, r7, r5
 80a3180:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80a3184:	d202      	bcs.n	80a318c <__udivmoddi4+0xe4>
 80a3186:	42a8      	cmp	r0, r5
 80a3188:	f200 80e9 	bhi.w	80a335e <__udivmoddi4+0x2b6>
 80a318c:	4694      	mov	ip, r2
 80a318e:	1a2d      	subs	r5, r5, r0
 80a3190:	fbb5 f0fe 	udiv	r0, r5, lr
 80a3194:	fb0e 5510 	mls	r5, lr, r0, r5
 80a3198:	fb08 f800 	mul.w	r8, r8, r0
 80a319c:	b2a4      	uxth	r4, r4
 80a319e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a31a2:	45a0      	cmp	r8, r4
 80a31a4:	d907      	bls.n	80a31b6 <__udivmoddi4+0x10e>
 80a31a6:	193c      	adds	r4, r7, r4
 80a31a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a31ac:	d202      	bcs.n	80a31b4 <__udivmoddi4+0x10c>
 80a31ae:	45a0      	cmp	r8, r4
 80a31b0:	f200 80d9 	bhi.w	80a3366 <__udivmoddi4+0x2be>
 80a31b4:	4610      	mov	r0, r2
 80a31b6:	eba4 0408 	sub.w	r4, r4, r8
 80a31ba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a31be:	e7c0      	b.n	80a3142 <__udivmoddi4+0x9a>
 80a31c0:	428b      	cmp	r3, r1
 80a31c2:	d908      	bls.n	80a31d6 <__udivmoddi4+0x12e>
 80a31c4:	2e00      	cmp	r6, #0
 80a31c6:	f000 80b1 	beq.w	80a332c <__udivmoddi4+0x284>
 80a31ca:	2100      	movs	r1, #0
 80a31cc:	e9c6 0500 	strd	r0, r5, [r6]
 80a31d0:	4608      	mov	r0, r1
 80a31d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a31d6:	fab3 f183 	clz	r1, r3
 80a31da:	2900      	cmp	r1, #0
 80a31dc:	d14b      	bne.n	80a3276 <__udivmoddi4+0x1ce>
 80a31de:	42ab      	cmp	r3, r5
 80a31e0:	d302      	bcc.n	80a31e8 <__udivmoddi4+0x140>
 80a31e2:	4282      	cmp	r2, r0
 80a31e4:	f200 80b9 	bhi.w	80a335a <__udivmoddi4+0x2b2>
 80a31e8:	1a84      	subs	r4, r0, r2
 80a31ea:	eb65 0303 	sbc.w	r3, r5, r3
 80a31ee:	2001      	movs	r0, #1
 80a31f0:	469e      	mov	lr, r3
 80a31f2:	2e00      	cmp	r6, #0
 80a31f4:	d0aa      	beq.n	80a314c <__udivmoddi4+0xa4>
 80a31f6:	e9c6 4e00 	strd	r4, lr, [r6]
 80a31fa:	e7a7      	b.n	80a314c <__udivmoddi4+0xa4>
 80a31fc:	409f      	lsls	r7, r3
 80a31fe:	f1c3 0220 	rsb	r2, r3, #32
 80a3202:	40d1      	lsrs	r1, r2
 80a3204:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a3208:	fbb1 f0fe 	udiv	r0, r1, lr
 80a320c:	fa1f f887 	uxth.w	r8, r7
 80a3210:	fb0e 1110 	mls	r1, lr, r0, r1
 80a3214:	fa24 f202 	lsr.w	r2, r4, r2
 80a3218:	409d      	lsls	r5, r3
 80a321a:	fb00 fc08 	mul.w	ip, r0, r8
 80a321e:	432a      	orrs	r2, r5
 80a3220:	0c15      	lsrs	r5, r2, #16
 80a3222:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a3226:	45ac      	cmp	ip, r5
 80a3228:	fa04 f403 	lsl.w	r4, r4, r3
 80a322c:	d909      	bls.n	80a3242 <__udivmoddi4+0x19a>
 80a322e:	197d      	adds	r5, r7, r5
 80a3230:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80a3234:	f080 808f 	bcs.w	80a3356 <__udivmoddi4+0x2ae>
 80a3238:	45ac      	cmp	ip, r5
 80a323a:	f240 808c 	bls.w	80a3356 <__udivmoddi4+0x2ae>
 80a323e:	3802      	subs	r0, #2
 80a3240:	443d      	add	r5, r7
 80a3242:	eba5 050c 	sub.w	r5, r5, ip
 80a3246:	fbb5 f1fe 	udiv	r1, r5, lr
 80a324a:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a324e:	fb01 f908 	mul.w	r9, r1, r8
 80a3252:	b295      	uxth	r5, r2
 80a3254:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a3258:	45a9      	cmp	r9, r5
 80a325a:	d907      	bls.n	80a326c <__udivmoddi4+0x1c4>
 80a325c:	197d      	adds	r5, r7, r5
 80a325e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80a3262:	d274      	bcs.n	80a334e <__udivmoddi4+0x2a6>
 80a3264:	45a9      	cmp	r9, r5
 80a3266:	d972      	bls.n	80a334e <__udivmoddi4+0x2a6>
 80a3268:	3902      	subs	r1, #2
 80a326a:	443d      	add	r5, r7
 80a326c:	eba5 0509 	sub.w	r5, r5, r9
 80a3270:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a3274:	e778      	b.n	80a3168 <__udivmoddi4+0xc0>
 80a3276:	f1c1 0720 	rsb	r7, r1, #32
 80a327a:	408b      	lsls	r3, r1
 80a327c:	fa22 fc07 	lsr.w	ip, r2, r7
 80a3280:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3284:	fa25 f407 	lsr.w	r4, r5, r7
 80a3288:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a328c:	fbb4 f9fe 	udiv	r9, r4, lr
 80a3290:	fa1f f88c 	uxth.w	r8, ip
 80a3294:	fb0e 4419 	mls	r4, lr, r9, r4
 80a3298:	fa20 f307 	lsr.w	r3, r0, r7
 80a329c:	fb09 fa08 	mul.w	sl, r9, r8
 80a32a0:	408d      	lsls	r5, r1
 80a32a2:	431d      	orrs	r5, r3
 80a32a4:	0c2b      	lsrs	r3, r5, #16
 80a32a6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a32aa:	45a2      	cmp	sl, r4
 80a32ac:	fa02 f201 	lsl.w	r2, r2, r1
 80a32b0:	fa00 f301 	lsl.w	r3, r0, r1
 80a32b4:	d909      	bls.n	80a32ca <__udivmoddi4+0x222>
 80a32b6:	eb1c 0404 	adds.w	r4, ip, r4
 80a32ba:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80a32be:	d248      	bcs.n	80a3352 <__udivmoddi4+0x2aa>
 80a32c0:	45a2      	cmp	sl, r4
 80a32c2:	d946      	bls.n	80a3352 <__udivmoddi4+0x2aa>
 80a32c4:	f1a9 0902 	sub.w	r9, r9, #2
 80a32c8:	4464      	add	r4, ip
 80a32ca:	eba4 040a 	sub.w	r4, r4, sl
 80a32ce:	fbb4 f0fe 	udiv	r0, r4, lr
 80a32d2:	fb0e 4410 	mls	r4, lr, r0, r4
 80a32d6:	fb00 fa08 	mul.w	sl, r0, r8
 80a32da:	b2ad      	uxth	r5, r5
 80a32dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a32e0:	45a2      	cmp	sl, r4
 80a32e2:	d908      	bls.n	80a32f6 <__udivmoddi4+0x24e>
 80a32e4:	eb1c 0404 	adds.w	r4, ip, r4
 80a32e8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80a32ec:	d22d      	bcs.n	80a334a <__udivmoddi4+0x2a2>
 80a32ee:	45a2      	cmp	sl, r4
 80a32f0:	d92b      	bls.n	80a334a <__udivmoddi4+0x2a2>
 80a32f2:	3802      	subs	r0, #2
 80a32f4:	4464      	add	r4, ip
 80a32f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a32fa:	fba0 8902 	umull	r8, r9, r0, r2
 80a32fe:	eba4 040a 	sub.w	r4, r4, sl
 80a3302:	454c      	cmp	r4, r9
 80a3304:	46c6      	mov	lr, r8
 80a3306:	464d      	mov	r5, r9
 80a3308:	d319      	bcc.n	80a333e <__udivmoddi4+0x296>
 80a330a:	d016      	beq.n	80a333a <__udivmoddi4+0x292>
 80a330c:	b15e      	cbz	r6, 80a3326 <__udivmoddi4+0x27e>
 80a330e:	ebb3 020e 	subs.w	r2, r3, lr
 80a3312:	eb64 0405 	sbc.w	r4, r4, r5
 80a3316:	fa04 f707 	lsl.w	r7, r4, r7
 80a331a:	fa22 f301 	lsr.w	r3, r2, r1
 80a331e:	431f      	orrs	r7, r3
 80a3320:	40cc      	lsrs	r4, r1
 80a3322:	e9c6 7400 	strd	r7, r4, [r6]
 80a3326:	2100      	movs	r1, #0
 80a3328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a332c:	4631      	mov	r1, r6
 80a332e:	4630      	mov	r0, r6
 80a3330:	e70c      	b.n	80a314c <__udivmoddi4+0xa4>
 80a3332:	468c      	mov	ip, r1
 80a3334:	e6eb      	b.n	80a310e <__udivmoddi4+0x66>
 80a3336:	4610      	mov	r0, r2
 80a3338:	e6ff      	b.n	80a313a <__udivmoddi4+0x92>
 80a333a:	4543      	cmp	r3, r8
 80a333c:	d2e6      	bcs.n	80a330c <__udivmoddi4+0x264>
 80a333e:	ebb8 0e02 	subs.w	lr, r8, r2
 80a3342:	eb69 050c 	sbc.w	r5, r9, ip
 80a3346:	3801      	subs	r0, #1
 80a3348:	e7e0      	b.n	80a330c <__udivmoddi4+0x264>
 80a334a:	4628      	mov	r0, r5
 80a334c:	e7d3      	b.n	80a32f6 <__udivmoddi4+0x24e>
 80a334e:	4611      	mov	r1, r2
 80a3350:	e78c      	b.n	80a326c <__udivmoddi4+0x1c4>
 80a3352:	4681      	mov	r9, r0
 80a3354:	e7b9      	b.n	80a32ca <__udivmoddi4+0x222>
 80a3356:	4608      	mov	r0, r1
 80a3358:	e773      	b.n	80a3242 <__udivmoddi4+0x19a>
 80a335a:	4608      	mov	r0, r1
 80a335c:	e749      	b.n	80a31f2 <__udivmoddi4+0x14a>
 80a335e:	f1ac 0c02 	sub.w	ip, ip, #2
 80a3362:	443d      	add	r5, r7
 80a3364:	e713      	b.n	80a318e <__udivmoddi4+0xe6>
 80a3366:	3802      	subs	r0, #2
 80a3368:	443c      	add	r4, r7
 80a336a:	e724      	b.n	80a31b6 <__udivmoddi4+0x10e>

080a336c <__aeabi_idiv0>:
 80a336c:	4770      	bx	lr
 80a336e:	bf00      	nop

080a3370 <__cxa_atexit>:
 80a3370:	b510      	push	{r4, lr}
 80a3372:	4604      	mov	r4, r0
 80a3374:	4804      	ldr	r0, [pc, #16]	; (80a3388 <__cxa_atexit+0x18>)
 80a3376:	4613      	mov	r3, r2
 80a3378:	b120      	cbz	r0, 80a3384 <__cxa_atexit+0x14>
 80a337a:	460a      	mov	r2, r1
 80a337c:	2002      	movs	r0, #2
 80a337e:	4621      	mov	r1, r4
 80a3380:	f3af 8000 	nop.w
 80a3384:	bd10      	pop	{r4, pc}
 80a3386:	bf00      	nop
 80a3388:	00000000 	.word	0x00000000

080a338c <memcpy>:
 80a338c:	440a      	add	r2, r1
 80a338e:	4291      	cmp	r1, r2
 80a3390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3394:	d100      	bne.n	80a3398 <memcpy+0xc>
 80a3396:	4770      	bx	lr
 80a3398:	b510      	push	{r4, lr}
 80a339a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a339e:	4291      	cmp	r1, r2
 80a33a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a33a4:	d1f9      	bne.n	80a339a <memcpy+0xe>
 80a33a6:	bd10      	pop	{r4, pc}

080a33a8 <memmove>:
 80a33a8:	4288      	cmp	r0, r1
 80a33aa:	b510      	push	{r4, lr}
 80a33ac:	eb01 0402 	add.w	r4, r1, r2
 80a33b0:	d902      	bls.n	80a33b8 <memmove+0x10>
 80a33b2:	4284      	cmp	r4, r0
 80a33b4:	4623      	mov	r3, r4
 80a33b6:	d807      	bhi.n	80a33c8 <memmove+0x20>
 80a33b8:	1e43      	subs	r3, r0, #1
 80a33ba:	42a1      	cmp	r1, r4
 80a33bc:	d008      	beq.n	80a33d0 <memmove+0x28>
 80a33be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a33c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a33c6:	e7f8      	b.n	80a33ba <memmove+0x12>
 80a33c8:	4601      	mov	r1, r0
 80a33ca:	4402      	add	r2, r0
 80a33cc:	428a      	cmp	r2, r1
 80a33ce:	d100      	bne.n	80a33d2 <memmove+0x2a>
 80a33d0:	bd10      	pop	{r4, pc}
 80a33d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a33d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a33da:	e7f7      	b.n	80a33cc <memmove+0x24>

080a33dc <memset>:
 80a33dc:	4603      	mov	r3, r0
 80a33de:	4402      	add	r2, r0
 80a33e0:	4293      	cmp	r3, r2
 80a33e2:	d100      	bne.n	80a33e6 <memset+0xa>
 80a33e4:	4770      	bx	lr
 80a33e6:	f803 1b01 	strb.w	r1, [r3], #1
 80a33ea:	e7f9      	b.n	80a33e0 <memset+0x4>

080a33ec <srand>:
 80a33ec:	b538      	push	{r3, r4, r5, lr}
 80a33ee:	4b0d      	ldr	r3, [pc, #52]	; (80a3424 <srand+0x38>)
 80a33f0:	4604      	mov	r4, r0
 80a33f2:	681d      	ldr	r5, [r3, #0]
 80a33f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a33f6:	b97b      	cbnz	r3, 80a3418 <srand+0x2c>
 80a33f8:	2018      	movs	r0, #24
 80a33fa:	f7fd fad5 	bl	80a09a8 <malloc>
 80a33fe:	4a0a      	ldr	r2, [pc, #40]	; (80a3428 <srand+0x3c>)
 80a3400:	4b0a      	ldr	r3, [pc, #40]	; (80a342c <srand+0x40>)
 80a3402:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3404:	e9c0 2300 	strd	r2, r3, [r0]
 80a3408:	4b09      	ldr	r3, [pc, #36]	; (80a3430 <srand+0x44>)
 80a340a:	2201      	movs	r2, #1
 80a340c:	6083      	str	r3, [r0, #8]
 80a340e:	230b      	movs	r3, #11
 80a3410:	8183      	strh	r3, [r0, #12]
 80a3412:	2300      	movs	r3, #0
 80a3414:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3418:	2200      	movs	r2, #0
 80a341a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a341c:	611c      	str	r4, [r3, #16]
 80a341e:	615a      	str	r2, [r3, #20]
 80a3420:	bd38      	pop	{r3, r4, r5, pc}
 80a3422:	bf00      	nop
 80a3424:	2000000c 	.word	0x2000000c
 80a3428:	abcd330e 	.word	0xabcd330e
 80a342c:	e66d1234 	.word	0xe66d1234
 80a3430:	0005deec 	.word	0x0005deec

080a3434 <strchr>:
 80a3434:	4603      	mov	r3, r0
 80a3436:	b2c9      	uxtb	r1, r1
 80a3438:	4618      	mov	r0, r3
 80a343a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a343e:	b112      	cbz	r2, 80a3446 <strchr+0x12>
 80a3440:	428a      	cmp	r2, r1
 80a3442:	d1f9      	bne.n	80a3438 <strchr+0x4>
 80a3444:	4770      	bx	lr
 80a3446:	2900      	cmp	r1, #0
 80a3448:	bf18      	it	ne
 80a344a:	2000      	movne	r0, #0
 80a344c:	4770      	bx	lr

080a344e <strchrnul>:
 80a344e:	b510      	push	{r4, lr}
 80a3450:	4604      	mov	r4, r0
 80a3452:	f7ff ffef 	bl	80a3434 <strchr>
 80a3456:	b918      	cbnz	r0, 80a3460 <strchrnul+0x12>
 80a3458:	4620      	mov	r0, r4
 80a345a:	f000 f814 	bl	80a3486 <strlen>
 80a345e:	4420      	add	r0, r4
 80a3460:	bd10      	pop	{r4, pc}

080a3462 <strcmp>:
 80a3462:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3466:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a346a:	2a01      	cmp	r2, #1
 80a346c:	bf28      	it	cs
 80a346e:	429a      	cmpcs	r2, r3
 80a3470:	d0f7      	beq.n	80a3462 <strcmp>
 80a3472:	1ad0      	subs	r0, r2, r3
 80a3474:	4770      	bx	lr

080a3476 <strcpy>:
 80a3476:	4603      	mov	r3, r0
 80a3478:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a347c:	f803 2b01 	strb.w	r2, [r3], #1
 80a3480:	2a00      	cmp	r2, #0
 80a3482:	d1f9      	bne.n	80a3478 <strcpy+0x2>
 80a3484:	4770      	bx	lr

080a3486 <strlen>:
 80a3486:	4603      	mov	r3, r0
 80a3488:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a348c:	2a00      	cmp	r2, #0
 80a348e:	d1fb      	bne.n	80a3488 <strlen+0x2>
 80a3490:	1a18      	subs	r0, r3, r0
 80a3492:	3801      	subs	r0, #1
 80a3494:	4770      	bx	lr

080a3496 <strncmp>:
 80a3496:	b510      	push	{r4, lr}
 80a3498:	b16a      	cbz	r2, 80a34b6 <strncmp+0x20>
 80a349a:	3901      	subs	r1, #1
 80a349c:	1884      	adds	r4, r0, r2
 80a349e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a34a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a34a6:	4293      	cmp	r3, r2
 80a34a8:	d103      	bne.n	80a34b2 <strncmp+0x1c>
 80a34aa:	42a0      	cmp	r0, r4
 80a34ac:	d001      	beq.n	80a34b2 <strncmp+0x1c>
 80a34ae:	2b00      	cmp	r3, #0
 80a34b0:	d1f5      	bne.n	80a349e <strncmp+0x8>
 80a34b2:	1a98      	subs	r0, r3, r2
 80a34b4:	bd10      	pop	{r4, pc}
 80a34b6:	4610      	mov	r0, r2
 80a34b8:	e7fc      	b.n	80a34b4 <strncmp+0x1e>

080a34ba <strrchr>:
 80a34ba:	b538      	push	{r3, r4, r5, lr}
 80a34bc:	4603      	mov	r3, r0
 80a34be:	460c      	mov	r4, r1
 80a34c0:	b969      	cbnz	r1, 80a34de <strrchr+0x24>
 80a34c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a34c6:	f7ff bfb5 	b.w	80a3434 <strchr>
 80a34ca:	4605      	mov	r5, r0
 80a34cc:	1c43      	adds	r3, r0, #1
 80a34ce:	4621      	mov	r1, r4
 80a34d0:	4618      	mov	r0, r3
 80a34d2:	f7ff ffaf 	bl	80a3434 <strchr>
 80a34d6:	2800      	cmp	r0, #0
 80a34d8:	d1f7      	bne.n	80a34ca <strrchr+0x10>
 80a34da:	4628      	mov	r0, r5
 80a34dc:	bd38      	pop	{r3, r4, r5, pc}
 80a34de:	2500      	movs	r5, #0
 80a34e0:	e7f5      	b.n	80a34ce <strrchr+0x14>
	...

080a34e4 <_strtol_l.isra.0>:
 80a34e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a34e8:	468c      	mov	ip, r1
 80a34ea:	4686      	mov	lr, r0
 80a34ec:	4e39      	ldr	r6, [pc, #228]	; (80a35d4 <_strtol_l.isra.0+0xf0>)
 80a34ee:	4660      	mov	r0, ip
 80a34f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a34f4:	5da5      	ldrb	r5, [r4, r6]
 80a34f6:	f015 0508 	ands.w	r5, r5, #8
 80a34fa:	d1f8      	bne.n	80a34ee <_strtol_l.isra.0+0xa>
 80a34fc:	2c2d      	cmp	r4, #45	; 0x2d
 80a34fe:	d133      	bne.n	80a3568 <_strtol_l.isra.0+0x84>
 80a3500:	f04f 0801 	mov.w	r8, #1
 80a3504:	f89c 4000 	ldrb.w	r4, [ip]
 80a3508:	f100 0c02 	add.w	ip, r0, #2
 80a350c:	2b00      	cmp	r3, #0
 80a350e:	d05c      	beq.n	80a35ca <_strtol_l.isra.0+0xe6>
 80a3510:	2b10      	cmp	r3, #16
 80a3512:	d10c      	bne.n	80a352e <_strtol_l.isra.0+0x4a>
 80a3514:	2c30      	cmp	r4, #48	; 0x30
 80a3516:	d10a      	bne.n	80a352e <_strtol_l.isra.0+0x4a>
 80a3518:	f89c 0000 	ldrb.w	r0, [ip]
 80a351c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3520:	2858      	cmp	r0, #88	; 0x58
 80a3522:	d14d      	bne.n	80a35c0 <_strtol_l.isra.0+0xdc>
 80a3524:	2310      	movs	r3, #16
 80a3526:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a352a:	f10c 0c02 	add.w	ip, ip, #2
 80a352e:	2600      	movs	r6, #0
 80a3530:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a3534:	3f01      	subs	r7, #1
 80a3536:	fbb7 f9f3 	udiv	r9, r7, r3
 80a353a:	4630      	mov	r0, r6
 80a353c:	fb03 7a19 	mls	sl, r3, r9, r7
 80a3540:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a3544:	2d09      	cmp	r5, #9
 80a3546:	d818      	bhi.n	80a357a <_strtol_l.isra.0+0x96>
 80a3548:	462c      	mov	r4, r5
 80a354a:	42a3      	cmp	r3, r4
 80a354c:	dd24      	ble.n	80a3598 <_strtol_l.isra.0+0xb4>
 80a354e:	1c75      	adds	r5, r6, #1
 80a3550:	d007      	beq.n	80a3562 <_strtol_l.isra.0+0x7e>
 80a3552:	4581      	cmp	r9, r0
 80a3554:	d31d      	bcc.n	80a3592 <_strtol_l.isra.0+0xae>
 80a3556:	d101      	bne.n	80a355c <_strtol_l.isra.0+0x78>
 80a3558:	45a2      	cmp	sl, r4
 80a355a:	db1a      	blt.n	80a3592 <_strtol_l.isra.0+0xae>
 80a355c:	2601      	movs	r6, #1
 80a355e:	fb00 4003 	mla	r0, r0, r3, r4
 80a3562:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a3566:	e7eb      	b.n	80a3540 <_strtol_l.isra.0+0x5c>
 80a3568:	2c2b      	cmp	r4, #43	; 0x2b
 80a356a:	bf08      	it	eq
 80a356c:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a3570:	46a8      	mov	r8, r5
 80a3572:	bf08      	it	eq
 80a3574:	f100 0c02 	addeq.w	ip, r0, #2
 80a3578:	e7c8      	b.n	80a350c <_strtol_l.isra.0+0x28>
 80a357a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a357e:	2d19      	cmp	r5, #25
 80a3580:	d801      	bhi.n	80a3586 <_strtol_l.isra.0+0xa2>
 80a3582:	3c37      	subs	r4, #55	; 0x37
 80a3584:	e7e1      	b.n	80a354a <_strtol_l.isra.0+0x66>
 80a3586:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a358a:	2d19      	cmp	r5, #25
 80a358c:	d804      	bhi.n	80a3598 <_strtol_l.isra.0+0xb4>
 80a358e:	3c57      	subs	r4, #87	; 0x57
 80a3590:	e7db      	b.n	80a354a <_strtol_l.isra.0+0x66>
 80a3592:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a3596:	e7e4      	b.n	80a3562 <_strtol_l.isra.0+0x7e>
 80a3598:	1c73      	adds	r3, r6, #1
 80a359a:	d106      	bne.n	80a35aa <_strtol_l.isra.0+0xc6>
 80a359c:	2322      	movs	r3, #34	; 0x22
 80a359e:	4638      	mov	r0, r7
 80a35a0:	f8ce 3000 	str.w	r3, [lr]
 80a35a4:	b942      	cbnz	r2, 80a35b8 <_strtol_l.isra.0+0xd4>
 80a35a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a35aa:	f1b8 0f00 	cmp.w	r8, #0
 80a35ae:	d000      	beq.n	80a35b2 <_strtol_l.isra.0+0xce>
 80a35b0:	4240      	negs	r0, r0
 80a35b2:	2a00      	cmp	r2, #0
 80a35b4:	d0f7      	beq.n	80a35a6 <_strtol_l.isra.0+0xc2>
 80a35b6:	b10e      	cbz	r6, 80a35bc <_strtol_l.isra.0+0xd8>
 80a35b8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80a35bc:	6011      	str	r1, [r2, #0]
 80a35be:	e7f2      	b.n	80a35a6 <_strtol_l.isra.0+0xc2>
 80a35c0:	2430      	movs	r4, #48	; 0x30
 80a35c2:	2b00      	cmp	r3, #0
 80a35c4:	d1b3      	bne.n	80a352e <_strtol_l.isra.0+0x4a>
 80a35c6:	2308      	movs	r3, #8
 80a35c8:	e7b1      	b.n	80a352e <_strtol_l.isra.0+0x4a>
 80a35ca:	2c30      	cmp	r4, #48	; 0x30
 80a35cc:	d0a4      	beq.n	80a3518 <_strtol_l.isra.0+0x34>
 80a35ce:	230a      	movs	r3, #10
 80a35d0:	e7ad      	b.n	80a352e <_strtol_l.isra.0+0x4a>
 80a35d2:	bf00      	nop
 80a35d4:	080a3882 	.word	0x080a3882

080a35d8 <strtol>:
 80a35d8:	4613      	mov	r3, r2
 80a35da:	460a      	mov	r2, r1
 80a35dc:	4601      	mov	r1, r0
 80a35de:	4802      	ldr	r0, [pc, #8]	; (80a35e8 <strtol+0x10>)
 80a35e0:	6800      	ldr	r0, [r0, #0]
 80a35e2:	f7ff bf7f 	b.w	80a34e4 <_strtol_l.isra.0>
 80a35e6:	bf00      	nop
 80a35e8:	2000000c 	.word	0x2000000c

080a35ec <dynalib_user>:
 80a35ec:	080a0021 080a0061 080a0089 080a008d     !...a...........
 80a35fc:	00000000 706d6554 74617265 3a657275     ....Temperature:
 80a360c:	322e2520 48202c66 64696d75 3a797469      %.2f, Humidity:
 80a361c:	322e2520 00000066                        %.2f...

080a3624 <_ZTVN5spark10LogHandlerE>:
	...
 80a3634:	080a00a9 080a00cd                       ........

080a363c <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a3644:	080a00d9 080a010d 080a1ca9 080a00cf     ................

080a3654 <_ZTV7TwoWire>:
	...
 80a365c:	080a0a4b 080a0a95 080a0a6d 080a0a4d     K.......m...M...
 80a366c:	080a0a75 080a0a7d 080a0a85 080a0a8d     u...}...........

080a367c <_ZTV9IPAddress>:
	...
 80a3684:	080a0b91 080a0b81 080a0b83 25006425     ............%d.%
 80a3694:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
 80a36a4:	006c6169 53425355 61697265 4a00316c     ial.USBSerial1.J
 80a36b4:	534e4f53 61657274 676f4c6d 646e6148     SONStreamLogHand
 80a36c4:	0072656c 00707061 30313025 5d002075     ler.app.%010u .]
 80a36d4:	202c0020 3a292800 5b200020 646f6300      ., .(): . [.cod
 80a36e4:	203d2065 00692500 61746564 20736c69     e = .%i.details 
 80a36f4:	0d00203d 006d000a 6e6c0063 006e6600     = ....m.c.ln.fn.
 80a3704:	6f630074 64006564 69617465 0000006c     t.code.detail...

080a3714 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a371c:	080a1033 080a1059 080a1019 080a0c77     3...Y.......w...

080a372c <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a3734:	080a14d5 080a14ed 080a1ca9 080a00cf     ................

080a3744 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a374c:	080a1501 080a1515 080a1e51 080a1021     ........Q...!...

080a375c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a3764:	080a1031 080a1067 080a1be5 080a1023     1...g.......#...

080a3774 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a377c:	080a102f 080a1075 080a13fd 080a1091     /...u...........

080a378c <_ZTVN5spark12NetworkClassE>:
	...
 80a3794:	080a1fc5 080a1fcf 080a1fd9 080a1fe3     ................
 80a37a4:	080a1fed 080a1ff9 080a2005 080a200d     ......... ... ..
 80a37b4:	080a2015 080a2021 080a2029 080a2033     . ..! ..) ..3 ..
 80a37c4:	080a203d 252d5925 64252d6d 3a482554     = ..%Y-%m-%dT%H:
 80a37d4:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

080a37e4 <_ZTV11USARTSerial>:
	...
 80a37ec:	080a2359 080a23c1 080a239d 080a20a1     Y#...#...#... ..
 80a37fc:	080a236d 080a2389 080a237b 080a2397     m#...#..{#...#..
 80a380c:	080a235b 080a235f                       [#.._#..

080a3814 <_ZTV9USBSerial>:
	...
 80a381c:	080a2465 080a24cb 080a24a3 080a20a1     e$...$...$... ..
 80a382c:	080a2495 080a2467 080a2477 080a24c5     .$..g$..w$...$..
 80a383c:	080a2487 080a2461                       .$..a$..

080a3844 <_ZTVN5spark9WiFiClassE>:
	...
 80a384c:	080a26ab 080a26a1 080a2697 080a2609     .&...&...&...&..
 80a385c:	080a268b 080a267f 080a2005 080a200d     .&...&... ... ..
 80a386c:	080a2673 080a266b 080a2661 080a2657     s&..k&..a&..W&..
 80a387c:	080a2613                                .&..

080a3880 <_ZSt7nothrow>:
	...

080a3881 <_ctype_>:
 80a3881:	20202000 20202020 28282020 20282828     .         ((((( 
 80a3891:	20202020 20202020 20202020 20202020                     
 80a38a1:	10108820 10101010 10101010 10101010      ...............
 80a38b1:	04040410 04040404 10040404 10101010     ................
 80a38c1:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a38d1:	01010101 01010101 01010101 10101010     ................
 80a38e1:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a38f1:	02020202 02020202 02020202 10101010     ................
 80a3901:	00000020 00000000 00000000 00000000      ...............
	...

080a3982 <link_const_variable_data_end>:
	...

080a3984 <link_constructors_location>:
 80a3984:	080a02d1 	.word	0x080a02d1
 80a3988:	080a1c99 	.word	0x080a1c99
 80a398c:	080a208d 	.word	0x080a208d
 80a3990:	080a21b5 	.word	0x080a21b5
 80a3994:	080a2309 	.word	0x080a2309
 80a3998:	080a2345 	.word	0x080a2345
 80a399c:	080a26b5 	.word	0x080a26b5
 80a39a0:	080a2895 	.word	0x080a2895

080a39a4 <link_constructors_end>:
	...
